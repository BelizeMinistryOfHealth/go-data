"use strict";const moment=require("moment"),app=require("../../server/server"),_=require("lodash"),genericHelpers=require("../../components/helpers"),async=require("async"),pdfUtils=app.utils.pdfDoc,searchByRelationProperty=require("../../components/searchByRelationProperty"),FollowupGeneration=require("../../components/followupGeneration"),fs=require("fs"),AdmZip=require("adm-zip"),tmp=require("tmp"),Uuid=require("uuid"),templateParser=require("./../../components/templateParser"),PromisePool=require("es6-promise-pool"),fork=require("child_process").fork,WorkerRunner=require("./../../components/workerRunner");module.exports=function(e){const t=e.helpers;function o(e,t,o){const n=_.get(e,"args.filter",{});let s=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(n);!_.get(n,"where.contact")&&s.contact&&_.set(n,"where.contact",s.contact),o()}function n(e,t,o){const n=_.get(e,"args.filter",{});let s=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(n);!_.get(n,"where.case")&&s.case&&_.set(n,"where.case",s.case),!_.get(n,"where.person")&&s.person&&_.set(n,"where.person",s.person),o()}function s(e,t,o){const n=_.get(e,"args.filter",{});let s=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(n);!_.get(n,"where.relationship")&&s.relationships&&_.set(n,"where.relationship",s.relationships),!_.get(n,"where.labResult")&&s.labResults&&_.set(n,"where.labResult",s.labResults),o()}function a(e,t,o){const n=_.get(e,"args.filter",{});let s=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(n,{people:"case"});!_.get(n,"where.followUp")&&s.followUps&&_.set(n,"where.followUp",s.followUps),!_.get(n,"where.case")&&s.case&&_.set(n,"where.case",s.case),o()}app.utils.remote.disableRemoteMethods(e,["prototype.__delete__cases","prototype.__delete__cases__labResults","prototype.__delete__cases__relationships","prototype.__delete__clusters","prototype.__delete__contacts","prototype.__delete__contacts__followUps","prototype.__delete__contacts__relationships","prototype.__delete__contacts__labResults","prototype.__delete__events","prototype.__create__clusters__relationships","prototype.__delete__clusters__relationships","prototype.__findById__clusters__relationships","prototype.__updateById__clusters__relationships","prototype.__destroyById__clusters__relationships","prototype.__delete__contacts__relationships","prototype.__get__referenceData","prototype.__delete__referenceData","prototype.__count__referenceData","prototype.__create__referenceData","prototype.__findById__referenceData","prototype.__updateById__referenceData","prototype.__destroyById__referenceData","prototype.__create__followUps","prototype.__delete__followUps","prototype.__updateById__followUps","prototype.__destroyById__followUps","prototype.__create__people","prototype.__delete__people","prototype.__findById__people","prototype.__updateById__people","prototype.__destroyById__people","prototype.__create__labResults","prototype.__delete__labResults","prototype.__create__attachments","prototype.__get__attachments","prototype.__delete__attachments","prototype.__updateById__attachments","prototype.__count__attachments","prototype.__get__followUps","prototype.__get__labResults","prototype.__get__cases","prototype.__get__contacts","prototype.__get__events","prototype.__count__contacts"]),app.utils.remote.searchByRelationProperty.attachOnRemotes(e,["prototype.findCaseRelationships","prototype.findContactRelationships","prototype.findEventRelationships"]),e.beforeRemote("prototype.__updateById__contacts",function(e,t,o){const n=_.get(e,"args.data.followUp.status");n?app.models.contact.findById(e.args.fk).then(function(t){const s=t.toJSON();Object.assign(e.args.data.followUp,s.followUp,{status:n}),o()}):o()}),e.prototype.filteredCountEvents=function(e,t){if((e=e||{}).where=e.where||{},e.where.outbreakId=this.id,!app.utils.remote.searchByRelationProperty.shouldUseDeepCount(e))return app.models.event.count(e.where);this.findEvents(e,function(o,n){if(o)return t(o);t(null,app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(n,e).length)})},e.beforeRemote("prototype.findCases",function(t,o,n){e.helpers.filterPersonInformationBasedOnAccessPermissions("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t),e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t,o,n)}),e.beforeRemote("prototype.findCases",(e,t,o)=>{s(e,t,o)}),e.beforeRemote("prototype.findEvents",function(t,o,n){e.helpers.filterPersonInformationBasedOnAccessPermissions("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",t),e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",t,o,n)}),e.beforeRemote("prototype.findContacts",function(t,o,n){e.helpers.filterPersonInformationBasedOnAccessPermissions("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",t),n()}),e.beforeRemote("prototype.filteredCountCases",function(t,o,n){e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t,o,n)}),e.beforeRemote("prototype.filteredCountCases",(e,t,o)=>{e.args=e.args||{},e.args.filter=genericHelpers.removeFilterOptions(e.args.filter,["countRelations"]),s(e,t,o)}),e.beforeRemote("prototype.countCasesPerClassification",function(t,o,n){e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t,o,n)}),e.beforeRemote("prototype.exportFilteredCases",function(t,o,n){t.args=t.args||{},t.args.filter=genericHelpers.removeFilterOptions(t.args.filter,["countRelations"]),e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t,o,n)}),e.beforeRemote("prototype.filteredCountEvents",function(t,o,n){t.args=t.args||{},t.args.filter=genericHelpers.removeFilterOptions(t.args.filter,["countRelations"]),t.args.filter=genericHelpers.attachCustomDeleteFilterOption(t.args.filter),e.helpers.attachFilterPeopleWithoutRelation("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",t,o,n)}),e.beforeRemote("find",function(e,t,o){const n=_.get(e,"req.authData.user.outbreakIds",[]);n.length&&(e.args.filter=app.utils.remote.mergeFilters({where:{id:{in:n}}},e.args.filter||{})),o()}),e.beforeRemote("count",function(e,t,o){const n=_.get(e,"req.authData.user.outbreakIds",[]);if(n.length){let t={where:_.get(e,"args.where",{})};t=app.utils.remote.mergeFilters({where:{id:{in:n}}},t||{}),e.args.where=t.where}o()}),e.prototype.findCaseRelationships=function(e,o,n){t.findPersonRelationships(e,o,n)},e.prototype.findContactRelationships=function(e,o,n){t.findPersonRelationships(e,o,n)},e.prototype.findEventRelationships=function(e,o,n){t.findPersonRelationships(e,o,n)},e.prototype.createCaseRelationship=function(e,o,n,s){app.models.case.findById(e).then(a=>{if(!a)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e});if(app.models.case.discardedCaseClassifications.includes(a.classification))throw app.utils.apiError.getError("INVALID_RELATIONSHIP_WITH_DISCARDED_CASE",{id:e});t.createPersonRelationship(this.id,e,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",o,n,s)}).catch(s)},e.prototype.createContactRelationship=function(e,o,n,s){app.models.contact.findById(e).then(a=>{if(!a)return s(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e}));t.createPersonRelationship(this.id,e,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",o,n,s)}).catch(s)},e.prototype.createEventRelationship=function(e,o,n,s){app.models.event.findById(e).then(a=>{if(!a)return s(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.event.modelName,id:e}));t.createPersonRelationship(this.id,e,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",o,n,s)}).catch(s)},e.prototype.getCaseRelationship=function(e,o,n,s){t.getPersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",n,s)},e.prototype.getContactRelationship=function(e,o,n,s){t.getPersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",n,s)},e.prototype.getEventRelationship=function(e,o,n,s){t.getPersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",n,s)},e.prototype.updateCaseRelationship=function(e,o,n,s,a){app.models.case.findById(e).then(r=>{if(!r)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e});if(app.models.case.discardedCaseClassifications.includes(r.classification))throw app.utils.apiError.getError("INVALID_RELATIONSHIP_WITH_DISCARDED_CASE",{id:e});t.updatePersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",n,s,a)}).catch(a)},e.prototype.updateContactRelationship=function(e,o,n,s,a){t.updatePersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",n,s,a)},e.prototype.updateEventRelationship=function(e,o,n,s,a){t.updatePersonRelationship(e,o,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT",n,s,a)},e.prototype.deleteCaseRelationship=function(e,o,n,s){t.deletePersonRelationship(e,o,n,s)},e.prototype.deleteContactRelationship=function(e,o,n,s){t.deletePersonRelationship(e,o,n,s)},e.prototype.deleteEventRelationship=function(e,o,n,s){t.deletePersonRelationship(e,o,n,s)},e.prototype.countCaseRelationships=function(e,o,n){app.models.case.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e}));t.countPersonRelationships(e,o,n)}).catch(n)},e.prototype.filteredCountCaseRelationships=function(e,o,n){app.models.case.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e}));t.filteredCountPersonRelationships(e,o,n)}).catch(n)},e.prototype.countContactRelationships=function(e,o,n){app.models.contact.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e}));t.countPersonRelationships(e,o,n)}).catch(n)},e.prototype.filteredCountContactRelationships=function(e,o,n){app.models.contact.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e}));t.filteredCountPersonRelationships(e,o,n)}).catch(n)},e.prototype.countEventRelationships=function(e,o,n){app.models.event.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.event.modelName,id:e}));t.countPersonRelationships(e,o,n)}).catch(n)},e.prototype.filteredCountEventRelationships=function(e,o,n){app.models.event.findById(e).then(s=>{if(!s)return n(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.event.modelName,id:e}));t.filteredCountPersonRelationships(e,o,n)}).catch(n)},e.prototype.convertContactToCase=function(e,t,o,n){let s,a=[];(t=t||{}).type="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t.dateBecomeCase=t.dateBecomeCase||app.utils.helpers.getDate().toDate(),t.wasContact=!0,t.classification=t.classification||"LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_SUSPECT";const r=app.models.contact.defaultScope;app.models.contact.defaultScope=function(){},app.models.contact.findOne({where:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",id:e}}).then(function(n){if(!n)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e});return n.updateAttributes(t,o)}).then(function(t){return s=t,app.models.relationship.find({where:{"persons.id":e}})}).then(function(t){return t.forEach(function(t){let n=[];t.persons.forEach(function(t){t.id===e&&(t.type="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"),n.push(t)}),a.push(t.updateAttributes({persons:n},o))}),Promise.all(a)}).then(function(){n(null,s)}).catch(n).finally(function(){app.models.contact.defaultScope=r})},e.prototype.convertCaseToContact=function(e,t,o){let n,s,a=[];const r=app.models.case.defaultScope;app.models.case.defaultScope=function(){},app.models.case.findOne({where:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",id:e}}).then(function(t){if(!t)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e});return s=t,app.models.relationship.count({and:[{"persons.id":e},{persons:{elemMatch:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",id:{$ne:e}}}}]})}).then(function(o){if(!o)throw app.utils.apiError.getError("INVALID_CASE_RELATIONSHIP",{id:e});return s.updateAttributes({dateBecomeContact:app.utils.helpers.getDate().toDate(),wasCase:!0,type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},t)}).then(function(t){return n=t,app.models.relationship.find({where:{"persons.id":e}})}).then(function(o){return o.forEach(function(o){let n=[];o.persons.forEach(function(t){t.id===e&&(t.type="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"),n.push(t)}),a.push(o.updateAttributes({persons:n},t))}),Promise.all(a)}).then(function(){o(null,n)}).catch(o).finally(function(){app.models.case.defaultScope=r})},e.prototype.getLocationsHierarchicalList=function(e,t){let o;if(Array.isArray(this.locationIds)&&this.locationIds.length&&(o=this.locationIds),!o)return app.controllers.location.getHierarchicalList(e,t);app.models.location.getSubLocations(o,[],function(o,n){if(o)return t(o);const s={};let a;n.forEach(function(e){s[e]=!0}),void 0!==(a=_.get(e,"where.includeChildren"))?delete e.where.includeChildren:a=!0;const r=app.utils.remote.mergeFilters({where:{id:{inq:n}}},e||{});return a&&_.set(r,"where.includeChildren",a),app.controllers.location.getHierarchicalList(r,function(e,o){if(e)return t(e);!function e(t){t.length&&t.forEach(function(t){s[t.location.id]||(t.location.disabled=!0,Array.isArray(t.children)&&e(t.children))})}(o),t(null,o)})})},e.prototype.restoreCase=function(e,t,o){app.models.case.findOne({deleted:!0,where:{id:e,deleted:!0}}).then(function(n){if(!n)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e});n.undoDelete(t,(t,n)=>{if(t)return o(t);const s=[];app.models.contact.find({deleted:!0,where:{deletedByParent:e,deleted:!0}}).then(e=>{(e||[]).forEach(e=>{s.push(function(e){return t=>{e.undoDelete({extraProps:{deletedByParent:null}},t)}}(e))}),async.parallelLimit(s,10,function(e){o(e,n)})}).catch(o)})}).catch(o)},e.prototype.restoreContact=function(e,t,o){app.models.contact.findOne({deleted:!0,where:{id:e,deleted:!0}}).then(function(n){if(!n)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e});n.undoDelete(t,o)}).catch(o)},e.prototype.restoreEvent=function(e,t,o){app.models.event.findOne({deleted:!0,where:{id:e,deleted:!0}}).then(function(n){if(!n)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.event.modelName,id:e});n.undoDelete(t,o)}).catch(o)},e.prototype.restoreContactFollowUp=function(e,t,o,n){app.models.followUp.findOne({deleted:!0,where:{id:t,personId:e,deleted:!0}}).then(function(e){if(!e)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.followUp.modelName,id:t});e.undoDelete(o,n)}).catch(n)},e.prototype.generateFollowups=function(e,t,o){let n="",s=[];this.frequencyOfFollowUp<=0&&s.push("frequencyOfFollowUp"),this.frequencyOfFollowUpPerDay<=0&&s.push("frequencyOfFollowUpPerDay"),s.length&&(n+=`Following outbreak params: [${Object.keys(s).join(",")}] should be greater than 0`);let a=genericHelpers.getDate(e.startDate),r=genericHelpers.getDateEndOfDay(e.endDate),i=[];if(a.isValid()||i.push("startDate"),r.isValid()||i.push("endDate"),i.length&&(n+=`Follow up: [${Object.keys(s).join(",")}] are not valid dates`),n)return o(app.utils.apiError.getError("INVALID_GENERATE_FOLLOWUP_PARAMS",{details:n}));let l=!0;e.hasOwnProperty("targeted")&&(l=e.targeted);let p=this.frequencyOfFollowUp,c=this.frequencyOfFollowUpPerDay,d=this.id;Promise.all([new Promise((e,t)=>{app.models.case.rawFind({outbreakId:d,classification:{$in:app.models.case.discardedCaseClassifications}},{projection:{_id:1}}).then(e=>(e=(e||[]).map(e=>e.id),app.models.relationship.rawFind({outbreakId:d,$or:[{"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.0.id":{$nin:e},"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.1.id":{$nin:e}}]},{projection:{persons:1}}))).then(e).catch(t)}),new Promise((e,t)=>{app.models.event.rawFind({outbreakId:d},{projection:{_id:1}}).then(e=>(e=(e||[]).map(e=>e.id),app.models.relationship.rawFind({outbreakId:d,$or:[{"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT","persons.0.id":{$in:e},"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT","persons.1.id":{$in:e}}]},{projection:{persons:1}}))).then(e).catch(t)})]).then(e=>{const t=(e[0]||[]).concat(e[1]||[]),o=Array.from(new Set(t.map(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.persons[0].type?e.persons[0].id:e.persons[1].id)));return o.length<1?[[],[]]:FollowupGeneration.getContactsEligibleForFollowup(a.toDate(),r.toDate(),d,o)}).then(e=>e.length?FollowupGeneration.getAllTeamsWithLocationsIncluded().then(o=>FollowupGeneration.getContactFollowups(a.toDate(),r.toDate(),e.map(e=>e.id)).then(n=>{const s=FollowupGeneration.dbOperationsQueue(t);return new PromisePool(e.map(e=>(e.followUpsList=n[e.id]||[],FollowupGeneration.getContactFollowupEligibleTeams(e,o).then(t=>{e.eligibleTeams=t}).then(()=>{let t=FollowupGeneration.generateFollowupsForContact(e,e.eligibleTeams,{startDate:a,endDate:r},p,c,l);s.enqueueForInsert(t.add),s.enqueueForRecreate(t.update)}))),100).start().then(()=>s.internalQueue.onIdle()).then(()=>s.settleRemaining()).then(()=>s.insertedCount())})):0).then(e=>o(null,{count:e})).catch(e=>o(e))},e.prototype.generateCaseVisualId=function(t,o,n){e.helpers.validateOrGetAvailableCaseVisualId(this,t,o).then(function(e){n(null,e)}).catch(n)},e.prototype.generateContactVisualId=function(t,o,n){e.helpers.validateOrGetAvailableContactVisualId(this,t,o).then(function(e){n(null,e)}).catch(n)},e.prototype.countNewContactsByExposure=function(e,o){let n;void 0!==(n=_.get(e,"where.noDaysNewContacts"))?delete e.where.noDaysNewContacts:n=this.noDaysNewContacts;let s=this.id,a={};t.getSystemAndOwnReferenceData(s,{where:{categoryId:"LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_TYPE"}}).then(function(t){t.forEach(function(e){a[e.value]={id:e.value,count:0,contactIDs:[]}});let o=new Date;return app.models.contact.find(app.utils.remote.mergeFilters({include:["relationships"],where:{outbreakId:s,dateOfReporting:{gte:o.setDate(o.getDate()-n)}}},e||{}))}).then(function(t){(t=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(t,e)).forEach(function(e){e.relationships.forEach(function(t){a[t.exposureTypeId]&&-1===a[t.exposureTypeId].contactIDs.indexOf(e.id)&&(a[t.exposureTypeId].count++,a[t.exposureTypeId].contactIDs.push(e.id))})});let n={newContactsCount:t.length,exposureType:Object.values(a)};o(null,n)}).catch(o)},e.prototype.preProcessTransmissionChainsFilter=function(e){e||(e={});const t=this.id,o=_.get(e,"where.includeContacts",!1);o&&delete e.where.includeContacts;const n=_.get(e,"where.countContacts",!1);n&&delete e.where.countContacts;let s=_.get(e,"where.active");void 0!==s&&delete e.where.active;let a=_.get(e,"where.size");void 0!==a&&delete e.where.size;let r=_.get(e,"where.person");r&&delete e.where.person;let i=_.get(e,"where.endDate");i?delete e.where.endDate:i=new Date;let l,p=_.get(e,"where.chainIncludesPerson");return p?(delete e.where.chainIncludesPerson,l=app.models.person.rawFind(p,{projection:{_id:1}}).then(function(e){p=e.map(e=>e.id)})):l=Promise.resolve(null),l.then(function(){if(r)return app.models.person.rawFind(app.utils.remote.convertLoopbackFilterToMongo({and:[{outbreakId:t},r]}),{projection:{_id:1}}).then(function(e){return e.map(e=>e.id)})}).then(function(t){return t&&(e=app.utils.remote.mergeFilters({where:{"persons.0.id":{inq:t},"persons.1.id":{inq:t}}},e)),t}).then(function(t){return o||n||(e=app.utils.remote.mergeFilters({where:{"persons.0.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},"persons.1.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]}}},e)),{filter:e,personIds:t,endDate:i,active:s,includedPeopleFilter:p,size:a,countContacts:n,includeContacts:o}})},e.prototype.postProcessTransmissionChains=function(e,t,o={}){const n={transmissionChains:{chains:[],length:0},nodes:{},edges:{}};let s=!1;const a={};t.transmissionChains.chains.forEach(function(t){let o=!0;null!=e.size&&(s=!0,o=o&&t.size===e.size),o&&null!=e.active&&(s=!0,o=o&&t.active===e.active);const r={};if(o&&t.chain.forEach(function(e){e.forEach(function(e){r[e]=!0})}),o&&null!=e.includedPeopleFilter){s=!0;const t=e.includedPeopleFilter.slice();let n=t.shift(),a=!1;for(;!a&&n;)r[n]&&(a=!0),n=t.shift();o=o&&a}o&&(n.transmissionChains.chains.push(t),Object.assign(a,r))}),n.transmissionChains.length=n.transmissionChains.chains.length;const r={};Object.keys(t.edges).forEach(function(e){const o=t.edges[e];(!s||a[o.persons[0].id]||a[o.persons[1].id])&&(n.edges[e]=o,r[o.persons[0].id]=!0,r[o.persons[1].id]=!0)});const i=o.includeContacts;return Object.keys(t.nodes).forEach(function(e){(i||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"!==t.nodes[e].type)&&r[e]&&(n.nodes[e]=t.nodes[e])}),n},e.prototype.countIndependentTransmissionChains=function(e,t){const o=this;this.preProcessTransmissionChainsFilter(e).then(function(n){e=n.filter;const s=n.personIds,a=n.endDate,r=n.includedPeopleFilter;_.set(e,"where.endDate",a),app.models.relationship.countTransmissionChains(o.id,o.periodOfFollowup,e,function(e,n){if(e)return t(e);if(r)delete n.isolatedNodes,delete n.nodes,t(null,n);else{const e=Object.keys(n.nodes),r=Object.keys(n.isolatedNodes).reduce(function(e,t){return n.isolatedNodes[t]&&e++,e},0);let i={outbreakId:o.id,or:[{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",classification:{nin:app.models.case.discardedCaseClassifications}},{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"}],id:{nin:e},dateOfReporting:{lte:a}};if(s){i=app.utils.remote.mergeFilters({where:{id:{inq:s}}},{where:i}).where}app.models.person.count(i).then(function(e){n.isolatedNodesCount=e+r,delete n.isolatedNodes,delete n.nodes,t(null,n)}).catch(t)}})})},e.prototype.getIndependentTransmissionChains=function(e,t){const o=this;this.preProcessTransmissionChainsFilter(e).then(function(n){e=n.filter;const s=n.personIds,a=n.endDate,r=n.active,i=n.includedPeopleFilter,l=n.size,p=n.includeContacts,c=n.countContacts;_.set(e,"where.endDate",a),app.models.relationship.getTransmissionChains(o.id,o.periodOfFollowup,e,c,function(e,n){if(e)return t(e);n=o.postProcessTransmissionChains({active:r,size:l,includedPeopleFilter:i},n,{includeContacts:p});const c=null==l&&!i;let d;if(c&&(d={where:{outbreakId:o.id,or:[{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",classification:{nin:app.models.case.discardedCaseClassifications}},{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"}],dateOfReporting:{lte:a}}},s&&(d=app.utils.remote.mergeFilters({where:{id:{inq:s}}},d))),void 0!==r){if(c){let e=o.periodOfFollowup,t=genericHelpers.getDate(a).subtract(e,"days");d=r?app.utils.remote.mergeFilters({where:{dateOfReporting:{gte:new Date(t)}}},d):app.utils.remote.mergeFilters({where:{dateOfReporting:{lt:new Date(t)}}},d)}}else c||t(null,n);c&&(d=app.utils.remote.mergeFilters({where:{id:{nin:Object.keys(n.nodes)}}},d),app.models.person.rawFind(app.utils.remote.convertLoopbackFilterToMongo(d.where)).then(function(e){e.forEach(function(e){n.nodes[e.id]=e}),t(null,n)}).catch(t))})})},e.afterRemote("prototype.getIndependentTransmissionChains",function(t,o,n){let s=e.helpers.getUsersPersonReadPermissions(t);Object.keys(o.nodes).forEach(t=>{e.helpers.limitPersonInformation(o.nodes[t],s),genericHelpers.covertAddressesGeoPointToLoopbackFormat(o.nodes[t])}),n()}),e.beforeRemote("prototype.__create__contacts__followUps",function(e,t,o){e.args.data.outbreakId=e.instance.id,o()}),e.beforeRemote("prototype.__create__cases__labResults",function(e,t,o){e.args.data.outbreakId=e.instance.id,o()}),e.beforeRemote("prototype.__create__contacts__labResults",function(e,t,o){e.args.data.outbreakId=e.instance.id,o()}),e.prototype.countContactsSeen=function(e,o){t.countContactsByFollowUpFilter({outbreakId:this.id,followUpFilter:app.models.followUp.seenFilter,resultProperty:"contactsSeenCount"},e,o)},e.prototype.countContactsLostToFollowup=function(e){let t=this.id;const o=_.get(e,"where.classification");o&&delete e.where.classification;let n=app.utils.remote.mergeFilters({where:{outbreakId:t,followUp:{neq:null},"followUp.status":"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_LOST_TO_FOLLOW_UP"}},e||{}),s=Promise.resolve();return o&&(s=s.then(()=>app.models.case.rawFind({outbreakId:this.id,deleted:{$ne:!0},classification:app.utils.remote.convertLoopbackFilterToMongo(o)},{projection:{_id:1}})).then(e=>{if(_.isEmpty(e))return[];const t=e.map(e=>e.id);return app.models.relationship.rawFind({outbreakId:this.id,deleted:{$ne:!0},$or:[{"persons.0.source":!0,"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.0.id":{$in:t}},{"persons.1.source":!0,"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.id":{$in:t}}]},{projection:{persons:1}})}).then(e=>{let t={};(e||[]).forEach(e=>{const o=e.persons[0].target?e.persons[0].id:e.persons[1].id;t[o]=!0}),t=Object.keys(t),n.where={$and:[n.where,{_id:{$in:t}}]}})),s.then(()=>app.models.contact.rawFind(n.where).then(function(e){return{contactsLostToFollowupCount:e.length,contactIDs:e.map(e=>e.id)}}))},e.prototype.countNewCasesInKnownTransmissionChains=function(e,t){let o=this.noDaysInChains;e&&e.where&&e.where.noDaysInChains&&(o=e.where.noDaysInChains,delete e.where.noDaysInChains);const n={newCases:0,total:0,caseIDs:[]},s={},a=new Date;a.setDate(a.getDate()-o),app.models.relationship.filterKnownTransmissionChains(this.id,e).then(function(e){e.forEach(function(e){Array.isArray(e.people)&&e.people.forEach(function(e){s[e.id]||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"!==e.type||(s[e.id]=!0,n.total++,new Date(e.dateOfReporting)>=a&&(n.newCases++,n.caseIDs.push(e.id)))})}),t(null,n)}).catch(t)},e.prototype.countNewCasesOutsideKnownTransmissionChains=function(e,t){const o=this;let n=this.noDaysInChains;e&&e.where&&e.where.noDaysInChains&&(n=e.where.noDaysInChains,delete e.where.noDaysInChains);const s={newCases:0,total:0,caseIDs:[]},a={},r=new Date;r.setDate(r.getDate()-n),app.models.relationship.filterKnownTransmissionChains(this.id,e).then(function(e){return e.forEach(function(e){Array.isArray(e.people)&&e.people.forEach(function(e){a[e.id]||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"!==e.type||(a[e.id]=!0)})}),app.models.case.rawFind({outbreakId:o.id,_id:{nin:Object.keys(a)},classification:{nin:app.models.case.discardedCaseClassifications}},{projection:{dateOfReporting:1}}).then(function(e){e.forEach(function(e){new Date(e.dateOfReporting)>=r&&(s.newCases++,s.caseIDs.push(e.id)),s.total++})})}).then(function(){t(null,s)}).catch(t)},e.prototype.countCasesWithLessThanXContacts=function(e,t){let o;void 0!==(o=_.get(e,"where.noLessContacts"))?delete e.where.noLessContacts:o=this.noLessContacts;let n=this.id;app.models.relationship.getCasesWithContacts(n,e).then(function(e){let n={cases:Object.values(e.cases)},s=Object.keys(e.cases),a=Object.values(e.cases);n.caseIDs=s.filter(t=>e.cases[t].contactsCount<o),n.cases=a.filter(e=>-1!==n.caseIDs.indexOf(e.id)),n.casesCount=n.caseIDs.length,t(null,n)}).catch(t)},e.prototype.countEventNewContacts=function(e,t){let o;void 0!==(o=_.get(e,"where.noDaysNewContacts"))?delete e.where.noDaysNewContacts:o=this.noDaysNewContacts;let n=new Date,s={newContactsCount:0,events:{}},a=this.id,r=app.utils.remote.mergeFilters({where:{outbreakId:a,and:[{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"}]},include:[{relation:"people",scope:{where:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",dateOfReporting:{gte:n.setDate(n.getDate()-o)}},filterParent:!0}}]},e||{});app.models.relationship.find(r).then(function(e){e=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(e,r);let t={},o={},n={};return e.forEach(function(e){let a=e.persons.findIndex(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"===e.type),r=e.persons[a].id,i=e.persons[a?0:1].id;t[r]||(t[r]={id:r,newContactsCount:0,contactIDs:[]},n[r]={}),n[r][i]||(n[r][i]=!0,t[r].newContactsCount++,t[r].contactIDs.push(i)),o[i]||(o[i]=!0,s.newContactsCount++)}),s.events=_.values(t),app.models.event.find({where:{outbreakId:a,id:{nin:Object.keys(n)}},fields:{id:!0}})}).then(function(e){let o=e.map(e=>({id:e.id,newContactsCount:0,contactIDs:[]}));s.events=s.events.concat(o),t(null,s)}).catch(t)},e.prototype.longPeriodsBetweenDatesOfOnsetInTransmissionChains=function(e,t){const o=this.longPeriodsBetweenCaseOnset,n=[];app.models.relationship.filterKnownTransmissionChains(this.id,app.utils.remote.mergeFilters({where:{"persons.0.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"]},"persons.1.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"]}},include:{relation:"people",scope:{where:{dateOfOnset:{neq:null}},filterParent:!0}}},e||{})).then(function(e){e.forEach(function(e){if(e.people[0].dateOfOnset&&e.people[1].dateOfOnset){const t=new Date(e.people[0].dateOfOnset),s=new Date(e.people[1].dateOfOnset),a=Math.ceil(Math.abs(t.getTime()-s.getTime())/864e5);a>o&&(e.differenceBetweenDatesOfOnset=a,n.push(e))}}),t(null,n)}).catch(t)},e.afterRemote("prototype.longPeriodsBetweenDatesOfOnsetInTransmissionChains",function(t,o,n){let s=e.helpers.getUsersPersonReadPermissions(t);o.forEach(t=>{t.people.forEach(t=>{e.helpers.limitPersonInformation(t,s)})}),n()}),e.prototype.buildNewChainsFromRegisteredContactsWhoBecameCases=function(t,o){e.helpers.buildOrCountNewChainsFromRegisteredContactsWhoBecameCases(this,t,!1,o)},e.afterRemote("prototype.buildNewChainsFromRegisteredContactsWhoBecameCases",function(t,o,n){let s=e.helpers.getUsersPersonReadPermissions(t);Object.keys(o.nodes).forEach(t=>{e.helpers.limitPersonInformation(o.nodes[t],s)}),n()}),e.prototype.countNewChainsFromRegisteredContactsWhoBecameCases=function(t,o){e.helpers.buildOrCountNewChainsFromRegisteredContactsWhoBecameCases(this,t,!0,function(e,t){if(e)return o(e);delete t.nodes,t.isolatedNodesCount=Object.keys(t.isolatedNodes).reduce(function(e,o){return t.isolatedNodes[o]&&e++,e},0),delete t.isolatedNodes,o(null,t)})},e.prototype.countCasesContacts=function(e,t){let o=this.id;app.models.relationship.getCasesWithContacts(o,e).then(function(e){let o={casesCount:e.casesCount,contactsCount:e.contactsCount,cases:Object.values(e.cases)},n=o.cases.map(e=>e.contactsCount).sort((e,t)=>e-t),s=n.length;o.meanNoContactsPerCase=parseFloat((n.reduce((e,t)=>e+t,0)/s).toFixed(1)),o.medianNoContactsPerCase=s%2==0?(n[s/2-1]+n[s/2])/2:n[Math.floor(s/2)],t(null,o)}).catch(t)},e.prototype.countFollowUpContacts=function(e,t){app.models.followUp.countContacts(this.id,e).then(function(e){t(null,e)}).catch(t)},e.prototype.findSecondaryCasesWithDateOfOnsetBeforePrimaryCase=function(e,t){const o=[];app.models.relationship.filterKnownTransmissionChains(this.id,app.utils.remote.mergeFilters({where:{"persons.0.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"]},"persons.1.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"]}},include:{relation:"people",scope:{where:{dateOfOnset:{neq:null}},filterParent:!0}}},e||{})).then(function(e){e.forEach(function(e){if(e.people[0].dateOfOnset&&e.people[1].dateOfOnset){const t=e.persons.findIndex(e=>e.source),n=e.people.findIndex(o=>o.id===e.persons[t].id),s=e.people[n],a=e.people[n?0:1];if(new Date(a.dateOfOnset)<new Date(s.dateOfOnset)){const t={primaryCase:s,secondaryCase:a,relationship:Object.assign({},e)};delete t.relationship.people,o.push(t)}}}),t(null,o)}).catch(t)},e.afterRemote("prototype.findSecondaryCasesWithDateOfOnsetBeforePrimaryCase",function(t,o,n){let s=e.helpers.getUsersPersonReadPermissions(t);o.forEach(t=>{e.helpers.limitPersonInformation(t.primaryCase,s),e.helpers.limitPersonInformation(t.secondaryCase,s)}),n()}),e.prototype.countNewCasesInThePreviousXDaysDetectedAmongKnownContacts=function(e,t){let o;void 0!==(o=_.get(e,"where.noDaysAmongContacts"))?delete e.where.noDaysAmongContacts:o=this.noDaysAmongContacts;let n=new Date,s=new Date((new Date).setHours(0,0,0,0));s.setDate(n.getDate()-o);let a=this.id;app.models.case.rawFind(app.utils.remote.mergeFilters({where:{outbreakId:a,or:[{dateOfReporting:{gte:s}},{dateBecomeCase:{gte:s}}]}},e||{}).where).then(function(e){let o={newCasesCount:e.length,newCasesAmongKnownContactsCount:0,newCasesAmongKnownContactsIDs:[]};o.newCasesAmongKnownContactsIDs=e.filter(e=>new Date(e.dateBecomeCase)>=s).map(e=>e.id),o.newCasesAmongKnownContactsCount=o.newCasesAmongKnownContactsIDs.length,t(null,o)}).catch(t)},e.prototype.countContactsNotSeenInXDays=function(e,t){let o;e=e||{},void 0!==(o=_.get(e,"where.noDaysNotSeen"))?delete e.where.noDaysNotSeen:o=this.noDaysNotSeen;const n=_.get(e,"where.classification");n&&delete e.where.classification;let s=this.id,a=genericHelpers.getDate(),r=a.clone().subtract(o,"day"),i=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(e).contact,l=Promise.resolve();n&&(l=l.then(()=>app.models.case.rawFind({outbreakId:s,deleted:{$ne:!0},classification:app.utils.remote.convertLoopbackFilterToMongo(n)},{projection:{_id:1}})).then(e=>{if(_.isEmpty(e))return[];const t=e.map(e=>e.id);return app.models.relationship.rawFind({outbreakId:this.id,deleted:{$ne:!0},$or:[{"persons.0.source":!0,"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.0.id":{$in:t}},{"persons.1.source":!0,"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.id":{$in:t}}]},{projection:{persons:1}})}).then(e=>{let t={};(e||[]).forEach(e=>{const o=e.persons[0].target?e.persons[0].id:e.persons[1].id;t[o]=!0}),t=Object.keys(t),i=i?{and:[i,{id:{inq:t}}]}:{id:{inq:t}}})),(l=l.then(()=>{if(i)return app.models.contact.rawFind({and:[{outbreakId:s},i]}).then(function(e){return e.map(e=>e.id)})})).then(function(n){let i={where:{and:[{outbreakId:s},{date:{between:[r,a]}},app.models.followUp.notSeenFilter]}};return n&&i.where.and.push({personId:{inq:n}}),app.models.followUp.rawFind(app.utils.remote.mergeFilters(i,e||{}).where,{order:{date:1}}).then(e=>{const n=[],s=_.groupBy(e,e=>e.personId);for(let e in s){[...new Set(s[e].map(e=>e.index))].length===o&&n.push(e)}return t(null,{contactsCount:n.length,contactIDs:n})})}).catch(t)},e.prototype.countContactsWithSuccessfulFollowups=function(e,t){e=e||{};const o=app.models.followUp;let n={totalContactsWithFollowupsCount:0,contactsWithSuccessfulFollowupsCount:0,teams:[],contacts:[]},s=this.id;const a=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(e);let r=a.contact;const i=a.case;let l=Promise.resolve();i&&(l=l.then(()=>app.models.case.rawFind({and:[i,{outbreakId:s,deleted:{$ne:!0}}]},{projection:{_id:1}})).then(e=>{if(_.isEmpty(e))return[];const t=e.map(e=>e.id);return app.models.relationship.rawFind({outbreakId:s,deleted:{$ne:!0},$or:[{"persons.0.source":!0,"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.0.id":{$in:t}},{"persons.1.source":!0,"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.id":{$in:t}}]},{projection:{persons:1}})}).then(e=>{let t={};(e||[]).forEach(e=>{const o=e.persons[0].target?e.persons[0].id:e.persons[1].id;t[o]=!0}),t=Object.keys(t),r=r?{and:[r,{id:{inq:t}}]}:{id:{inq:t}}})),(l=l.then(()=>{if(r)return app.models.contact.rawFind({and:[r,{outbreakId:s}]},{projection:{_id:1}}).then(function(e){return e.map(e=>e.id)})})).then(function(a){let r={where:{outbreakId:s}};return a&&(r.where.personId={inq:a}),o.rawFind(app.utils.remote.mergeFilters(r,e||{}).where).then(function(s){s=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(s,e);let a={},r={},i={};s.forEach(function(e){let t=e.personId,s=e.teamId||null;i[t]?i[t].teams[s]?i[t].teams[s].performed||!0!==o.isPerformed(e)||(i[t].teams[s].performed=!0,a[s].contactsWithSuccessfulFollowupsCount++,a[s].followedUpContactsIDs.push(t),a[s].missedContactsIDs.splice(a[s].missedContactsIDs.indexOf(t),1)):(i[t].teams[s]={performed:o.isPerformed(e)},a[s]||(a[s]={id:s,totalContactsWithFollowupsCount:0,contactsWithSuccessfulFollowupsCount:0,followedUpContactsIDs:[],missedContactsIDs:[]}),a[s].totalContactsWithFollowupsCount++,o.isPerformed(e)?(a[s].contactsWithSuccessfulFollowupsCount++,a[s].followedUpContactsIDs.push(t)):a[s].missedContactsIDs.push(t)):(r[t]={id:t,totalFollowupsCount:0,successfulFollowupsCount:0},i[t]={teams:{[s]:{performed:o.isPerformed(e)}},performed:o.isPerformed(e)},n.totalContactsWithFollowupsCount++,a[s]||(a[s]={id:s,totalContactsWithFollowupsCount:0,contactsWithSuccessfulFollowupsCount:0,followedUpContactsIDs:[],missedContactsIDs:[]}),a[s].totalContactsWithFollowupsCount++,o.isPerformed(e)?(a[s].contactsWithSuccessfulFollowupsCount++,a[s].followedUpContactsIDs.push(t),n.contactsWithSuccessfulFollowupsCount++):a[s].missedContactsIDs.push(t)),r[t].totalFollowupsCount++,o.isPerformed(e)&&(r[t].successfulFollowupsCount++,i[t].performed||(i[t].performed=!0,n.contactsWithSuccessfulFollowupsCount++))}),n.teams=Object.values(a),n.contacts=Object.values(r),t(null,n)})}).catch(t)},e.prototype.countFollowUpsPerTeamPerDay=function(e,t){let o={totalFollowupsCount:0,successfulFollowupsCount:0,teams:[]},n={where:{outbreakId:this.id},order:"date ASC"};if(!e||!e.where||-1===JSON.stringify(e.where).indexOf("date")){let e=genericHelpers.getDate().toString(),t=genericHelpers.getDateEndOfDay().toString();n.where.date={between:[e,t]}}let s={};app.models.team.find().then(function(t){return t.forEach(e=>{s[e.id]=e}),app.models.followUp.find(app.utils.remote.mergeFilters(n,e||{}))}).then(function(n){n=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(n,e);let a={},r={};n.forEach(function(e){const t=e.personId;let n;n=e.teamId&&s[e.teamId]?e.teamId:null;const i=genericHelpers.getDate(e.date).toString();a[n]||(a[n]={id:n,totalFollowupsCount:0,successfulFollowupsCount:0,dates:{}},r[n]={}),a[n].dates[i]||(a[n].dates[i]={date:i,totalFollowupsCount:0,successfulFollowupsCount:0,contactIDs:[]},r[n][i]={}),a[n].dates[i].totalFollowupsCount++,a[n].totalFollowupsCount++,app.models.followUp.isPerformed(e)&&(a[n].dates[i].successfulFollowupsCount++,a[n].successfulFollowupsCount++,o.successfulFollowupsCount++),r[n][i][t]||(r[n][i][t]=!0,a[n].dates[i].contactIDs.push(t))}),o.totalFollowupsCount=n.length,o.teams=_.map(a,e=>(e.dates=Object.values(e.dates),e)),t(null,o)}).catch(t)},e.prototype.countCasesPerPeriod=function(e,t){let o,n,s,a,r={day:"day",week:"week",month:"month"};void 0!==(o=_.get(e,"where.periodType"))&&delete e.where.periodType,-1===Object.values(r).indexOf(o)&&(o=r.day),void 0!==(n=_.get(e,"where.periodInterval"))?(delete e.where.periodInterval,n[0]=genericHelpers.getDate(n[0]),n[1]=genericHelpers.getDateEndOfDay(n[1])):n=genericHelpers.getPeriodIntervalForDate(void 0,o),void 0!==(s=_.get(e,"where.includeTotals"))?delete e.where.includeTotals:s=!1,void 0!==(a=_.get(e,"where.includeDeaths"))?delete e.where.includeDeaths:a=!1;let i=this.id,l={totalCasesForIntervalCount:0,totalCasesClassificationCountersForInterval:{},totalCasesCountersForIntervalPerLocation:{locations:[]},caseIDsForInterval:[],period:[]},p={where:{outbreakId:i},order:"dateOfReporting ASC"};s?Object.assign(l,{totalCasesCount:0,totalCasesClassificationCounters:{},totalCasesCountersPerLocation:{locations:[]},caseIDs:[]}):p=app.utils.remote.mergeFilters({where:{or:[{and:[{dateOfReporting:{between:n.slice()},dateBecomeCase:{eq:null}}]},{dateBecomeCase:{between:n.slice()}}]}},p),a?(Object.assign(l,{totalDeadCasesForIntervalCount:0,totalDeadConfirmedCasesForIntervalCount:0,deadCaseIDsForInterval:[],deadConfirmedCaseIDsForInterval:[]}),s&&Object.assign(l,{totalDeadCasesCount:0,totalDeadConfirmedCasesCount:0,deadCaseIDs:[],deadConfirmedCaseIDs:[]})):p=app.utils.remote.mergeFilters({where:{outcomeId:{neq:"LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"}}},p),app.models.case.find(app.utils.remote.mergeFilters(p,e||{})).then(function(e){let r=genericHelpers.getChunksForInterval(n,o);Object.keys(r).forEach(function(e){Object.assign(r[e],{totalCasesCount:0,classificationCounters:{},countersPerLocation:{locations:[]},caseIDs:[]}),a&&Object.assign(r[e],{totalDeadCasesCount:0,totalDeadConfirmedCasesCount:0,deadCaseIDs:[],deadConfirmedCaseIDs:[]})}),e.forEach(function(e){let t=e.dateBecomeCase||e.dateOfReporting;e.addresses=e.addresses||[];let i=e.addresses.find(e=>"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId),p=i&&i.locationId?i.locationId:null,c="LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_CONFIRMED"===e.classification;if(!s||n[0].isSameOrBefore(t)&&n[1].isSameOrAfter(t)){let t=genericHelpers.getPeriodIntervalForDate(n,o).join(" - "),s=r[t].countersPerLocation.locations.findIndex(e=>e.id===p);-1===s&&(s=r[t].countersPerLocation.locations.push(Object.assign({id:p,totalCasesCount:0,caseIDs:[]},a?{totalDeadCasesCount:0,totalDeadConfirmedCasesCount:0,deadCaseIDs:[],deadConfirmedCaseIDs:[]}:{}))-1);let i=l.totalCasesCountersForIntervalPerLocation.locations.findIndex(e=>e.id===p);if(-1===i&&(i=l.totalCasesCountersForIntervalPerLocation.locations.push(Object.assign({id:p,totalCasesCount:0,caseIDs:[]},a?{totalDeadCasesCount:0,totalDeadConfirmedCasesCount:0,deadCaseIDs:[],deadConfirmedCaseIDs:[]}:{}))-1),"LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"!==e.outcomeId){r[t].classificationCounters[e.classification]||(r[t].classificationCounters[e.classification]={count:0,caseIDs:[],locations:[]}),r[t].classificationCounters[e.classification].count++,r[t].classificationCounters[e.classification].caseIDs.push(e.id);let o=r[t].classificationCounters[e.classification].locations.findIndex(e=>e.id===p);-1===o&&(o=r[t].classificationCounters[e.classification].locations.push({id:p,totalCasesCount:0,caseIDs:[]})-1),r[t].classificationCounters[e.classification].locations[o].totalCasesCount++,r[t].classificationCounters[e.classification].locations[o].caseIDs.push(e.id),r[t].totalCasesCount++,r[t].caseIDs.push(e.id),r[t].countersPerLocation.locations[s].totalCasesCount++,r[t].countersPerLocation.locations[s].caseIDs.push(e.id),l.totalCasesClassificationCountersForInterval[e.classification]||(l.totalCasesClassificationCountersForInterval[e.classification]={count:0,caseIDs:[],locations:[]}),l.totalCasesClassificationCountersForInterval[e.classification].count++,l.totalCasesClassificationCountersForInterval[e.classification].caseIDs.push(e.id);let n=l.totalCasesClassificationCountersForInterval[e.classification].locations.findIndex(e=>e.id===p);-1===n&&(n=l.totalCasesClassificationCountersForInterval[e.classification].locations.push({id:p,totalCasesCount:0,caseIDs:[]})-1),l.totalCasesClassificationCountersForInterval[e.classification].locations[n].totalCasesCount++,l.totalCasesClassificationCountersForInterval[e.classification].locations[n].caseIDs.push(e.id),l.totalCasesForIntervalCount++,l.caseIDsForInterval.push(e.id),l.totalCasesCountersForIntervalPerLocation.locations[i].totalCasesCount++,l.totalCasesCountersForIntervalPerLocation.locations[i].caseIDs.push(e.id)}else c&&(r[t].totalDeadConfirmedCasesCount++,r[t].deadConfirmedCaseIDs.push(e.id),r[t].countersPerLocation.locations[s].totalDeadConfirmedCasesCount++,r[t].countersPerLocation.locations[s].deadConfirmedCaseIDs.push(e.id),l.totalDeadConfirmedCasesForIntervalCount++,l.deadConfirmedCaseIDsForInterval.push(e.id),l.totalCasesCountersForIntervalPerLocation.locations[i].totalDeadConfirmedCasesCount++,l.totalCasesCountersForIntervalPerLocation.locations[i].deadConfirmedCaseIDs.push(e.id)),r[t].totalDeadCasesCount++,r[t].deadCaseIDs.push(e.id),r[t].countersPerLocation.locations[s].totalDeadCasesCount++,r[t].countersPerLocation.locations[s].deadCaseIDs.push(e.id),l.totalDeadCasesForIntervalCount++,l.deadCaseIDsForInterval.push(e.id),l.totalCasesCountersForIntervalPerLocation.locations[i].totalDeadCasesCount++,l.totalCasesCountersForIntervalPerLocation.locations[i].deadCaseIDs.push(e.id)}if(s){let t=l.totalCasesCountersPerLocation.locations.findIndex(e=>e.id===p);if(-1===t&&(t=l.totalCasesCountersPerLocation.locations.push(Object.assign({id:p,totalCasesCount:0,caseIDs:[]},a?{totalDeadCasesCount:0,totalDeadConfirmedCasesCount:0,deadCaseIDs:[],deadConfirmedCaseIDs:[]}:{}))-1),"LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"!==e.outcomeId){l.totalCasesClassificationCounters[e.classification]||(l.totalCasesClassificationCounters[e.classification]={count:0,caseIDs:[],locations:[]}),l.totalCasesClassificationCounters[e.classification].count++,l.totalCasesClassificationCounters[e.classification].caseIDs.push(e.id);let o=l.totalCasesClassificationCounters[e.classification].locations.findIndex(e=>e.id===p);-1===o&&(o=l.totalCasesClassificationCounters[e.classification].locations.push({id:p,totalCasesCount:0,caseIDs:[]})-1),l.totalCasesClassificationCounters[e.classification].locations[o].totalCasesCount++,l.totalCasesClassificationCounters[e.classification].locations[o].caseIDs.push(e.id),l.totalCasesCount++,l.caseIDs.push(e.id),l.totalCasesCountersPerLocation.locations[t].totalCasesCount++,l.totalCasesCountersPerLocation.locations[t].caseIDs.push(e.id)}else c&&(l.totalDeadConfirmedCasesCount++,l.deadConfirmedCaseIDs.push(e.id),l.totalCasesCountersPerLocation.locations[t].totalDeadConfirmedCasesCount++,l.totalCasesCountersPerLocation.locations[t].deadConfirmedCaseIDs.push(e.id)),l.totalDeadCasesCount++,l.deadCaseIDs.push(e.id),l.totalCasesCountersPerLocation.locations[t].totalDeadCasesCount++,l.totalCasesCountersPerLocation.locations[t].deadCaseIDs.push(e.id)}}),l.period=Object.values(r),t(null,l)}).catch(t)},e.prototype.mergePeople=function(e,t,o){t||(t={}),t._sync=!0,t._disableVisualIdValidation=!0,(e=e||{}).ids=e.ids||[],e.type=e.type||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",e.model=e.model||{};const n=app.models,s=n.person.typeToModelMap[e.type],a=this.id,r=function(e){return delete(e=e||{}).id,delete e.createdAt,delete e.createdBy,delete e.updatedAt,delete e.updatedBy,delete e.deletedAt,e},i=n[s];let l=[];s===n.case.modelName&&l.push("labResults"),s===n.contact.modelName&&l.push("followUps"),i.find({where:{id:{inq:e.ids}},include:l}).then(e=>Promise.all(e.map(e=>(function(e){return app.models.relationship.find({where:{"persons.id":e}})})(e.id).then(t=>(e.relationships=t,e))))).then(l=>{let p=Uuid.v4(),c=this.frequencyOfFollowUpPerDay,d=e.ids,u=[];l.forEach(t=>{t.relationships.forEach(t=>{let o=t.persons,n=d.indexOf(o[0].id),s=d.indexOf(o[1].id);if(-1!==n&&-1!==s)return;n=-1===n?o[0].id:p,s=-1===s?o[1].id:p;let a=t.toJSON();a.persons=[{id:n,type:n===p?e.type:o[0].type,source:o[0].source,target:o[0].target},{id:s,type:s===p?e.type:o[1].type,source:o[1].source,target:o[1].target}];let i=a.persons.find(e=>e.source),l=a.persons.find(e=>e.target);u.find(e=>{let t=e.persons.find(e=>e.source),o=e.persons.find(e=>e.target);return i&&l&&t&&o&&i.id===t.id&&l.id===o.id})||(a=r(a),u.push(a))})});let f=[],h=genericHelpers.getDate();if(s===n.contact.modelName){let e=[];l.forEach(t=>{let o=t.followUps();if(o.length){let t=o.map(e=>(e.date=genericHelpers.getDate(e.date).toDate().toISOString(),e));e=e.concat(t)}});let t=_.groupBy(e,e=>e.date);for(let e in t)if(t.hasOwnProperty(e)){if(genericHelpers.getDate(e).isAfter(h)){t[e]=t[e].sort((e,t)=>new Date(t.createdAt)-new Date(e.createdAt));let o=t[e].length-c;if(o>0)for(let n=0;n<o;n++)t[e].pop()}f=f.concat(t[e].map(e=>{let t=e.toJSON();return t.personId=p,t=r(t)}))}}let E=[];s===n.case.modelName&&l.forEach(e=>{e.labResults().length&&(E=E.concat(e.labResults().map(e=>{let t=e.toJSON();return t.personId=p,t=r(t)})))}),e.model=Object.assign({},e.model,{id:p,outbreakId:a}),Promise.all(d.map(e=>i.destroyById(e,t))).then(()=>i.create(e.model,t)).then(()=>Promise.all([Promise.all(u.map(e=>n.relationship.create(e,t))),Promise.all(E.map(e=>n.labResult.create(e,t))),Promise.all(f.map(e=>n.followUp.create(e,t)))])).then(()=>i.findById(p).then(e=>o(null,e))).catch(e=>{i.findById(p).then(e=>{if(e)return e.destroy(t)}).then(()=>Promise.all(l.map(e=>e.undoDelete(t))).then(()=>o(e)))})})},e.prototype.listLatestFollowUpsForContactsIfNotPerformed=function(e,t,o){let n=this.id;searchByRelationProperty.deletePaginationFilterFromContext(t.remotingContext),app.models.followUp.find(app.utils.remote.mergeFilters({where:{outbreakId:n},fields:["id","personId","statusId"],order:"date ASC"},e||{})).then(function(t){t=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(t,e);let s={};return t.forEach(function(e){let t=e.personId;"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_PERFORMED"!==e.statusId||s[e.personId]||(s[t]=e.id)}),(e=e||{}).skip=_.get(e,"_deep.skip",0),e.limit=_.get(e,"_deep.limit"),app.models.followUp.find(app.utils.remote.mergeFilters({where:{id:{inq:Object.values(s)},outbreakId:n}},e)).then(function(e){o(null,e)})}).catch(o)},e.prototype.filteredCountLatestFollowUpsForContactsIfNotPerformed=function(e,t){this.listLatestFollowUpsForContactsIfNotPerformed(e,{},function(e,o){if(e)return t(e);t(null,o.length)})},e.beforeRemote("**",function(e,t,o){if(!e.args.filter)return o();genericHelpers.convertPropsToDate(e.args.filter),genericHelpers.includeSubLocationsInLocationFilter(app,e.args.filter,o)}),e.prototype.listInconsistenciesInKeyDates=function(e,t){let o=this.id;app.models.person.rawFind(app.utils.remote.mergeFilters({where:{outbreakId:o,or:[{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",dob:{neq:null},or:[{$where:"this.dateOfInfection < this.dob"},{$where:"this.dateOfOnset < this.dob"},{$where:"this.dateBecomeCase < this.dob"},{$where:"this.dateOfOutcome < this.dob"}]},{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",or:[{$where:"this.dateOfInfection > this.dateOfOnset"},{$where:"this.dateOfInfection > this.dateBecomeCase"},{$where:"this.dateOfInfection > this.dateOfOutcome"},{$where:"this.dateOfOnset > this.dateBecomeCase"},{$where:"this.dateOfOnset > this.dateOfOutcome"},{$where:"this.dateBecomeCase > this.dateOfOutcome"}]},{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",$where:"function () {\n              // initialize check result\n              var inconsistencyInKeyDates = false;\n              // get date of birth\n              var dob = this.dob;\n\n              // loop through the dateRanges and make comparisons\n              var datesContainers = ['dateRanges'];\n              for (var i = 0; i < datesContainers.length; i++) {\n                // check if the datesContainer exists on the model\n                var datesContainer = datesContainers[i];\n                if (this[datesContainer] && this[datesContainer].length) {\n                  // loop through the dates; comparison stops at first successful check\n                  for (var j = 0; j < this[datesContainer].length; j++) {\n                    var dateEntry = this[datesContainer][j];\n\n                    // make sure we have both dates when we compare them\n                    if (dateEntry.startDate && dateEntry.endDate) {\n                      // compare startDate with endDate\n                      inconsistencyInKeyDates = dateEntry.startDate > dateEntry.endDate ? true : false;\n                    }\n\n                    // check for dob; both startDate and endDate must be after dob\n                    if (!inconsistencyInKeyDates && dob) {\n                      if (dateEntry.startDate) {\n                        inconsistencyInKeyDates = dateEntry.startDate < dob ? true : false;\n                      }\n                      if (dateEntry.endDate) {\n                        inconsistencyInKeyDates = inconsistencyInKeyDates || (dateEntry.endDate < dob ? true : false);\n                      }\n                    }\n\n                    // stop checks if an inconsistency was found\n                    if (inconsistencyInKeyDates) {\n                      break;\n                    }\n                  }\n                }\n\n                // stop checks if an inconsistency was found\n                if (inconsistencyInKeyDates) {\n                  break;\n                }\n              }\n\n              return inconsistencyInKeyDates;\n            }"}]}},e||{}).where).then(function(e){let o=app.models.case.fieldLabelsMap,n=">";e.forEach(function(t,s){let a=[],r=t.dob?moment(t.dob):null,i=t.dateOfInfection?moment(t.dateOfInfection):null,l=t.dateOfOnset?moment(t.dateOfOnset):null,p=t.dateBecomeCase?moment(t.dateBecomeCase):null,c=t.dateOfOutcome?moment(t.dateOfOutcome):null;if("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===t.type){r&&(i&&r.isAfter(i)&&a.push({dates:[{field:"dob",label:o.dob},{field:"dateOfInfection",label:o.dateOfInfection}],issue:n}),l&&r.isAfter(l)&&a.push({dates:[{field:"dob",label:o.dob},{field:"dateOfOnset",label:o.dateOfOnset}],issue:n}),p&&r.isAfter(p)&&a.push({dates:[{field:"dob",label:o.dob},{field:"dateBecomeCase",label:o.dateBecomeCase}],issue:n}),c&&r.isAfter(c)&&a.push({dates:[{field:"dob",label:o.dob},{field:"dateOfOutcome",label:o.dateOfOutcome}],issue:n})),i&&l&&i.isAfter(l)&&a.push({dates:[{field:"dateOfInfection",label:o.dateOfInfection},{field:"dateOfOnset",label:o.dateOfOnset}],issue:n}),i&&p&&i.isAfter(p)&&a.push({dates:[{field:"dateOfInfection",label:o.dateOfInfection},{field:"dateBecomeCase",label:o.dateBecomeCase}],issue:n}),i&&c&&i.isAfter(c)&&a.push({dates:[{field:"dateOfInfection",label:o.dateOfInfection},{field:"dateOfOutcome",label:o.dateOfOutcome}],issue:n}),l&&p&&l.isAfter(p)&&a.push({dates:[{field:"dateOfOnset",label:o.dateOfOnset},{field:"dateBecomeCase",label:o.dateBecomeCase}],issue:n}),l&&c&&l.isAfter(c)&&a.push({dates:[{field:"dateOfOnset",label:o.dateOfOnset},{field:"dateOfOutcome",label:o.dateOfOutcome}],issue:n}),p&&c&&p.isAfter(c)&&a.push({dates:[{field:"dateBecomeCase",label:o.dateBecomeCase},{field:"dateOfOutcome",label:o.dateOfOutcome}],issue:n});["dateRanges"].forEach(function(e){t[e]&&t[e].length&&t[e].forEach(function(t,s){let i=t.startDate?moment(t.startDate):null,l=t.endDate?moment(t.endDate):null;i&&l&&i.isAfter(l)&&a.push({dates:[{field:`${e}.${s}.startDate`,label:o[`${e}[].startDate`],dateRangeType:t.typeId},{field:`${e}.${s}.endDate`,label:o[`${e}[].endDate`],dateRangeType:t.typeId}],issue:n}),r&&(i&&r.isAfter(i)&&a.push({dates:[{field:"dob",label:o.dob},{field:`${e}.${s}.startDate`,label:o[`${e}[].startDate`],dateRangeType:t.typeId}],issue:n}),l&&r.isAfter(l)&&a.push({dates:[{field:"dob",label:o.dob},{field:`${e}.${s}.endDate`,label:o[`${e}[].endDate`],dateRangeType:t.typeId}],issue:n}))})})}e[s].inconsistencies=a}),t(null,e)}).catch(t)},e.prototype.importableFileUpload=function(e,t,o,n,s,a){app.controllers.importableFile.upload(e,t,o,n,s,this.id,a)},e.prototype.getImportableFileJsonById=function(e,t){app.controllers.importableFile.getJsonById(e,t)},e.prototype.importImportableLabResultsFileUsingMap=function(e,t,o){const n=this;t._sync=!1,app.models.importableFile.getTemporaryFileById(e.fileId,function(s,a){if(s)return o(s);try{const r=JSON.parse(a),i=app.utils.helpers.convertBooleanProperties(app.models.labResult,app.utils.helpers.remapProperties(r,e.map,e.valuesMap)),l=[],p=[];p.toString=function(){return JSON.stringify(this)},i.forEach(function(e,o){l.push(function(s){e.questionnaireAnswers&&(e.questionnaireAnswers=genericHelpers.convertQuestionnaireAnswersToNewFormat(e.questionnaireAnswers)),app.models.case.findOne({where:{or:[{id:e.personId},{visualId:e.personId}],outbreakId:n.id}}).then(function(o){if(!o)throw app.utils.apiError.getError("PERSON_NOT_FOUND",{model:app.models.case.modelName,id:e.personId});return e.personId=o.id,e.outbreakId=n.id,app.utils.dbSync.syncRecord(t.remotingContext.req.logger,app.models.labResult,e,t).then(function(e){s(null,e.record)})}).catch(function(t){p.push({message:`Failed to import lab result ${o+1}`,error:t,recordNo:o+1,data:{file:r[o],save:e}}),s(null,null)})})}),async.parallelLimit(l,10,function(e,t){return e?o(e):p.length?((t=t.filter(e=>null!==e)).toString=function(){return JSON.stringify(this)},o(app.utils.apiError.getError("IMPORT_PARTIAL_SUCCESS",{model:app.models.labResult.modelName,failed:p,success:t}))):void o(null,t)})}catch(s){o(app.utils.apiError.getError("INVALID_CONTENT_OF_TYPE",{contentType:"JSON",details:s.message}))}})},e.prototype.importImportableCasesFileUsingMap=function(e,t,o){const n=this;t._sync=!1,app.models.importableFile.getTemporaryFileById(e.fileId,function(s,a){if(s)return o(s);try{const r=JSON.parse(a),i=app.utils.helpers.convertBooleanProperties(app.models.case,app.utils.helpers.remapProperties(r,e.map,e.valuesMap)),l=[],p=[];p.toString=function(){return JSON.stringify(this)},i.forEach(function(e,o){l.push(function(s){e.outbreakId=n.id;const a=app.models.person.sanitizeAddresses(e);return a&&(e.addresses=a),e.questionnaireAnswers&&(e.questionnaireAnswers=genericHelpers.convertQuestionnairePropsToDate(e.questionnaireAnswers)),e.visualId&&(e.visualId=app.models.person.sanitizeVisualId(e.visualId)),app.utils.dbSync.syncRecord(t.remotingContext.req.logger,app.models.case,e,t).then(function(e){s(null,e.record)}).catch(function(t){p.push({message:`Failed to import case ${o+1}`,error:t,recordNo:o+1,data:{file:r[o],save:e}}),s(null,null)})})}),async.series(l,function(e,t){return e?o(e):p.length?((t=t.filter(e=>null!==e)).toString=function(){return JSON.stringify(this)},o(app.utils.apiError.getError("IMPORT_PARTIAL_SUCCESS",{model:app.models.case.modelName,failed:p,success:t}))):void o(null,t)})}catch(s){o(app.utils.apiError.getError("INVALID_CONTENT_OF_TYPE",{contentType:"JSON",details:s.message}))}})},e.prototype.importImportableContactsFileUsingMap=function(t,o,n){const s=this;o._sync=!1,app.models.importableFile.getTemporaryFileById(t.fileId,function(a,r){if(a)return n(a);try{const i=JSON.parse(r),l=app.utils.helpers.remapProperties(i,t.map,t.valuesMap),p=[],c=[];c.toString=function(){return JSON.stringify(this)},l.forEach(function(t,n){p.push(function(a){const r=app.utils.helpers.convertBooleanProperties(app.models.relationship,app.utils.helpers.extractImportableFields(app.models.relationship,t.relationship)),l=app.utils.helpers.convertBooleanProperties(app.models.contact,app.utils.helpers.extractImportableFields(app.models.contact,t));l.outbreakId=s.id,r.outbreakId=s.id;const p=app.models.person.sanitizeAddresses(l);return p&&(l.addresses=p),l.visualId&&(l.visualId=app.models.person.sanitizeVisualId(l.visualId)),app.utils.dbSync.syncRecord(o.remotingContext.req.logger,app.models.contact,l,o).then(function(t){const n=t.record;return new Promise(function(i,l){e.helpers.validateAndNormalizePeople(s.id,n.id,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",r,!0,function(e){return e?app.models.contact.destroyById(n.id,()=>l(e)):app.utils.dbSync.syncRecord(o.remotingContext.req.logger,app.models.relationship,r,o).then(function(e){a(null,Object.assign({},n.toJSON(),{relationships:[e.record.toJSON()]}))}).catch(function(e){t.flag===app.utils.dbSync.syncRecordFlags.CREATED&&n.destroy(o),l(e)})})})}).catch(function(e){c.push({message:`Failed to import contact ${n+1}`,error:e,recordNo:n+1,data:{file:i[n],save:{contact:l,relationship:r}}}),a(null,null)})})}),async.series(p,function(e,t){return e?n(e):c.length?((t=t.filter(e=>null!==e)).toString=function(){return JSON.stringify(this)},n(app.utils.apiError.getError("IMPORT_PARTIAL_SUCCESS",{model:app.models.contact.modelName,failed:c,success:t}))):void n(null,t)})}catch(a){o.remotingContext.req.logger.error(a),n(app.utils.apiError.getError("INVALID_CONTENT_OF_TYPE",{contentType:"JSON",details:a.message}))}})},e.prototype.exportCaseInvestigationTemplate=function(e,o,n){t.printCaseInvestigation(this,pdfUtils,e,null,o,n)},e.prototype.caseDossier=function(t,o,n,s){const a=app.models,r=tmp.dirSync({unsafeCleanup:!0}),i=r.name,l=n.remotingContext.req.authData.user.languageId,p=this.labResultsTemplate.toJSON(),c=this.caseInvestigationTemplate.toJSON();this.__get__cases({where:{id:{inq:t}},include:[{relation:"relationships",scope:{include:[{relation:"people"},{relation:"cluster"}]}},{relation:"labResults"}]},(t,n)=>{if(t)return s(t);const d=[];genericHelpers.attachParentLocations(app.models.case,app.models.location,n,(t,u)=>{t||(n=(u=u||{}).records||n),app.models.language.getLanguageDictionary(l,(t,l)=>{if(t)return s(t);const u=e.helpers.parseTemplateQuestions(p,l),f=e.helpers.parseTemplateQuestions(c,l);n.forEach((e,t)=>{n[t]=e.toJSON(),n[t].type=e.type,e.relationships.forEach((t,o)=>{e.relationships[o]=t.toJSON(),e.relationships[o].people.forEach((t,n)=>{e.relationships[o].people[n]=t.toJSON()})})}),genericHelpers.resolveModelForeignKeys(app,a.case,n,l).then(t=>{t.forEach((t,n)=>{d[n]={rawData:t,relationships:[],labResults:[]},o&&app.utils.anonymizeDatasetFields.anonymize(t,o),app.utils.helpers.formatDateFields(t,app.models.person.dossierDateFields),app.utils.helpers.formatUndefinedValues(t),t.relationships.forEach((e,o)=>{let s=_.find(e.people,e=>e.id!==t.id);if(!s)return;const r=s.type;if("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"===r){let e={};for(let t in s)-1!==app.models.event.printFieldsinOrder.indexOf(t)&&(e[t]=s[t]);s=e}app.utils.helpers.translateDataSetReferenceDataValues(s,app.models[a.person.typeToModelMap[r]],l),s=app.utils.helpers.translateFieldLabels(app,s,a[a.person.typeToModelMap[r]].modelName,l),app.utils.helpers.translateDataSetReferenceDataValues(e,a.relationship,l),(e=app.utils.helpers.translateFieldLabels(app,e,a.relationship.modelName,l))[l.getTranslation("LNG_RELATIONSHIP_PDF_FIELD_LABEL_PERSON")]=s,d[n].relationships[o]=e}),t.labResults.forEach((t,o)=>{app.utils.helpers.translateDataSetReferenceDataValues(t,a.labResult,l);let s=_.cloneDeep(u),r=t.questionnaireAnswers||{};s=e.helpers.prepareQuestionsForPrint(r,s),(t=app.utils.helpers.translateFieldLabels(app,t,a.labResult.modelName,l)).questionnaire=s,d[n].labResults[o]=t});let s=_.cloneDeep(f),r=t.questionnaireAnswers||{};s=e.helpers.prepareQuestionsForPrint(r,s),(t=app.utils.helpers.translateFieldLabels(app,t,a.case.modelName,l,!0)).questionnaire=s,d[n].data=t});const n=l.getTranslation("LNG_PAGE_TITLE_CASE_DETAILS"),s=l.getTranslation("LNG_PAGE_TITLE_CASE_QUESTIONNAIRE"),r=l.getTranslation("LNG_PAGE_ACTION_RELATIONSHIPS"),p=l.getTranslation("LNG_PAGE_LIST_ENTITY_LAB_RESULTS_TITLE"),c=l.getTranslation("LNG_PAGE_TITLE_LAB_RESULTS_QUESTIONNAIRE");let h=[];return d.forEach(e=>{h.push(new Promise((t,o)=>{let a=pdfUtils.createPdfDoc({fontSize:7,layout:"portrait",margin:20,lineGap:0,wordSpacing:0,characterSpacing:0,paragraphGap:0});a.on("pageAdded",()=>{a.moveDown(2)}),a.moveDown(2);let l=function(){app.utils.qrCode.addPersonQRCode(a,e.rawData.outbreakId,"case",e.rawData)};l(),a.on("pageAdded",l);const d=e.data.questionnaire;delete e.data.questionnaire,pdfUtils.displayModelDetails(a,e.data,!0,n),a.addPage(),pdfUtils.createQuestionnaire(a,d,!0,s),pdfUtils.displayPersonRelationships(a,e.relationships,r),pdfUtils.displayPersonSectionsWithQuestionnaire(a,e.labResults,p,c),a.addPage(),a.removeListener("pageAdded",l),a.end(),genericHelpers.streamToBuffer(a,(n,s)=>{if(n)o(n);else{const n=e.rawData.lastName?e.rawData.lastName.replace(/\r|\n|\s/g,"").toUpperCase()+" ":"",a=e.rawData.firstName?e.rawData.firstName.replace(/\r|\n|\s/g,""):"";fs.writeFile(`${i}/${n}${a} - ${e.rawData.id}.pdf`,s,e=>{e?o(e):t()})}})}))}),Promise.all(h)}).then(()=>{let e=`caseDossiers_${moment().format("YYYY-MM-DD_HH-mm-ss")}.zip`,t=`${i}/${e}`,o=new AdmZip;o.addLocalFolder(i),o.writeZip(t),fs.readFile(t,(t,o)=>{t?s(t):(r.removeCallback(),app.utils.remote.helpers.offerFileToDownload(o,"application/zip",e,s))})})})})})},e.prototype.contactDossier=function(t,o,n,s){const a=app.models,r=this.contactFollowUpTemplate.toJSON();let i=[],l=tmp.dirSync({unsafeCleanup:!0}),p=l.name;this.__get__contacts({where:{id:{inq:t}},include:[{relation:"relationships",scope:{include:[{relation:"people"},{relation:"cluster"}]}},{relation:"followUps"}]},function(t,c){if(t)return s(t);const d=app.utils.pdfDoc,u=n.remotingContext.req.authData.user.languageId;let f=[];genericHelpers.attachParentLocations(app.models.case,app.models.location,c,(t,n)=>{t||(c=(n=n||{}).records||c),app.models.language.getLanguageDictionary(u,function(t,n){if(t)return s(t);c.forEach((e,t)=>{c[t]=e.toJSON(),c[t].type=e.type,e.relationships.forEach((t,o)=>{e.relationships[o]=t.toJSON(),e.relationships[o].people.forEach((t,n)=>{e.relationships[o].people[n]=t.toJSON()})})}),genericHelpers.resolveModelForeignKeys(app,app.models.contact,c,n).then(t=>{t.forEach((t,s)=>{f[s]={rawData:t},o&&app.utils.anonymizeDatasetFields.anonymize(t,o),app.utils.helpers.formatDateFields(t,app.models.person.dossierDateFields),app.utils.helpers.formatUndefinedValues(t),t.relationships.forEach((e,o)=>{f[s].relationships=[];let r=_.find(e.people,e=>e.id!==t.id);if(!r)return;const i=r.type;if("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"===r.type){let e={};for(let t in r)-1!==app.models.event.printFieldsinOrder.indexOf(t)&&(e[t]=r[t]);r=e}app.utils.helpers.translateDataSetReferenceDataValues(r,a[a.person.typeToModelMap[i]],n),r=app.utils.helpers.translateFieldLabels(app,r,a[a.person.typeToModelMap[i]].modelName,n),app.utils.helpers.translateDataSetReferenceDataValues(e,a.relationship,n),(e=app.utils.helpers.translateFieldLabels(app,e,a.relationship.modelName,n))[n.getTranslation("LNG_RELATIONSHIP_PDF_FIELD_LABEL_PERSON")]=r,f[s].relationships[o]=e}),t.followUps.forEach((t,o)=>{f[s].followUps=[],app.utils.helpers.translateDataSetReferenceDataValues(t,app.models.followUp,n),i=e.helpers.parseTemplateQuestions(r,n);let a=t.questionnaireAnswers||{};i=e.helpers.prepareQuestionsForPrint(a,i),(t=app.utils.helpers.translateFieldLabels(app,t,app.models.followUp.modelName,n)).questionnaire=i,f[s].followUps[o]=t}),t=app.utils.helpers.translateFieldLabels(app,t,app.models.contact.modelName,n,!0),f[s].data=t});const l=n.getTranslation("LNG_PAGE_ACTION_RELATIONSHIPS"),c=n.getTranslation("LNG_PAGE_CONTACT_WITH_FOLLOWUPS_FOLLOWUPS_TITLE"),u=n.getTranslation("LNG_PAGE_CREATE_FOLLOW_UP_TAB_QUESTIONNAIRE_TITLE");let h=[];return f.forEach(e=>{h.push(new Promise((t,o)=>{let a=d.createPdfDoc({fontSize:7,layout:"portrait",margin:20,lineGap:0,wordSpacing:0,characterSpacing:0,paragraphGap:0});a.on("pageAdded",()=>{a.moveDown(2)}),a.moveDown(2);let r=function(){app.utils.qrCode.addPersonQRCode(a,e.rawData.outbreakId,"contact",e.rawData)};r(),a.on("pageAdded",r),d.displayModelDetails(a,e.data,!0,n.getTranslation("LNG_PAGE_TITLE_CONTACT_DETAILS")),d.displayPersonRelationships(a,e.relationships,l),d.displayPersonSectionsWithQuestionnaire(a,e.followUps,c,u),a.addPage(),a.removeListener("pageAdded",r),a.end(),genericHelpers.streamToBuffer(a,(n,a)=>{if(n)s(n);else{const n=e.rawData.lastName?e.rawData.lastName.replace(/\r|\n|\s/g,"").toUpperCase()+" ":"",s=e.rawData.firstName?e.rawData.firstName.replace(/\r|\n|\s/g,""):"";fs.writeFile(`${p}/${n}${s} - ${e.rawData.id}.pdf`,a,e=>{e?o(e):t()})}})}))}),Promise.all(h)}).then(()=>{let e=`contactDossiers_${moment().format("YYYY-MM-DD_HH-mm-ss")}.zip`,t=`${p}/${e}`,o=new AdmZip;o.addLocalFolder(p),o.writeZip(t),fs.readFile(t,(t,o)=>{t?s(t):(l.removeCallback(),app.utils.remote.helpers.offerFileToDownload(o,"application/zip",e,s))})})})})})},e.prototype.countContactsPerLocation=function(e,t){let o,n,s={where:{outbreakId:this.id}};null!==(o=_.get(e,"where.date",null))?(o=moment(o).isValid()?genericHelpers.getDateEndOfDay(o):genericHelpers.getDateEndOfDay(),delete e.where.date):o=genericHelpers.getDateEndOfDay(),s=app.utils.remote.mergeFilters({where:{dateOfReporting:{lte:new Date(o)}},include:{relation:"followUps",scope:{where:{date:{lte:new Date(o)}},order:"date DESC",limit:1}}},s),null!==(n=_.get(e,"where.locationId",null))&&(s=app.utils.remote.mergeFilters({where:{addresses:{elemMatch:{typeId:"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE",locationId:n}}}},s),delete e.where.locationId);let a={totalRegisteredContactsCount:0,releasedContactsCount:0,contactsUnderFollowUpCount:0,contactsSeenOnDateCount:0,lastContactDateOfRelease:null};app.models.contact.find(app.utils.remote.mergeFilters(s,e||{})).then(function(e){let s={};e.forEach(function(e){let t,r=e.id;if(n)t=n;else{e.addresses=e.addresses||[];let o=e.addresses.find(e=>"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId);t=o&&o.locationId?o.locationId:null}s[t]||(s[t]={id:t,totalRegisteredContactsCount:0,releasedContactsCount:0,contactsUnderFollowUpCount:0,contactsSeenOnDateCount:0,lastContactDateOfRelease:null,contactIDs:[]}),s[t].totalRegisteredContactsCount++;let i=moment(_.get(e,"followUp.endDate",null));if(!(i=genericHelpers.getDateEndOfDay(i)).isValid()||i.isSameOrAfter(o)){s[t].contactsUnderFollowUpCount++,a.contactsUnderFollowUpCount++;let o=e.toJSON().followUps[0];o&&app.models.followUp.isPerformed(o)&&(s[t].contactsSeenOnDateCount++,a.contactsSeenOnDateCount++)}else s[t].releasedContactsCount++,a.releasedContactsCount++;s[t].contactIDs.push(r),s[t].lastContactDateOfRelease&&!i.isAfter(s[t].lastContactDateOfRelease)||(s[t].lastContactDateOfRelease=i),a.lastContactDateOfRelease&&!i.isAfter(a.lastContactDateOfRelease)||(a.lastContactDateOfRelease=i)}),a.totalRegisteredContactsCount=e.length,a.locations=Object.values(s),t(null,a)}).catch(t)},e.prototype.exportFilteredContactFollowUps=function(e,t,o,n,s){let a,r,i;"string"==typeof t&&t.length||(t=null),Array.isArray(o)||(o=[]),null!==(a=_.get(e,"where.includeContactAddress",null))?delete e.where.includeContactAddress:a=!1,null!==(r=_.get(e,"where.includeContactPhoneNumber",null))?delete e.where.includeContactPhoneNumber:r=!1;let l={case:"case",location:"location",riskLevel:"riskLevel"},p={case:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",location:"LNG_ADDRESS_FIELD_LABEL_LOCATION",riskLevel:"LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL"};null!==(i=_.get(e,"where.groupResultsBy",null))&&(delete e.where.groupResultsBy,i=-1!==Object.values(l).indexOf(i)?i:null),e=app.utils.remote.mergeFilters({include:[{relation:"followUps",scope:{filterParent:!0,order:"date ASC"}}]},e||{}),i===l.case&&(e=app.utils.remote.mergeFilters({include:[{relation:"relationships",scope:{where:{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"},order:"contactDate DESC",limit:1,filterParent:!0,include:[{relation:"people",scope:{where:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"}}}]}}]},e||{}));this.__get__contacts(e,function(c,d){if(c)return s(c);const u=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(d,e),f=app.utils.remote.getUserFromOptions(n);app.models.language.getLanguageDictionary(f.languageId,function(e,n){if(e)return s(e);let c=app.models.contact.printFieldsinOrder;a||c.splice(c.indexOf("addresses"),1),genericHelpers.resolveModelForeignKeys(app,app.models.contact,u,n,!0).then(function(e){let s={},d={},u=n.getTranslation("LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE");o.length&&app.utils.anonymizeDatasetFields.anonymize(e,o),e.forEach(function(e){if(genericHelpers.parseModelFieldValues(e,app.models.contact),e.toPrint={},c.forEach(t=>e.toPrint[t]=void 0!==e[t]&&null!==e[t]?e[t]:""),r){const t=e.addresses.find(e=>e.typeId===u);t&&(e.phoneNumber=void 0!==t.phoneNumber&&null!==t.phoneNumber?t.phoneNumber:"")}if(a&&(e.toPrint.addresses=[e.toPrint.addresses.find(e=>e.typeId===u)]),e.toPrint=genericHelpers.translateFieldLabels(app,e.toPrint,app.models.contact.modelName,n),r&&(e.toPrint[n.getTranslation(app.models.address.fieldLabelsMap.phoneNumber)]=e.phoneNumber),i){let t,o,a;switch(i){case l.case:if(t=(o=e.relationships[0].persons.find(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===e.type)).id,!s[t]){let o=e.relationships[0].people[0];s[t]=app.models.person.getDisplayName(o)}break;case l.location:e.addresses=e.addresses||[],t=(a=e.addresses.find(e=>e.typeId===u))?a.locationId:null,s[t]||(s[t]=t);break;case l.riskLevel:t=e.riskLevel,s[t]||(s[t]=n.getTranslation(t))}d[t]||(d[t]=[]),d[t].push(e)}});let f=[];["date","performed"].forEach(function(e){f.push({id:e,header:n.getTranslation(app.models.followUp.fieldLabelsMap[e])})});let _=pdfUtils.createPdfDoc();return pdfUtils.addTitle(_,n.getTranslation("LNG_PAGE_TITLE_CONTACT_WITH_FOLLOWUPS_DETAILS")),i?Object.keys(d).forEach(function(e){pdfUtils.addTitle(_,`${n.getTranslation("LNG_PAGE_CONTACT_WITH_FOLLOWUPS_GROUP_TITLE")} ${n.getTranslation(p[i])}: ${s[e]}`,18),d[e].forEach(function(e,t){pdfUtils.displayModelDetails(_,e.toPrint,!0,`${t+1}. ${app.models.person.getDisplayName(e)}`),pdfUtils.addTitle(_,n.getTranslation("LNG_PAGE_CONTACT_WITH_FOLLOWUPS_FOLLOWUPS_TITLE"),16),pdfUtils.createTableInPDFDocument(f,e.followUps,_)})}):e.forEach(function(e,t){pdfUtils.displayModelDetails(_,e.toPrint,!0,`${t+1}. ${app.models.person.getDisplayName(e)}`),pdfUtils.addTitle(_,n.getTranslation("LNG_PAGE_CONTACT_WITH_FOLLOWUPS_FOLLOWUPS_TITLE"),16),pdfUtils.createTableInPDFDocument(f,e.followUps,_)}),new Promise(function(e,o){genericHelpers.streamToBuffer(_,function(n,s){n?o(n):t?app.utils.aesCrypto.encrypt(t,s).then(function(t){e(t)}):e(s)}),_.end()})}).then(function(e){app.utils.remote.helpers.offerFileToDownload(e,"application/pdf","Contact Line List.pdf",s)}).catch(s)})})},e.prototype.findPeopleInCluster=function(t,o,n){e.prototype.findOrCountPeopleInCluster(t,o,!1,n)},e.prototype.countPeopleInCluster=function(t,o,n){e.prototype.findOrCountPeopleInCluster(t,o,!0,n)},e.afterRemote("prototype.findPeopleInCluster",function(t,o,n){const s=e.helpers.getUsersPersonReadPermissions(t);o.forEach((t,n)=>{t=t.toJSON(),e.helpers.limitPersonInformation(t,s),o[n]=t}),n()}),e.afterRemote("prototype.__get__people",function(t,o,n){const s=e.helpers.getUsersPersonReadPermissions(t);o.forEach((t,n)=>{t=t.toJSON(),e.helpers.limitPersonInformation(t,s),o[n]=t}),n()}),e.prototype.exportExistingEmptyCaseInvestigation=function(e,o,n){let s=this;this.__findById__cases(e,function(e,a){t.printCaseInvestigation(s,pdfUtils,1,a,o,n)})},e.prototype.findPossiblePersonDuplicates=function(e,t){null==e&&(e={});let o=e.where||{};o={$and:[{outbreakId:this.id},o]},app.models.person.findOrCountPossibleDuplicates(Object.assign({where:o},e)).then(function(e){t(null,e)}).catch(t)},e.prototype.countPossiblePersonDuplicates=function(e,t){e=e||{},e={$and:[{outbreakId:this.id},e]},app.models.person.findOrCountPossibleDuplicates({where:e},!0).then(function(e){t(null,e)}).catch(t)},e.prototype.createCaseMultipleContacts=function(t,o,n,s){e.createPersonMultipleContacts(this,app.models.case.modelName,t,o,n).then(function(e){s(null,e)}).catch(s)},e.prototype.createEventMultipleContacts=function(t,o,n,s){e.createPersonMultipleContacts(this,app.models.event.modelName,t,o,n).then(function(e){s(null,e)}).catch(s)},e.prototype.bulkModifyContacts=function(t,o){e.modifyMultipleContacts(t).then(e=>o(null,e)).catch(o)},e.restoreOutbreak=function(t,o,n){e.findOne({deleted:!0,where:{id:t,deleted:!0}}).then(function(s){if(!s)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:e.modelName,id:t});s.undoDelete(o,n)}).catch(n)},e.prototype.findCaseRelationshipExposures=function(e,t,o){app.models.relationship.findPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countCaseRelationshipExposures=function(e,t,o){app.models.relationship.countPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.findCaseRelationshipContacts=function(e,t,o){app.models.relationship.findPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countCaseRelationshipContacts=function(e,t,o){app.models.relationship.countPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.findContactRelationshipExposures=function(e,t,o){app.models.relationship.findPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countContactRelationshipExposures=function(e,t,o){app.models.relationship.countPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.findContactRelationshipContacts=function(e,t,o){app.models.relationship.findPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countContactRelationshipContacts=function(e,t,o){app.models.relationship.countPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.findEventRelationshipExposures=function(e,t,o){app.models.relationship.findPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countEventRelationshipExposures=function(e,t,o){app.models.relationship.countPersonRelationshipExposures(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.findEventRelationshipContacts=function(e,t,o){app.models.relationship.findPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countEventRelationshipContacts=function(e,t,o){app.models.relationship.countPersonRelationshipContacts(this.id,e,t).then(function(e){o(null,e)}).catch(o)},e.prototype.countCasesStratifiedByClassificationOverTime=function(e,t){app.models.case.countStratifiedByClassificationOverTime(this,e).then(function(e){t(null,e)}).catch(t)},e.prototype.attachmentUpload=function(e,t,o,n,s,a){app.models.fileAttachment.upload(this.id,e,t,o,n,s,a)},e.prototype.attachmentDownload=function(e,t){app.models.fileAttachment.findOne({where:{id:e,outbreakId:this.id}}).then(function(o){if(!o)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.fileAttachment.modelName,id:e});o.download(t)}).catch(t)},e.prototype.bulkCreateRelationships=function(e,t,o,n,s){app.models.relationship.bulkCreate(this.id,e,t,o,n).then(function(e){return e.failed.length?s(app.utils.apiError.getError("BULK_CREATE_RELATIONSHIP_ERRORS",{created:{records:e.created,count:e.created.length},failed:{errors:e.failed,count:e.failed.length}})):s(null,e.created)}).catch(s)},e.prototype.downloadCaseClassificationPerLocationLevelReport=function(e,t,o){const n=this,s=t.remotingContext.req.authData.user.languageId;app.models.language.getLanguageDictionary(s,function(t,s){app.models.person.getPeoplePerLocation("case",e,n).then(e=>app.models.referenceData.find({where:{categoryId:"LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION"}}).then(t=>[t,e])).then(e=>{let t=e[0],o=e[1].peopleDistribution||[];const n=e[1].locationCorelationMap||{};let a=[],r={};return a.push({id:"type",header:s.getTranslation("LNG_LIST_HEADER_CASE_CLASSIFICATION")}),o.forEach(e=>{a.push({id:e.location.id,header:e.location.name})}),a.push({id:"total",header:s.getTranslation("LNG_LIST_HEADER_TOTAL")}),t.forEach(e=>{app.models.case.invalidCaseClassificationsForReports.includes(e.value)||(r[e.value]={type:s.getTranslation(e.value),total:"0"})}),r.deceased={type:s.getTranslation("LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"),total:"0"},Object.keys(r).forEach(e=>{o.forEach(t=>{r[e][t.location.id]="0"})}),o.forEach(e=>{e.people.forEach(e=>{const t=app.models.person.getCurrentAddress(e);let o;t&&(o=t.locationId),"LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"===e.outcomeId?(o?r.deceased[n[o]]&&(r.deceased[n[o]]=parseInt(r.deceased[n[o]])+1+""):r.deceased[app.models.location.noLocation.id]=parseInt(r.deceased[app.models.location.noLocation.id])+1+"",r.deceased.total=parseInt(r.deceased.total)+1+""):r[e.classification]&&(o?r[e.classification][n[o]]&&(r[e.classification][n[o]]=parseInt(r[e.classification][n[o]])+1+""):r[e.classification][app.models.location.noLocation.id]=parseInt(r[e.classification][app.models.location.noLocation.id])+1+"",r[e.classification].total=parseInt(r[e.classification].total)+1+"")})}),app.utils.helpers.exportListFile(a,Object.values(r),"pdf","Case distribution per location")}).then(function(e){app.utils.remote.helpers.offerFileToDownload(e.data,e.mimeType,`Case distribution per location.${e.extension}`,o)}).catch(o)})},e.prototype.countCasesPerLocationLevel=function(e,t){const o={where:{classification:{nin:app.models.case.discardedCaseClassifications}}},n=app.utils.remote.mergeFilters(o,e||{});app.models.person.getPeoplePerLocation("case",n,this).then(e=>{let o={locations:[]},n=0;e.peopleDistribution.forEach(e=>{e.location.id!==app.models.location.noLocation.id&&(e.casesCount=e.people.length,n+=e.people.length,e.caseIds=e.people.map(e=>e.id),delete e.people,o.locations.push(e))}),o.count=n,t(null,o)}).catch(t)},e.prototype.downloadContactTracingPerLocationLevelReport=function(e,t,o){const n=this,s=t.remotingContext.req.authData.user.languageId;(e=e||{}).where=e.where||{},e.dateOfFollowUp||e.where.dateOfFollowUp||(e.dateOfFollowUp=new Date),e.where.dateOfFollowUp&&(e.dateOfFollowUp=e.where.dateOfFollowUp,delete e.where.dateOfFollowUp);let a=moment(e.dateOfFollowUp).format("ll");app.models.language.getLanguageDictionary(s,function(t,s){app.models.person.getPeoplePerLocation("contact",e,n).then(e=>{let t=[{id:"location",header:s.getTranslation(n.reportingGeographicalLevelId)},{id:"underFollowUp",header:s.getTranslation("LNG_LIST_HEADER_UNDER_FOLLOWUP")},{id:"seenOnDay",header:s.getTranslation("LNG_LIST_HEADER_SEEN_ON_DAY")},{id:"coverage",header:"%"},{id:"registered",header:s.getTranslation("LNG_LIST_HEADER_REGISTERED")},{id:"released",header:s.getTranslation("LNG_LIST_HEADER_RELEASED")},{id:"expectedRelease",header:s.getTranslation("LNG_LIST_HEADER_EXPECTED_RELEASE")}],o=[];return e.peopleDistribution.forEach(e=>{let t={location:e.location.name,underFollowUp:"0",seenOnDay:"0",coverage:"0",registered:"0",released:"0",expectedRelease:e.people.length&&e.people[0].followUp?moment(e.people[0].followUp.endDate).format("ll"):"-"};e.people.forEach(e=>{if(t.registered=+t.registered+1,e.followUp&&"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_UNDER_FOLLOW_UP"===e.followUp.status){if(t.underFollowUp=+t.underFollowUp+1,e.followUps.length){_.find(e.followUps,function(e){return["LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_OK","LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_NOT_OK"].includes(e.statusId)})&&(t.seenOnDay=+t.seenOnDay+1),t.coverage=+t.seenOnDay/+t.underFollowUp*100}}else t.released=+t.released+1}),o.push(t)}),app.utils.helpers.exportListFile(t,o,"pdf",`Contact tracing ${a}`)}).then(function(e){app.utils.remote.helpers.offerFileToDownload(e.data,e.mimeType,`Contact tracing report.${e.extension}`,o)}).catch(e=>{o(e)})})},e.prototype.countContactsPerLocationLevel=function(e,t){app.models.person.getPeoplePerLocation("contact",e,this).then(e=>{let o={locations:[]},n=0;e.peopleDistribution.forEach(e=>{e.contactsCount=e.people.length,n+=e.people.length,e.contactIds=e.people.map(e=>e.id),delete e.people,o.locations.push(e)}),o.count=n,t(null,o)}).catch(t)},e.prototype.getCaseMovement=function(e,t){app.models.case.findOne({where:{id:e,outbreakId:this.id}}).then(function(o){if(!o)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.case.modelName,id:e});return o.getMovement().then(function(e){t(null,e)})}).catch(t)},e.prototype.getContactMovement=function(e,t){app.models.contact.findOne({where:{id:e,outbreakId:this.id}}).then(function(o){if(!o)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.contact.modelName,id:e});return o.getMovement().then(function(e){t(null,e)})}).catch(t)},e.beforeRemote("prototype.__get__people",function(e,t,o){const n=e.args.filter||{},s=_.get(n,"where.identifier");void 0!==s&&(delete n.where.identifier,e.args.filter=app.utils.remote.mergeFilters({where:{or:[{id:s},{visualId:s},{"documents.number":s}]}},n||{})),o()}),e.prototype.caseDelayBetweenOnsetAndLabTesting=function(e,t){app.models.case.delayBetweenOnsetAndLabTesting(this.id,e).then(function(e){t(null,e)}).catch(t)},e.prototype.restoreCaseLabResult=function(e,t,o,n){app.models.labResult.findOne({deleted:!0,where:{id:t,personId:e,deleted:!0}}).then(function(e){if(!e)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.labResult.modelName,id:t});e.undoDelete(o,n)}).catch(n)},e.prototype.exportDailyListOfContacts=function(e,t,o){const n=pdfUtils.displayValue;let s=templateParser.extractVariablesAndAnswerOptions(this.contactFollowUpTemplate);s.forEach(function(e){e.variable=e.name});let a={};app.models.contact.getGroupedByDate(this,e.date,e.groupBy).then(t=>{if("case"===e.groupBy){let e=[];for(let o in t)t.hasOwnProperty(o)&&e.push(new Promise((e,t)=>app.models.person.findById(o).then(t=>(a[o]=`${n(t.firstName)} ${n(t.middleName)} ${n(t.lastName)}`,e())).catch(t)));return Promise.all(e).then(()=>t)}return t}).then(r=>{const i=t.remotingContext.req.authData.user.languageId;app.models.language.getLanguageDictionary(i,(t,i)=>{if(t)return o(t);let l=pdfUtils.createPdfDoc();pdfUtils.addTitle(l,i.getTranslation("LNG_PAGE_TITLE_DAILY_CONTACTS_LIST")),l.moveDown();let p=!0;for(let t in r)if(r.hasOwnProperty(t)){p?p=!1:l.addPage();let o=t;"case"===e.groupBy&&(o=a[t]),pdfUtils.addTitle(l,o,12);let c=[{id:"contact",header:i.getTranslation("LNG_FOLLOW_UP_FIELD_LABEL_CONTACT")},{id:"age",header:i.getTranslation("LNG_CONTACT_FIELD_LABEL_AGE")},{id:"gender",header:i.getTranslation("LNG_CONTACT_FIELD_LABEL_GENDER")},{id:"place",header:i.getTranslation("LNG_ENTITY_FIELD_LABEL_PLACE")},{id:"city",header:i.getTranslation("LNG_ADDRESS_FIELD_LABEL_CITY")},{id:"address",header:i.getTranslation("LNG_ENTITY_FIELD_LABEL_ADDRESS")},{id:"followUpStartDate",header:i.getTranslation("LNG_RANGE_CONTACTS_LIST_HEADER_START_DATE")},{id:"followUpEndDate",header:i.getTranslation("LNG_RANGE_CONTACTS_LIST_HEADER_END_DATE")},{id:"status",header:i.getTranslation("LNG_FOLLOW_UP_FIELD_LABEL_STATUSID")}],d=[],u=9,f=!1,_=13,h=1,E=function(){d.push({headers:[],values:[]})};s.forEach(e=>{if(e.variable){if(h<=u&&!f&&(c.push({id:e.variable,header:i.getTranslation(e.text),width:50}),h===u))return f=!0,h=1,!1;if(h<=_&&f){if(d.length||E(),d[d.length-1].headers.push({id:e.variable,header:i.getTranslation(e.text),width:60}),h===_)return E(),h=1,!1}h++}});let m=[],C=0;r[t].forEach(o=>{o.followUps.forEach(a=>{let r={contact:`${n(o.firstName)} ${n(o.middleName)} ${n(o.lastName)}`,status:i.getTranslation(a.statusId)||"",gender:n(i.getTranslation(o.gender))},l="";if(o.age&&(l=o.age.months>0?`${n(o.age.months)} ${i.getTranslation("LNG_AGE_FIELD_LABEL_MONTHS")}`:`${n(o.age.years)} ${i.getTranslation("LNG_AGE_FIELD_LABEL_YEARS")}`),r.age=l,o.followUp){let e=genericHelpers.getDate(o.followUp.startDate),t=genericHelpers.getDate(o.followUp.endDate);r.followUpStartDate=e.format("YYYY-MM-DD"),r.followUpEndDate=t.format("YYYY-MM-DD")}"place"===e.groupBy?r.place=t:r.place=n(o.locationName);let p=app.models.person.getCurrentAddress(o);p&&(r.city=n(p.city),r.address=`${n(p.addressLine1)} ${n(p.addressLine2)}`);let u=a.questionnaireAnswers||{},f={};s.forEach(function(e){f[e.name]=u[e.name]}),f=genericHelpers.convertQuestionnaireAnswersToOldFormat(f);for(let e in f)if(f.hasOwnProperty(e)){let t="";if(t=Array.isArray(f[e])?f[e].map(e=>n(i.getTranslation(e))).join():n(i.getTranslation(f[e])),c.findIndex(t=>t.id===e)>=0){r[e]=t;continue}d.filter(t=>t.headers.find(t=>t.id===e)).forEach(o=>{o.values[C]=o.values[C]||{},o.values[C][e]=t})}m.push(r),C++})}),pdfUtils.createTableInPDFDocument(c,m,l,null,!0),l.moveDown(2),d.forEach(e=>{pdfUtils.createTableInPDFDocument(e.headers,e.values,l,null,!0)})}l.end(),pdfUtils.downloadPdfDoc(l,i.getTranslation("LNG_FILE_NAME_DAILY_CONTACTS_LIST"),o)})})},e.prototype.exportRangeListOfContacts=function(e,t,o){const n=pdfUtils.displayValue,s=app.models;let a=genericHelpers.getDate(e.startDate),r=genericHelpers.getDate(e.endDate);if(!a.isValid()||!r.isValid())return o(app.utils.apiError.getError("INVALID_DATES"));let i=app.models.followUp.statusAcronymMap,l={};s.contact.getGroupedByDate(this,{startDate:e.startDate,endDate:e.endDate},e.groupBy).then(t=>{if("case"===e.groupBy){let e=[];for(let o in t)t.hasOwnProperty(o)&&e.push(new Promise((e,s)=>app.models.person.findById(o).then(s=>(s?l[o]=`${n(s.firstName)} ${n(s.middleName)} ${n(s.lastName)}`:delete t[o],e())).catch(s)));return Promise.all(e).then(()=>t)}return t}).then(t=>new Promise((o,n)=>{if("case"===e.groupBy){let e={},a=[];for(let o in t)t.hasOwnProperty(o)&&(e[o]=t[o].map((e,t)=>{let o=s.person.getCurrentAddress(e);return o?(a.push(o.locationId),{locationId:o.locationId,arrayIndex:t}):{locationId:null,arrayIndex:t}}));return s.location.rawFind({id:{$in:a}}).then(n=>{const s=_.transform(n,(e,t)=>{e[t.id]=t},{});for(let o in e)e[o].map(e=>{e.locationId&&s[e.locationId]&&(t[o][e.arrayIndex].locationName=s[e.locationId].name)});o(t)}).catch(n)}return o(t)})).then(p=>{const c=t.remotingContext.req.authData.user.languageId;app.models.language.getLanguageDictionary(c,(t,c)=>{if(t)return o(t);let d=pdfUtils.createPdfDoc();pdfUtils.addTitle(d,c.getTranslation("LNG_PAGE_TITLE_RANGE_CONTACTS_LIST")),d.moveDown(),pdfUtils.addTitle(d,c.getTranslation("LNG_FOLLOW_UP_STATUS_LEGEND"),12);for(let e in i)i.hasOwnProperty(e)&&pdfUtils.addTitle(d,`${c.getTranslation(e)} = ${c.getTranslation(i[e])}`,8);d.moveDown();let u=0;for(let t in p)if(p.hasOwnProperty(t)){let o=t;"case"===e.groupBy&&(o=l[t]),"riskLevel"===e.groupBy&&(o=c.getTranslation(t)),u>0&&(d.addPage(),d.moveDown(2)),pdfUtils.addTitle(d,o,12);let f=[{id:"contact",header:c.getTranslation("LNG_FOLLOW_UP_FIELD_LABEL_CONTACT")},{id:"age",header:c.getTranslation("LNG_CONTACT_FIELD_LABEL_AGE")},{id:"gender",header:c.getTranslation("LNG_CONTACT_FIELD_LABEL_GENDER")},{id:"place",header:c.getTranslation("LNG_ENTITY_FIELD_LABEL_PLACE")},{id:"city",header:c.getTranslation("LNG_ADDRESS_FIELD_LABEL_CITY")},{id:"address",header:c.getTranslation("LNG_ENTITY_FIELD_LABEL_ADDRESS")},{id:"followUpStartDate",header:c.getTranslation("LNG_RANGE_CONTACTS_LIST_HEADER_START_DATE")},{id:"followUpEndDate",header:c.getTranslation("LNG_RANGE_CONTACTS_LIST_HEADER_END_DATE")}],_=[],h=10,E=!1,m=39,C=1,T=function(){_.push({headers:[],values:[]})};for(let e=a.clone();e.isSameOrBefore(r);e.add(1,"day"))if(C<=h&&!E&&(f.push({id:e.format("YYYY-MM-DD"),header:e.format("YY/MM/DD"),width:20,isDate:!0}),C===h))E=!0,C=1;else{if(C<=m&&E){if(_.length||T(),_[_.length-1].headers.push({id:e.format("YYYY-MM-DD"),header:e.format("YY/MM/DD"),width:20}),C===m){T(),C=1;continue}}C++}let g=[],O=0;p[t].forEach(o=>{let l={contact:`${n(o.firstName)} ${n(o.middleName)} ${n(o.lastName)}`,gender:n(c.getTranslation(o.gender))},p="";if(o.age&&(p=o.age.months>0?`${n(o.age.months)} ${c.getTranslation("LNG_AGE_FIELD_LABEL_MONTHS")}`:`${n(o.age.years)} ${c.getTranslation("LNG_AGE_FIELD_LABEL_YEARS")}`),l.age=p,o.followUp){let e=genericHelpers.getDate(o.followUp.startDate),t=genericHelpers.getDate(o.followUp.endDate);l.followUpStartDate=e.format("YYYY-MM-DD"),l.followUpEndDate=t.format("YYYY-MM-DD");for(let t=a.clone();t.isBefore(e);t.add(1,"day"))l[t.format("YYYY-MM-DD")]={value:"X",isDate:!0};for(let e=t.clone().add(1,"day");e.isSameOrBefore(r);e.add(1,"day"))l[e.format("YYYY-MM-DD")]={value:"X",isDate:!0}}"place"===e.groupBy?l.place=t:l.place=n(o.locationName);let d=s.person.getCurrentAddress(o);d&&(l.city=n(d.city),l.address=`${n(d.addressLine1)} ${n(d.addressLine2)}`),o.followUps.length&&o.followUps.forEach(e=>{let t=moment(e.date).format("YYYY-MM-DD");l[t]={value:c.getTranslation(i[e.statusId])||"",isDate:!0}});let u=f.filter(e=>e.hasOwnProperty("isDate")),h=genericHelpers.convertToDate(u[u.length-1].id);for(let e in l)if(l.hasOwnProperty(e)&&l[e].isDate){let t=genericHelpers.convertToDate(e);if(t.isAfter(h)){let o=_.filter(e=>{if(e.headers.length){let o=e.headers[e.headers.length-1].id;return t.isSameOrBefore(genericHelpers.convertToDate(o))}return!1});o.length&&(o[0].values[O]=o[0].values[O]||{},o[0].values[O][e]=l[e].value),delete l[e]}else l[e]=l[e].value}g.push(l),O++}),pdfUtils.createTableInPDFDocument(f,g,d,null,!0),_.forEach(e=>{pdfUtils.createTableInPDFDocument(e.headers,e.values,d,null,!0)}),u++}d.end(),pdfUtils.downloadPdfDoc(d,c.getTranslation("LNG_FILE_NAME_RANGE_CONTACTS_LIST"),o)})})},e.beforeRemote("prototype.findFollowUps",function(e,t,n){o(e,0,n)}),e.beforeRemote("prototype.filteredCountFollowUps",function(e,t,n){o(e,0,n)}),e.beforeRemote("prototype.exportFilteredFollowups",function(e,t,n){o(e,0,n)}),e.beforeRemote("prototype.exportContactFollowUpListPerDay",function(e,t,n){o(e,0,n)}),e.beforeRemote("prototype.countFollowUpsByTeam",function(e,t,n){o(e,0,n)}),e.prototype.findFollowUps=function(e,t){app.models.followUp.preFilterForOutbreak(this,e).then(function(e){return e.where=app.utils.remote.convertNestedGeoPointsFilterToMongo(app.models.followUp,e.where||{},!0,void 0,!0),app.models.followUp.findAggregate(e)}).then(function(e){t(null,e)}).catch(t)},e.prototype.filteredCountFollowUps=function(e,t){app.models.followUp.preFilterForOutbreak(this,e).then(function(e){return e.where=app.utils.remote.convertNestedGeoPointsFilterToMongo(app.models.followUp,e.where||{},!0,void 0,!0),app.models.followUp.findAggregate(e,!0)}).then(function(e){t(null,e)}).catch(t)},e.prototype.exportFilteredFollowups=function(e,t,o,n,s,a){let r=this;(e=e||{}).where=e.where||{};let i=!1;e.where.hasOwnProperty("useQuestionVariable")&&(i=e.where.useQuestionVariable,delete e.where.useQuestionVariable),new Promise((e,t)=>{const o=app.utils.remote.getUserFromOptions(s);app.models.language.getLanguageDictionary(o.languageId,function(o,n){if(o)return t(o);e(n)})}).then(t=>app.models.followUp.preFilterForOutbreak(this,e).then(e=>({dictionary:t,filter:e}))).then(function(e){const l=e.dictionary,p=e.filter;"string"==typeof o&&o.length||(o=null),Array.isArray(n)||(n=[]),s.questionnaire=r.contactFollowUpTemplate,s.dictionary=l,s.useQuestionVariable=i,app.utils.remote.helpers.exportFilteredModelsList(app,app.models.followUp,{},p.where,t,"Follow-Up List",o,n,s,function(e){return Promise.resolve(e)},a)})},e.prototype.exportFullContactFollowUpListPerDay=function(e,t,o,n,s){function a(e,t){s(e,t),s=function(){}}o=o||{};const r=this,i=n.remotingContext.req.authData.user.languageId;let l,p;t&&(l=genericHelpers.getDate(t),p=genericHelpers.getDateEndOfDay(t));let c={where:{and:[{outbreakId:this.id},{"followUp.status":"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_UNDER_FOLLOW_UP"}]},include:{relation:"followUps",scope:{order:"date ASC",filterParent:!0}}};l&&p&&(c.include.scope.where={date:{gte:new Date(l),lte:new Date(p)}}),c=app.utils.remote.mergeFilters(c,o),app.models.language.getLanguageDictionary(i,function(t,o){if(t)return a(t);const n=fork(`${__dirname}../../../components/workers/buildFullDailyFollowUpList`,[],{execArgv:[],windowsHide:!0});function s(){const t=new Error(`Processing failed. Worker stopped. Event Details: ${JSON.stringify(arguments)}`);e.req.logger.error(JSON.stringify(t)),a(t)}return["error","exit"].forEach(function(e){n.on(e,s)}),n.on("message",function(t){t[0]&&a(t[0]),t[1]&&t[1].chunk&&e.write(Buffer.from(t[1].chunk.data)),t[1]&&t[1].end&&(e.end(),["error","exit"].forEach(function(e){n.removeListener(e,s)}),n.kill())}),e.set("Content-type","application/pdf"),e.set("Content-disposition","attachment;filename=Daily Contact Follow-up.pdf"),app.models.contact.count(c.where).then(function(e){return function e(t,s,a){return app.models.contact.rawFind(c.where,{projection:{firstName:1,middleName:1,lastName:1,gender:1,age:1,dateOfLastContact:1,addresses:1},skip:t,limit:s}).then(e=>{const i={};e.forEach(function(e){i[e.id]=e,e.followUps=[]});let l=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(c).followUps;return l={and:[l,{outbreakId:r.id},{personId:{inq:Object.keys(i)}}]},app.models.followUp.rawFind(l,{projection:{personId:1,date:1,statusId:1,questionnaireAnswers:1}}).then(function(l){l.forEach(function(e){i[e.personId].followUps.push(e)}),e=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(e,c);let p=[];return e.forEach((e,t)=>{p[t]={};let n=[{description:"Date"}],s=[{id:"description",header:""}];n.push({description:o.getTranslation("LNG_FOLLOW_UP_FIELD_LABEL_STATUSID")}),e.followUps.forEach((e,t)=>{s.push({id:"index"+t,header:e.index}),n[0]["index"+t]=moment(e.date).format("YYYY-MM-DD"),n[n.length-1]["index"+t]=o.getTranslation(app.models.followUp.statusAcronymMap[e.statusId])}),templateParser.extractVariablesAndAnswerOptions(r.contactFollowUpTemplate).forEach(t=>{n.push({description:o.getTranslation(t.text)}),e.followUps.forEach((e,s)=>{let a=_.get(e,`questionnaireAnswers[${t.variable}]`);a=genericHelpers.convertQuestionAnswerToOldFormat(a),n[n.length-1]["index"+s]=genericHelpers.translateQuestionAnswers(t,a,o)})});const a=app.models.person.getCurrentAddress(e);p[t].contactInformation={title:o.getTranslation("LNG_PAGE_TITLE_CONTACT_DETAILS"),rows:[app.models.person.getDisplayName(e),`${o.getTranslation("LNG_REFERENCE_DATA_CATEGORY_GENDER")}: ${pdfUtils.displayValue(o.getTranslation(e.gender))}`,`${o.getTranslation("LNG_CONTACT_FIELD_LABEL_AGE")}: ${_.get(e,"age.years")} ${o.getTranslation("LNG_AGE_FIELD_LABEL_YEARS")} ${_.get(e,"age.months")} ${o.getTranslation("LNG_AGE_FIELD_LABEL_MONTHS")}`,`${o.getTranslation("LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE")}: ${moment(e.dateOfLastContact).format("YYYY-MM-DD")}`,`${o.getTranslation("LNG_CONTACT_FIELD_LABEL_ADDRESSES")}: ${app.models.address.getHumanReadableAddress(a)}`,`${o.getTranslation("LNG_ADDRESS_FIELD_LABEL_PHONE_NUMBER")}: ${pdfUtils.displayValue(a?a.phoneNumber:null)}`]},p[t].legend={title:o.getTranslation("LNG_FOLLOW_UP_STATUS_LEGEND"),rows:[]};for(let e in app.models.followUp.statusAcronymMap)app.models.followUp.statusAcronymMap.hasOwnProperty(e)&&p[t].legend.rows.push(`${o.getTranslation(e)} = ${o.getTranslation(app.models.followUp.statusAcronymMap[e])}`);p[t].data=n,p[t].headers=s}),new Promise(function(e,o){n.send({fn:"sendData",args:[p,t+s>=a]}),n.on("message",function t(s){return s[0]?o(s[0]):s[1]&&s[1].readyForNextBatch?(n.removeListener("message",t),e()):void 0})})})}).then(function(){if((t+=s)<a)return e(t,s,a)})}(0,100,e)}).then(function(){n.send({fn:"finish",args:[]})}).catch(a)})},e.prototype.exportContactFollowUpListPerDay=function(e,t,o,n,s,a,r){const i=this,l=a.remotingContext.req.authData.user.languageId;function p(e,t){r(e,t),r=function(){}}if(["place","case"].includes(n)||(n="place"),!t&&!o){const t=new Error("Either date or contactId must be provided");return e.req.logger.error(JSON.stringify(t)),p(t)}app.models.language.getLanguageDictionary(l,function(a,r){if(a)return p(a);const l=fork(`${__dirname}../../../components/workers/buildDailyFollowUpList`,[],{execArgv:[],windowsHide:!0});function c(){const t=new Error(`Processing failed. Worker stopped. Event Details: ${JSON.stringify(arguments)}`);e.req.logger.error(JSON.stringify(t)),p(t)}let d,u;["error","exit"].forEach(function(e){l.on(e,c)}),l.on("message",function(t){t[0]&&p(t[0]),t[1]&&t[1].chunk&&e.write(Buffer.from(t[1].chunk.data)),t[1]&&t[1].end&&(e.end(),["error","exit"].forEach(function(e){l.removeListener(e,c)}),l.kill())}),e.set("Content-type","application/pdf"),e.set("Content-disposition","attachment;filename=Daily Contact Follow-up.pdf");let f={};t&&(d=genericHelpers.getDate(t.startDate),u=genericHelpers.getDateEndOfDay(t.endDate),f={date:{gte:new Date(d),lte:new Date(u)}});let h,E={};o&&(E={personId:o});const m=[];app.models.followUp.preFilterForOutbreak(i,s).then(function(e){return app.models.followUp.rawFind({$and:[e.where,Object.assign({outbreakId:i.id},f,E)]},{projection:{personId:1,statusId:1,date:1,address:1,index:1,targeted:1}})}).then(function(e){return app.models.contact.rawFind({_id:o||{inq:[...new Set(e.map(e=>e.personId))]},outbreakId:i.id},{projection:{followUp:1,firstName:1,middleName:1,lastName:1,gender:1,age:1,dateOfLastContact:1,addresses:1}}).then(function(t){const s={};t.forEach(function(e){s[e.id]=e}),h=s[o],e.forEach(function(e){e.contact=s[e.personId];let t="LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION";if(e.address&&e.address.locationId&&(t=e.address.locationId),"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"===t){let t=app.models.person.getCurrentAddress(e.contact||{});t&&(t.locationId=t.locationId?t.locationId:"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION",e.address=t)}"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==t&&m.push(t)});const a={};switch(n){case"place":return e.forEach(function(e){let t="LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION";e.address&&e.address.locationId&&(t=e.address.locationId),a[t]||(a[t]={records:[]}),a[t].records.push(e)}),a;case"case":return app.models.relationship.rawFind({outbreakId:i.id,"persons.id":{inq:Object.keys(s)}},{projection:{persons:1},order:{contactDate:1}}).then(function(t){const o={};return t.forEach(function(e){let t,n;Array.isArray(e.persons)&&e.persons.forEach(function(e){"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type?t=e.id:n=e.id}),t&&n&&(o[t]=n)}),app.models.person.rawFind({_id:{inq:Object.values(o)},outbreakId:i.id},{projection:{type:1,firstName:1,middleName:1,lastName:1,name:1}}).then(function(t){const n={};return t.forEach(function(e){n[e.id]=e}),e.forEach(function(e){if(!a[o[e.personId]]){const t=n[o[e.personId]]||{};a[o[e.personId]]={name:`${t.firstName||""} ${t.middleName||""} ${t.lastName||""}`.trim(),records:[]}}a[o[e.personId]].records.push(e)}),a})})}}).then(function(e){return"place"===n&&m.push(...Object.keys(e)),app.models.location.rawFind({id:{inq:m}},{projection:{name:1}}).then(function(t){const o={},s={};t.forEach(function(e){o[e.id]=e});const a=r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"),i=r.getTranslation("LNG_COMMON_LABEL_YES"),l=r.getTranslation("LNG_COMMON_LABEL_NO");return Object.keys(e).forEach(function(t){s[t]={name:e[t].name,records:[]},"place"===n&&(s[t].name="LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==t?_.get(o,`${t}.name`):a),e[t].records.forEach(function(e){e.gender=r.getTranslation(_.get(e,"contact.gender"));const n={lastName:_.get(e,"contact.lastName",""),firstName:_.get(e,"contact.firstName",""),middleName:_.get(e,"contact.middleName",""),age:pdfUtils.displayAge(e,r),gender:e.gender,location:e.address&&e.address.locationId&&"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==e.address.locationId&&o[e.address.locationId]?o[e.address.locationId].name:a,address:app.models.address.getHumanReadableAddress(e.address),day:e.index,from:moment(_.get(e,"contact.followUp.startDate")).format("YYYY-MM-DD"),to:moment(_.get(e,"contact.followUp.endDate")).format("YYYY-MM-DD"),date:e.date?moment(e.date).format("YYYY-MM-DD"):void 0,targeted:e.targeted?i:l};n[e.statusId]="X",s[t].records.push(n)})}),s})})}).then(function(e){return app.models.referenceData.rawFind({categoryId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE",value:{neq:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_PERFORMED"}},{projection:{value:1}}).then(function(t){const o=[...h?[{id:"date",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_DATE")}]:[{id:"firstName",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_FIRST_NAME")},{id:"lastName",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_LAST_NAME")},{id:"middleName",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_MIDDLE_NAME")},{id:"age",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_AGE")},{id:"gender",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_GENDER")}],..."case"===n?[{id:"location",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_LOCATION")}]:[],...[{id:"address",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_ADDRESS")},{id:"day",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_DAY")},{id:"from",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_FROM")},{id:"to",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_TO")},{id:"targeted",header:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_TARGETED")}]];t.forEach(function(e){o.push({id:e.value,header:r.getTranslation(e.value)})}),function e(t,o,n){let s=Object.keys(n);s.sort((e,t)=>n[t].name.toLowerCase().localeCompare(n[e].name.toLowerCase()));let a=s.length;if(0===a)return l.send({fn:"finish",args:[]});a>100&&(a=100);const r={};for(let e=0;e<a;e++)r[s[e]]=n[s[e]],delete n[s[e]];l.on("message",function s(a){if(a[0])return p(a[0]);a[1]&&a[1].readyForNextBatch&&(l.removeListener("message",s),e(t,o,n))}),l.send({fn:"sendData",args:[t,o,r,0===Object.keys(n).length]})}({title:`${r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_TITLE")}: ${h?app.models.person.getDisplayName(h):moment(d).format("YYYY-MM-DD")}`,groupTitle:r.getTranslation("place"===n?"LNG_REPORT_DAILY_FOLLOW_UP_LIST_GROUP_TITLE_LOCATION":"LNG_REPORT_DAILY_FOLLOW_UP_LIST_GROUP_TITLE_CASE"),total:r.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_TOTAL")},o,e)})}).catch(p)})},e.prototype.countFollowUpsByTeam=function(e,t){const o=this;app.models.followUp.preFilterForOutbreak(this,e).then(function(e){return app.models.followUp.countByTeam(o.id,e)}).then(function(e){t(null,e)}).catch(t)},e.beforeRemote("prototype.findLabResults",function(e,t,o){n(e,0,o)}),e.beforeRemote("prototype.filteredCountLabResults",function(e,t,o){n(e,0,o)}),e.beforeRemote("prototype.findLabResultsAggregate",function(e,t,o){n(e,0,o)}),e.beforeRemote("prototype.filteredCountLabResultsAggregate",function(e,t,o){n(e,0,o)}),e.prototype.findLabResults=function(e,t){app.models.labResult.preFilterForOutbreak(this,e).then(e=>(this.isContactLabResultsActive||(e.where.personType={neq:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"}),app.models.labResult.find(e))).then(function(e){t(null,e)}).catch(t)},e.prototype.filteredCountLabResults=function(e,t){app.models.labResult.preFilterForOutbreak(this,e).then(e=>(this.isContactLabResultsActive||(e.where.personType={neq:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"}),e=genericHelpers.attachCustomDeleteFilterOption(e),app.models.labResult.count(e.where))).then(function(e){t(null,e)}).catch(t)},e.prototype.filteredCountCaseLabResults=function(e,t,o){(t=t||{}).where=t.where||{},t.where.personId=e,t.where.personType="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",app.models.labResult.preFilterForOutbreak(this,t).then(e=>(e=genericHelpers.attachCustomDeleteFilterOption(e),app.models.labResult.count(e.where))).then(e=>o(null,e)).catch(o)},e.prototype.filteredCountContactLabResults=function(e,t,o){(t=t||{}).where=t.where||{},t.where.personId=e,t.where.personType="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",app.models.labResult.preFilterForOutbreak(this,t).then(e=>(e=genericHelpers.attachCustomDeleteFilterOption(e),app.models.labResult.count(e.where))).then(e=>o(null,e)).catch(o)},e.prototype.findLabResultsAggregate=function(e,t){app.models.labResult.preFilterForOutbreak(this,e).then(e=>{app.models.labResult.retrieveAggregateLabResults(this,e,!1,t)})},e.prototype.filteredCountLabResultsAggregate=function(e,t){app.models.labResult.preFilterForOutbreak(this,e).then(e=>{app.models.labResult.retrieveAggregateLabResults(this,e,!0,t)})},e.beforeRemote("prototype.countCasesPerClassification",function(e,t,o){s(e,0,o)}),e.beforeRemote("prototype.exportFilteredCases",function(e,t,o){s(e,0,o)}),e.prototype.findCases=function(e,t){const o=this.outbreakId,n=genericHelpers.getFilterCustomOption(e,"countRelations");app.models.case.preFilterForOutbreak(this,e).then(function(e){return e=e||{},Object.assign(e,app.utils.remote.convertLoopbackFilterToMongo({where:e.where||{}})),app.utils.remote.convertNestedGeoPointsFilterToMongo(app.models.case,e.where,!0),app.models.case.find(e)}).then(function(e){if(!n)return t(null,e);{const n={};for(let t of e)n[t.id]=t;app.models.person.getPeopleContactsAndExposures(o,Object.keys(n)).then(o=>{for(let e in o){const t=n[e];t.numberOfContacts=o[e].numberOfContacts,t.numberOfExposures=o[e].numberOfExposures}return t(null,e)})}}).catch(t)},e.prototype.findEvents=function(e,t){(e=e||{}).where=e.where||{};const o=this.id,n=genericHelpers.getFilterCustomOption(e,"countRelations");e.where={and:[e.where,{outbreakId:o}]},app.models.event.find(e).then(e=>{if(!n)return t(null,e);{const n={};for(let t of e)n[t.id]=t;app.models.person.getPeopleContactsAndExposures(o,Object.keys(n)).then(o=>{for(let e in o){const t=n[e];t.numberOfContacts=o[e].numberOfContacts,t.numberOfExposures=o[e].numberOfExposures}return t(null,e)})}}).catch(t)},e.prototype.filteredCountCases=function(e,t){app.models.case.preFilterForOutbreak(this,e).then(function(e){return e=e||{},Object.assign(e,app.utils.remote.convertLoopbackFilterToMongo({where:e.where||{}})),app.utils.remote.convertNestedGeoPointsFilterToMongo(app.models.case,e.where,!0,void 0,!0),e=genericHelpers.attachCustomDeleteFilterOption(e),app.models.case.count(e.where)}).then(function(e){t(null,e)}).catch(t)},e.prototype.countCasesPerClassification=function(e,t){app.models.case.preFilterForOutbreak(this,e).then(function(e){return app.models.case.rawFind(e.where,{projection:{classification:1},includeDeletedRecords:e.deleted})}).then(function(e){const o={classification:{},count:e.length};e.forEach(function(e){o.classification[e.classification]||(o.classification[e.classification]={count:0}),o.classification[e.classification].count++}),t(null,o)}).catch(t)},e.prototype.exportFilteredCases=function(e,t,o,n,s,a){const r=this;(e=e||{}).where=e.where||{};let i=!1;e.where.hasOwnProperty("useQuestionVariable")&&(i=e.where.useQuestionVariable,delete e.where.useQuestionVariable),new Promise((e,t)=>{const o=app.utils.remote.getUserFromOptions(s);app.models.language.getLanguageDictionary(o.languageId,function(o,n){if(o)return t(o);e(n)})}).then(t=>app.models.case.preFilterForOutbreak(this,e).then(e=>({dictionary:t,filter:e}))).then(function(e){const l=e.dictionary,p=e.filter;"string"==typeof o&&o.length||(o=null),Array.isArray(n)||(n=[]),s.questionnaire=r.caseInvestigationTemplate,s.dictionary=l,s.useQuestionVariable=i,app.utils.remote.helpers.exportFilteredModelsList(app,app.models.case,{},p.where,t,"Case List",o,n,s,function(e){return Promise.resolve(e)},a)}).catch(a)},e.prototype.exportFilteredRelationships=function(e,t,o,n,s,a){app.models.relationship.preFilterForOutbreak(this,e).then(function(e){"string"==typeof o&&o.length||(o=null),Array.isArray(n)||(n=[]),app.utils.remote.helpers.exportFilteredModelsList(app,app.models.relationship,{},e.where,t,"Relationship List",o,n,s,function(e){let t={};e.forEach(e=>{e.persons&&e.persons.length>1&&(t[e.persons[0].id]=!0,t[e.persons[1].id]=!0)}),t=Object.keys(t);let o=Promise.resolve();const n={};return _.isEmpty(t)||(o=app.models.person.rawFind({id:{inq:t}}).then(e=>{e.forEach(e=>{n[e.id]=e})})),o.then(()=>new Promise(function(e,t){const o=app.utils.remote.getUserFromOptions(s);app.models.language.getLanguageDictionary(o.languageId,function(o,n){if(o)return t(o);e(n)})})).then(t=>(e.forEach(e=>{if(e.persons&&e.persons.length>1){const t=n[e.persons[0].id],o=n[e.persons[1].id];t&&o?(e.sourcePerson=e.persons[0].source?t:o,e.targetPerson=e.persons[0].target?t:o):(e.sourcePerson={},e.targetPerson={})}e.sourcePerson.gender&&(e.sourcePerson.gender=t.getTranslation(e.sourcePerson.gender)),e.targetPerson.gender&&(e.targetPerson.gender=t.getTranslation(e.targetPerson.gender))}),e))},a)}).catch(a)},e.beforeRemote("prototype.findContacts",function(e,t,o){a(e,0,o)}),e.beforeRemote("prototype.filteredCountContacts",function(e,t,o){e.args=e.args||{},e.args.filter=genericHelpers.removeFilterOptions(e.args.filter,["countRelations"]),a(e,0,o)}),e.beforeRemote("prototype.countContactsPerRiskLevel",function(e,t,o){a(e,0,o)}),e.beforeRemote("prototype.exportFilteredContacts",function(e,t,o){e.args=e.args||{},e.args.filter=genericHelpers.removeFilterOptions(e.args.filter,["countRelations"]),a(e,0,o)}),e.beforeRemote("prototype.exportDailyContactFollowUpList",function(e,t,o){a(e,0,o)}),e.beforeRemote("prototype.exportFilteredRelationships",function(e,t,o){return e.args=e.args||{},e.args.filter=e.args.filter||{},e.args.filter.where=e.args.filter.where||{},e.args.filter.where.person=e.args.filter.where.person||{},delete e.args.filter.where.person.countRelations,o()}),e.prototype.findContacts=function(e,t){const o=this.outbreakId,n=genericHelpers.getFilterCustomOption(e,"countRelations");app.models.contact.preFilterForOutbreak(this,e).then(function(e){return app.models.contact.find(e)}).then(function(e){if(!n)return t(null,e);{const n={};for(let t of e)n[t.id]=t;app.models.person.getPeopleContactsAndExposures(o,Object.keys(n)).then(o=>{for(let e in o){const t=n[e];t.numberOfContacts=o[e].numberOfContacts,t.numberOfExposures=o[e].numberOfExposures}return t(null,e)})}}).catch(t)},e.prototype.filteredCountContacts=function(e,t){app.models.contact.preFilterForOutbreak(this,e).then(function(e){return e.where=app.utils.remote.convertNestedGeoPointsFilterToMongo(app.models.contact,e.where||{},!0,void 0,!0,!0),e=genericHelpers.attachCustomDeleteFilterOption(e),app.models.contact.count(e.where)}).then(function(e){t(null,e)}).catch(t)},e.prototype.countContactsPerRiskLevel=function(e,t){app.models.contact.preFilterForOutbreak(this,e).then(function(e){return app.models.contact.rawFind(e.where,{projection:{riskLevel:1},includeDeletedRecords:e.deleted})}).then(function(e){const o={riskLevel:{},count:e.length};e.forEach(function(e){null==e.riskLevel&&(e.riskLevel="LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_UNCLASSIFIED"),o.riskLevel[e.riskLevel]||(o.riskLevel[e.riskLevel]={count:0}),o.riskLevel[e.riskLevel].count++}),t(null,o)}).catch(t)},e.prototype.exportFilteredContacts=function(e,t,o,n,s,a){app.models.contact.preFilterForOutbreak(this,e).then(function(e){"string"==typeof o&&o.length||(o=null),Array.isArray(n)||(n=[]),app.utils.remote.helpers.exportFilteredModelsList(app,app.models.contact,{},e.where,t,"Contacts List",o,n,s,(e,t)=>new Promise(function(o,n){const s=_.transform(e,(e,t)=>{e[t.id]=t},{}),a=Object.keys(s),r=a.length<1?Promise.resolve([]):app.models.relationship.find({order:"createdAt ASC",where:{"persons.id":{inq:a}}});r.catch(n);const i=[];r.then(n=>(_.each(n,e=>{if(e.persons.length<2)return;let o,n;e.persons[0].target?(o=e.persons[0].id,n=e.persons[1].id):(o=e.persons[1].id,n=e.persons[0].id),s[o]&&!s[o].relationship&&(s[o].relationship=e.toJSON(),s[o].relationship.relatedId=n,i.push(genericHelpers.resolveModelForeignKeys(app,app.models.relationship,[s[o].relationship],t).then(e=>{s[o].relationship=e[0]})))}),Promise.all(i).then(()=>o(e))))}),a)}).catch(a)},e.prototype.filteredCountContactsOnFollowUpList=function(e={},t){e.where=e.where||{};let o=genericHelpers.getDate().toDate(),n=genericHelpers.getDateEndOfDay().toDate();e.where.startDate&&(o=genericHelpers.getDate(e.where.startDate).toDate(),delete e.where.startDate),e.where.endDate&&(n=genericHelpers.getDateEndOfDay(e.where.endDate).toDate(),delete e.where.endDate);const s=_.get(e,"where.classification");s&&delete e.where.classification;const a=app.utils.remote.mergeFilters({where:{outbreakId:this.id,followUp:{$ne:null},"followUp.status":"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_UNDER_FOLLOW_UP",$or:[{$and:[{$or:[{$and:[{"followUp.startDate":{$lte:o}},{"followUp.endDate":{$gte:n}}]},{$and:[{"followUp.startDate":{$gte:o}},{"followUp.startDate":{$lte:n}},{"followUp.endDate":{$gte:n}}]},{$and:[{"followUp.startDate":{$lte:o}},{"followUp.endDate":{$gte:o}},{"followUp.endDate":{$lte:n}}]},{$and:[{"followUp.startDate":{$gte:o}},{"followUp.endDate":{$gte:o}},{"followUp.endDate":{$lte:n}}]}]}]}]}},e);let r=Promise.resolve();s&&(r=r.then(()=>app.models.case.rawFind({outbreakId:this.id,deleted:{$ne:!0},classification:app.utils.remote.convertLoopbackFilterToMongo(s)},{projection:{_id:1}})).then(e=>{if(_.isEmpty(e))return[];const t=e.map(e=>e.id);return app.models.relationship.rawFind({outbreakId:this.id,deleted:{$ne:!0},$or:[{"persons.0.source":!0,"persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.0.id":{$in:t}},{"persons.1.source":!0,"persons.1.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","persons.0.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.1.id":{$in:t}}]},{projection:{persons:1}})}).then(e=>{let t={};(e||[]).forEach(e=>{const o=e.persons[0].target?e.persons[0].id:e.persons[1].id;t[o]=!0}),t=Object.keys(t),a.where={$and:[a.where,{_id:{$in:t}}]}})),r.then(()=>app.models.contact.rawFind(a.where,{projection:{_id:1}}).then(e=>t(null,e.length,e.map(e=>e.id))).catch(t))},e.prototype.exportDailyContactFollowUpList=function(e,t,o,n,s){let a=this;app.models.contact.preFilterForOutbreak(this,o).then(function(o){const r=n.remotingContext.req.authData.user.languageId;function i(e,t){s(e,t),s=function(){}}["place","case"].includes(t)||(t="place"),app.models.language.getLanguageDictionary(r,function(n,s){if(n)return i(n);const r=fork(`${__dirname}../../../components/workers/buildDailyContactList`,[],{execArgv:[],windowsHide:!0});function l(){const t=new Error(`Processing failed. Worker stopped. Event Details: ${JSON.stringify(arguments)}`);e.req.logger.error(JSON.stringify(t)),i(t)}["error","exit"].forEach(function(e){r.on(e,l)}),r.on("message",function(t){t[0]&&i(t[0]),t[1]&&t[1].chunk&&e.write(Buffer.from(t[1].chunk.data)),t[1]&&t[1].end&&(e.end(),["error","exit"].forEach(function(e){r.removeListener(e,l)}),r.kill())}),e.set("Content-type","application/pdf"),e.set("Content-disposition","attachment;filename=Daily Contact List.pdf");const p=[];return app.models.contact.rawFind(o.where,{projection:{followUp:1,firstName:1,middleName:1,lastName:1,gender:1,age:1,dateOfLastContact:1,addresses:1}}).then(function(e){const o={};return e.forEach(function(e){o[e.id]=e}),app.models.followUp.rawFind({personId:{$in:Object.keys(o)}}).then(n=>{const s=_.groupBy(n,e=>e.personId);e=e.map(e=>{let t=s[e.id]||[];return t=_.uniqBy(t,"index").sort((e,t)=>e.index-t.index),e.followUps=t,e});const r={};return"place"===t?(e.forEach(e=>{let t="LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION",o=app.models.person.getCurrentAddress(e);o&&(o.locationId=o.locationId?o.locationId:"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION",t=o.locationId),r[t]||(r[t]={records:[]}),e.currentAddress=o||{locationId:t},r[t].records.push(e)}),r):app.models.relationship.rawFind({outbreakId:a.id,"persons.id":{inq:Object.keys(o)}},{projection:{persons:1},order:{contactDate:1}}).then(function(t){const o={};return t.forEach(function(e){let t,n;Array.isArray(e.persons)&&e.persons.forEach(function(e){"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type?t=e.id:n=e.id}),t&&n&&(o[t]=n)}),app.models.person.rawFind({_id:{inq:Object.values(o)},outbreakId:a.id},{projection:{type:1,firstName:1,middleName:1,lastName:1,name:1}}).then(function(t){const n={};return t.forEach(function(e){n[e.id]=e}),e.forEach(e=>{if(!r[o[e.id]]){const t=n[o[e.id]]||{};r[o[e.id]]={name:`${t.firstName||""} ${t.middleName||""} ${t.lastName||""}`.trim(),records:[]}}r[o[e.id]].records.push(e)}),r})})}).then(function(e){if("place"===t)p.push(...Object.keys(e));else{const t={};Object.keys(e).forEach(function(o){e[o].records.forEach(function(e){e.currentAddress||(e.currentAddress=app.models.person.getCurrentAddress(e),e.currentAddress&&e.currentAddress.locationId&&"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==e.currentAddress.locationId&&(t[e.currentAddress.locationId]=!0))})}),p.push(...Object.keys(t))}return app.models.location.rawFind({id:{inq:p}},{projection:{name:1}}).then(function(o){const n={},a={};o.forEach(function(e){n[e.id]=e});const r=s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION");return Object.keys(e).forEach(function(o){a[o]={name:e[o].name,records:[]},"place"===t&&(a[o].name="LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==o?_.get(n,`${o}.name`):r),e[o].records.forEach(function(e){e.currentAddress||(e.currentAddress=app.models.person.getCurrentAddress(e)||{locationId:"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"});const t={lastName:_.get(e,"lastName",""),firstName:_.get(e,"firstName",""),middleName:_.get(e,"middleName",""),age:pdfUtils.displayAge(e,s),gender:s.getTranslation(_.get(e,"gender")),location:e.currentAddress&&e.currentAddress.locationId&&"LNG_REPORT_DAILY_FOLLOW_UP_LIST_UNKNOWN_LOCATION"!==e.currentAddress.locationId&&n[e.currentAddress.locationId]?n[e.currentAddress.locationId].name:r,address:app.models.address.getHumanReadableAddress(e.currentAddress),from:moment(_.get(e,"followUp.startDate")).format("YYYY-MM-DD"),to:moment(_.get(e,"followUp.endDate")).format("YYYY-MM-DD"),followUps:e.followUps,followUp:e.followUp};a[o].records.push(t)})}),a})}).then(function(e){const o=app.models.followUp.statusAcronymMap,n={},a={};for(let e in o){const t=s.getTranslation(e),r=s.getTranslation(o[e]);n[e]=r,a[t]=r}const l=[...[{id:"firstName",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_FIRST_NAME"),width:40},{id:"lastName",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_LAST_NAME"),width:40},{id:"middleName",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_MIDDLE_NAME"),width:50},{id:"age",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_AGE"),width:40},{id:"gender",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_GENDER"),width:40}],..."case"===t?[{id:"location",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_LOCATION"),width:40}]:[],...[{id:"address",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_ADDRESS"),width:40},{id:"from",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_FROM"),width:35},{id:"to",header:s.getTranslation("LNG_REPORT_DAILY_FOLLOW_UP_LIST_TO"),width:35}]],p=s.getTranslation("place"===t?"LNG_REPORT_DAILY_FOLLOW_UP_LIST_GROUP_TITLE_LOCATION":"LNG_REPORT_DAILY_FOLLOW_UP_LIST_GROUP_TITLE_CASE"),c=s.getTranslation("LNG_LIST_HEADER_TOTAL"),d=s.getTranslation("LNG_PAGE_TITLE_DAILY_CONTACTS_LIST"),u=s.getTranslation("LNG_FOLLOW_UP_STATUS_LEGEND");let f=!1;!function e(t,o){const s=Object.keys(o);if(!s.length)return r.send({fn:"finish",args:[]});const _=o[s[0]];delete o[s[0]];const h=function(t){if(t[0])return i(t[0]);t[1]&&t[1].readyForNextBatch&&(r.removeListener("message",h),e(l,o))};r.on("message",h);const E={groupTitle:p,totalTitle:c};f||(E.startDocument={title:d,legend:{title:u,values:a}}),r.send({fn:"sendData",args:[E,t,_,n]}),f=!0}(l,e)})}).catch(i)})})},e.prototype.getContactPossibleDuplicates=function(e={},t={},o){app.models.person.findDuplicatesByType(e,this.id,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT",t).then(e=>o(null,e)).catch(o)},e.prototype.getCasePossibleDuplicates=function(e={},t={},o){app.models.person.findDuplicatesByType(e,this.id,"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",t).then(e=>o(null,e)).catch(o)},e.prototype.caseDelayBetweenOnsetAndHospitalizationIsolation=function(e,t){app.models.case.delayBetweenOnsetAndHospitalisationIsolation(this.id,e).then(function(e){t(null,e)}).catch(t)},e.prototype.countCasesStratifiedByOutcomeOverTime=function(e,t){app.models.case.countStratifiedByOutcomeOverTime(this,e).then(function(e){t(null,e)}).catch(t)},e.prototype.countCasesStratifiedByClassificationOverReportingTime=function(e,t){app.models.case.countStratifiedByClassificationOverReportingTime(this,e).then(function(e){t(null,e)}).catch(t)},e.prototype.getContactFollowUpReport=function(e,t,o){let n=t.endDate||_.get(e,"where.endDate",null);_.get(e,"where.endDate")&&delete e.where.endDate,WorkerRunner.getContactFollowUpReport(this.id,t.startDate,n,_.get(e,"where")).then(e=>o(null,e)).catch(o)},e.prototype.getFollowUpsGroupedByContact=function(e,t){app.models.followUp.getOrCountGroupedByPerson(this.id,e,!1,t)},e.prototype.countFollowUpsGroupedByContact=function(e,t){app.models.followUp.getOrCountGroupedByPerson(this.id,e,!0,t)},e.prototype.getBarsTransmissionChains=function(e,t){app.models.person.getBarsTransmissionChainsData(this.id,e,t)},e.prototype.getCaseIsolatedContacts=function(e,t){app.models.case.getIsolatedContacts(e,(e,o)=>e?t(e):t(null,{count:o.length,ids:o.map(e=>e.contact.id)}))},e.prototype.countCasesPerPeriodPerContactStatus=function(e,t){let o,n,s={day:"day",week:"week",month:"month"};void 0!==(o=_.get(e,"where.periodType"))&&delete e.where.periodType,-1===Object.values(s).indexOf(o)&&(o=s.day),void 0!==(n=_.get(e,"where.periodInterval"))?(delete e.where.periodInterval,n[0]=genericHelpers.getDate(n[0]),n[1]=genericHelpers.getDateEndOfDay(n[1])):n=genericHelpers.getPeriodIntervalForDate(void 0,o);let a=this.id,r={totalCasesCount:0,totalCasesNotFromContact:0,totalCasesFromContactWithFollowupComplete:0,totalCasesFromContactWithFollowupLostToFollowup:0,caseIDs:[],caseNotFromContactIDs:[],caseFromContactWithFollowupCompleteIDs:[],caseFromContactWithFollowupLostToFollowupIDs:[],percentageOfCasesWithFollowupData:0,period:[]},i={where:{outbreakId:a,classification:{nin:app.models.case.discardedCaseClassifications},or:[{dateOfReporting:{between:n.slice()},dateBecomeCase:{eq:null}},{dateBecomeCase:{between:n.slice()}}]},order:"dateOfReporting ASC"};const l={LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_FOLLOW_UP_COMPLETED:{counter:"totalCasesFromContactWithFollowupComplete",idContainer:"caseFromContactWithFollowupCompleteIDs"},LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_UNDER_FOLLOW_UP:{counter:"totalCasesFromContactWithFollowupComplete",idContainer:"caseFromContactWithFollowupCompleteIDs"},LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_LOST_TO_FOLLOW_UP:{counter:"totalCasesFromContactWithFollowupLostToFollowup",idContainer:"caseFromContactWithFollowupLostToFollowupIDs"}};app.models.case.find(app.utils.remote.mergeFilters(i,e||{})).then(function(e){let s=genericHelpers.getChunksForInterval(n,o);Object.keys(s).forEach(function(e){Object.assign(s[e],{totalCasesCount:0,totalCasesNotFromContact:0,totalCasesFromContactWithFollowupComplete:0,totalCasesFromContactWithFollowupLostToFollowup:0,caseIDs:[],caseNotFromContactIDs:[],caseFromContactWithFollowupCompleteIDs:[],caseFromContactWithFollowupLostToFollowupIDs:[],percentageOfCasesWithFollowupData:0})}),e.forEach(function(e){let t=e.dateBecomeCase||e.dateOfReporting;let a=genericHelpers.getPeriodIntervalForDate(n,o,t).join(" - ");if(s[a].totalCasesCount++,s[a].caseIDs.push(e.id),r.totalCasesCount++,r.caseIDs.push(e.id),e.dateBecomeCase){let t=_.get(e,"followUp.status",null),o=l[t];o&&(s[a][o.counter]++,s[a][o.idContainer].push(e.id),r[o.counter]++,r[o.idContainer].push(e.id),s[a].percentageOfCasesWithFollowupData=(s[a].totalCasesFromContactWithFollowupComplete+s[a].totalCasesFromContactWithFollowupLostToFollowup)/s[a].totalCasesCount,r.percentageOfCasesWithFollowupData=(r.totalCasesFromContactWithFollowupComplete+r.totalCasesFromContactWithFollowupLostToFollowup)/r.totalCasesCount)}else s[a].totalCasesNotFromContact++,s[a].caseNotFromContactIDs.push(e.id),r.totalCasesNotFromContact++,r.caseNotFromContactIDs.push(e.id)}),r.period=Object.values(s),t(null,r)}).catch(t)},e.prototype.exportDailyContactFollowUpForm=function(e,t,o,n){const s=this,a=function(e,t){n(e,t),n=(()=>{})};app.models.contact.rawFind(app.utils.remote.mergeFilters({where:{outbreakId:s.id}},t||{}).where,{projection:{id:1,firstName:1,middleName:1,lastName:1,gender:1,age:1,addresses:1}}).then(e=>{const t={};return(e||[]).forEach(e=>{t[e.id]=e}),t}).then(e=>{const t=app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:s.id,active:!0},{"persons.id":{$in:Object.keys(e)},"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{$or:[{deleted:!1},{deleted:{$eq:null}}]}]});return app.dataSources.mongoDb.connector.collection("relationship").aggregate([{$match:t},{$unwind:"$persons"},{$match:{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"}},{$group:{_id:"$persons.id",lastContactDate:{$max:"$contactDate"}}}]).toArray().then(t=>((t||[]).forEach(t=>{e[t._id]&&(e[t._id].lastContactDate=genericHelpers.getDate(t.lastContactDate))}),e))}).then(e=>{const t=app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:this.id,personId:{$in:Object.keys(e)}},{$or:[{deleted:!1},{deleted:{$eq:null}}]}]});return app.dataSources.mongoDb.connector.collection("followUp").aggregate([{$match:t},{$sort:{date:-1}},{$group:{_id:"$personId",followUps:{$push:"$$ROOT"}}}]).toArray().then(t=>((t||[]).forEach(t=>{if(!e[t._id]||!e[t._id].lastContactDate)return;const o=e[t._id].lastContactDate.clone().add(1,"days"),n=genericHelpers.getDateEndOfDay(o.clone().add(s.periodOfFollowup,"days"));e[t._id].followUps=_.filter(t.followUps,e=>e.date&&moment(e.date).isBetween(o,n,void 0,"[]"))}),e))}).then(e=>new Promise((t,n)=>{const a=o.remotingContext.req.authData.user.languageId;app.models.language.getLanguageDictionary(a,(o,a)=>{if(o)return n(o);const r={pageTitle:a.getTranslation("LNG_PAGE_LIST_CONTACTS_EXPORT_DAILY_FOLLOW_UP_LIST_TITLE"),contactTitle:a.getTranslation("LNG_PAGE_TITLE_CONTACT_DETAILS"),commentsTitle:a.getTranslation("LNG_DATE_FIELD_LABEL_COMMENTS")},i=[];_.each(e,e=>{const t=[{id:"description",header:""}];if(e.lastContactDate){const o=e.lastContactDate.clone().add(1,"days"),n=genericHelpers.getDateEndOfDay(o.clone().add(s.periodOfFollowup>0?s.periodOfFollowup-1:0,"days"));let a=1;for(let e=o.clone();e.isSameOrBefore(n);e.add(1,"day"))t.push({id:e.format("YYYY-MM-DD"),header:a}),a++}const o=[],n=[e.firstName,e.middleName,e.lastName];let r="";n.forEach(e=>{e&&(r=r+" "+pdfUtils.displayValue(e))});const l=[{label:a.getTranslation("LNG_CONTACT_FIELD_LABEL_NAME"),value:r},{label:a.getTranslation("LNG_REFERENCE_DATA_CATEGORY_GENDER"),value:a.getTranslation(e.gender)},{label:a.getTranslation("LNG_CONTACT_FIELD_LABEL_AGE"),value:pdfUtils.displayAge(e,a)},{label:a.getTranslation("LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE"),value:e.lastContactDate?moment(e.lastContactDate).format("YYYY-MM-DD"):""},{label:a.getTranslation("LNG_CONTACT_FIELD_LABEL_ADDRESSES"),value:app.models.address.getHumanReadableAddress(app.models.person.getCurrentAddress(e))},{label:a.getTranslation("LNG_CONTACT_FIELD_LABEL_PHONE_NUMBER"),value:app.models.person.getCurrentAddress(e)?app.models.person.getCurrentAddress(e).phoneNumber:""}],p=t=>{["LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_FILE_UPLOAD"].indexOf(t.answerType)>=0||(o.push({description:a.getTranslation(t.text)}),(e.followUps||[]).forEach(e=>{const n=moment(e.date).format("YYYY-MM-DD");o[o.length-1][n]||(e.questionnaireAnswers=e.questionnaireAnswers||{},e.questionnaireAnswers=genericHelpers.convertQuestionnaireAnswersToOldFormat(e.questionnaireAnswers),o[o.length-1][n]=genericHelpers.translateQuestionAnswers(t,"LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_DATE_TIME"===t.answerType?e.questionnaireAnswers[t.variable]?moment(e.questionnaireAnswers[t.variable]).format("YYYY-MM-DD"):"":e.questionnaireAnswers[t.variable],a))}),(t.answers||[]).forEach(e=>{(e.additionalQuestions||[]).forEach(e=>{p(e)})}))};s.contactFollowUpTemplate.forEach(e=>{p(e)}),i.push({contactDetails:l,tableHeaders:t,tableData:o})}),t({commonLabels:r,entries:i})})})).then(t=>{const o=fork(`${__dirname}../../../components/workers/buildDailyFollowUpForm`,[],{execArgv:[],windowsHide:!0}),n=function(){const t=new Error(`Processing failed. Worker stopped. Event Details: ${JSON.stringify(arguments)}`);return e.req.logger.error(JSON.stringify(t)),a(t)};["error","exit"].forEach(e=>{o.on(e,n)}),o.on("message",t=>{if(t[0])return a(t[0]);t[1]&&t[1].chunk&&e.write(Buffer.from(t[1].chunk.data)),t[1]&&t[1].end&&(e.end(),["error","exit"].forEach(function(e){o.removeListener(e,n)}),o.kill())}),e.set("Content-type","application/pdf"),e.set("Content-disposition",`attachment;filename=${t.commonLabels.pageTitle}.pdf`),function e(t,n){let s=n.length;if(0===s)return o.send({fn:"finish",args:[]});s>100&&(s=100);const r=n.splice(0,s),i=function(s){if(s[0])return a(s[0]);s[1]&&s[1].readyForNextBatch&&(o.removeListener("message",i),e(t,n))};o.on("message",i),o.send({fn:"sendData",args:[t,r,!n.length]})}(t.commonLabels,t.entries)}).catch(a)},e.prototype.getCaseRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeople(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.countCaseRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeopleCount(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.getContactRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeople(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.countContactRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeopleCount(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.getEventRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeople(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.countEventRelationshipsAvailablePeople=function(e,t,o){app.models.person.getAvailablePeopleCount(this.id,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.setTargetAndSourceForRelationship=function(e,t,o){const n=this.id,s=e=>{o(app.utils.apiError.getError("VALIDATION_ERROR",{model:app.models.relationshipSourceTarget.modelName,details:e}))};return t&&t.sourceId&&t.targetId?t.sourceId===t.targetId?s("SourceId needs to be different from targetId"):void app.models.person.rawFind({outbreakId:n,_id:{inq:[t.sourceId,t.targetId]}}).then(e=>{const o=_.find(e,e=>e.id===t.sourceId),n=_.find(e,e=>e.id===t.targetId);return o?n?{sourceModel:o,targetModel:n}:s("Target model is missing"):s("Source model is missing")}).then(t=>app.models.relationship.findById(e).then(o=>o&&o.id===e?Object.assign(t,{relationshipData:o}):s("Relationship model is missing"))).then(e=>e.relationshipData.updateAttributes({persons:[{id:e.targetModel.id,type:e.targetModel.type,target:!0},{id:e.sourceModel.id,type:e.sourceModel.type,source:!0}]})).then(e=>{o(null,e)}).catch(o):s("Must contain sourceId & targetId")},e.prototype.bulkDeleteRelationships=function(e,t){if(_.isEmpty(e))return t(app.utils.apiError.getError("VALIDATION_ERROR",{model:app.models.relationship.modelName,details:"Where should be a non-empty query"}));const o=e=>{let t;return"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e[0].type?t=e[0].id:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e[1].type&&(t=e[1].id),t};app.models.relationship.rawFind(app.utils.remote.convertLoopbackFilterToMongo({$and:[{deleted:{$ne:!0},outbreakId:this.id},e]}),{projection:{_id:1,persons:1}}).then(e=>{if(_.isEmpty(e))return null;const t=e.reduce((e,t)=>{if(!t.persons||2!==t.persons.length)return e;const n=o(t.persons);return n&&(e.contacts[n]||(e.contacts[n]={deleteRelationships:[],relatedRelationships:[]}),e.contacts[n].deleteRelationships.push(t.id)),e.relationships[t.id]=t,e},{relationships:{},contacts:{}});return _.isEmpty(t.contacts)?{mappedData:t,contactRelationships:[]}:app.models.relationship.rawFind({deleted:{$ne:!0},"persons.id":{$in:Object.keys(t.contacts)}},{projection:{_id:1,persons:1}}).then(e=>({mappedData:t,contactRelationships:e}))}).then(e=>{if(_.isEmpty(e))return null;const t=e.mappedData;if(_.isEmpty(t.contacts))return t.relationships;e.contactRelationships.forEach(e=>{const n=o(e.persons);t.contacts[n].relatedRelationships.push(e.id)});const n=[];if(_.each(t.contacts,(e,t)=>{e.relatedRelationships.length<=e.deleteRelationships.length&&n.push(t)}),!_.isEmpty(n))throw app.utils.apiError.getError("DELETE_CONTACT_LAST_RELATIONSHIP",{contactIDs:n.join(", "),contactIDsArray:n});return t.relationships}).then(e=>_.isEmpty(e)?t(null,0):app.models.relationship.rawBulkDelete({_id:{$in:Object.keys(e)}}).then(e=>{t(null,e&&e.modifiedCount?e.modifiedCount:0)})).catch(t)},e.prototype.bulkChangeTargetRelationships=function(e,t,o){app.models.relationship.bulkChangeSourceOrTarget(this.id,!1,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.bulkChangeSourceRelationships=function(e,t,o){app.models.relationship.bulkChangeSourceOrTarget(this.id,!0,e,t).then(e=>{o(null,e)}).catch(o)},e.prototype.bulkDeleteFollowUps=function(e,t){const o=this.id;(e=e||{}).where=e.where||{},app.models.followUp.destroyAll({and:[{outbreakId:o},e.where]},t)},e.prototype.bulkRestoreFollowUps=function(e,t,o){const n=this.id;(e=e||{}).where=e.where||{},app.models.followUp.find({deleted:!0,where:{and:[{outbreakId:n,deleted:!0},e.where]}}).then(e=>{async.series(e.map(e=>o=>e.undoDelete(t,o)),o)}).catch(o)},e.prototype.importImportableContactLabResultsFileUsingMap=function(e,t,o){const n=this;t._sync=!1,app.models.importableFile.getTemporaryFileById(e.fileId,function(s,a){if(s)return o(s);try{const r=JSON.parse(a),i=app.utils.helpers.convertBooleanProperties(app.models.labResult,app.utils.helpers.remapProperties(r,e.map,e.valuesMap)),l=[],p=[];p.toString=function(){return JSON.stringify(this)},i.forEach(function(e,o){l.push(function(s){e.questionnaireAnswers&&(e.questionnaireAnswers=genericHelpers.convertQuestionnaireAnswersToNewFormat(e.questionnaireAnswers)),app.models.contact.findOne({where:{or:[{id:e.personId},{visualId:e.personId}],outbreakId:n.id}}).then(function(o){if(!o)throw app.utils.apiError.getError("PERSON_NOT_FOUND",{model:app.models.case.modelName,id:e.personId});return e.personId=o.id,e.outbreakId=n.id,app.utils.dbSync.syncRecord(t.remotingContext.req.logger,app.models.labResult,e,t).then(function(e){s(null,e.record)})}).catch(function(t){p.push({message:`Failed to import lab result ${o+1}`,error:t,recordNo:o+1,data:{file:r[o],save:e}}),s(null,null)})})}),async.parallelLimit(l,10,function(e,t){return e?o(e):p.length?((t=t.filter(e=>null!==e)).toString=function(){return JSON.stringify(this)},o(app.utils.apiError.getError("IMPORT_PARTIAL_SUCCESS",{model:app.models.labResult.modelName,failed:p,success:t}))):void o(null,t)})}catch(s){o(app.utils.apiError.getError("INVALID_CONTENT_OF_TYPE",{contentType:"JSON",details:s.message}))}})},e.prototype.restoreContactLabResult=function(e,t,o,n){app.models.labResult.findOne({deleted:!0,where:{id:t,personId:e,deleted:!0}}).then(function(e){if(!e)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.labResult.modelName,id:t});e.undoDelete(o,n)}).catch(n)}};
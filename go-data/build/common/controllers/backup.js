"use strict";const app=require("../../server/server"),backup=require("../../components/backup"),helpers=require("../../components/helpers"),path=require("path");module.exports=function(e){app.utils.remote.disableRemoteMethods(e,["create","prototype.patchAttributes","deleteById"]),e.createManualBackup=function(e,t,r){const o=app.models.backup;e=e||{};let a=t.accessToken.userId,p=Promise.resolve();e.location&&e.modules||(p=app.models.systemSettings.getCache().then(function(e){return e||Promise.reject(app.utils.apiError.getError("INTERNAL_ERROR",{error:"System Settings were not found"}))})),p.then(function(t){let p,s=e.location||t.dataBackup.location,c=e.modules||t.dataBackup.modules;try{p=path.resolve(s),helpers.isPathOK(p)}catch(e){return Promise.reject(app.utils.apiError.getError("REQUEST_VALIDATION_ERROR_INVALID_BACKUP_LOCATION",{errorMessages:`Configured backup location '${s}' is not accessible for read/write`,backupLocation:{path:s,resolvedPath:p,error:e}}))}o.createBackup(s,c,a,r)}).catch(function(e){return r(e)})},e.prototype.restoreBackup=function(e){backup.restore(this.id,t=>t?e(t):e())},e.prototype.removeBackup=function(e){const t=app.models.backup,r=this.id;t.findOne({where:{id:r}}).then(o=>{if(!o)return e(app.utils.apiError.getError("MODEL_NOT_FOUND",{model:t.modelName,id:r}));backup.remove(o,e)}).catch(t=>e(t))},e.afterRemote("find",function(e,t,r){(t||[]).forEach(e=>{app.models.backup.attachCustomProperties(e)}),r()})};
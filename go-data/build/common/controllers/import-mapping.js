"use strict";const app=require("../../server/server"),_=require("lodash");module.exports=function(e){app.utils.remote.disableRemoteMethods(e,["prototype.__get__owner"]),e.beforeRemote("create",function(e,t,r){e.args.data.userId=e.req.authData.user.id,r()}),e.beforeRemote("find",function(t,r,a){t.args.filter=e.helpers.retrieveOnlyAllowedRecords(t.req.authData.user.id,t.args.filter),a()}),e.beforeRemote("count",function(t,r,a){t.args.where=e.helpers.retrieveOnlyAllowedRecords(t.req.authData.user.id,{where:_.get(t,"args.where",{})}).where,a()}),e.afterRemote("find",function(t,r,a){r.forEach(r=>{e.helpers.attachCustomProperties(t.req.authData.user.id,r)}),a()}),e.afterRemote("findById",function(t,r,a){e.helpers.attachCustomProperties(t.req.authData.user.id,r),a()}),e.afterRemote("create",function(t,r,a){e.helpers.attachCustomProperties(t.req.authData.user.id,r),a()}),e.afterRemote("prototype.patchAttributes",function(t,r,a){e.helpers.attachCustomProperties(t.req.authData.user.id,r),a()}),e.beforeRemote("prototype.patchAttributes",function(t,r,a){e.helpers.isReadOnly(t.req.authData.user.id,t.instance)?a(app.utils.apiError.getError("ACCESS_DENIED",{accessErrors:"Client is not allowed to change this record"},403)):a()}),e.beforeRemote("deleteById",function(t,r,a){e.findById(t.args.id).then(r=>{e.helpers.isReadOnly(t.req.authData.user.id,r)?a(app.utils.apiError.getError("ACCESS_DENIED",{accessErrors:"Client is not allowed to delete this record"},403)):a()})})};
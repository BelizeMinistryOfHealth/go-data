"use strict";const app=require("../../server/server"),moment=require("moment"),_=require("lodash"),helpers=require("../../components/helpers"),FollowupGeneration=require("../../components/followupGeneration"),RoundRobin=require("rr"),Timer=require("../../components/Timer"),Uuid=require("uuid");module.exports=function(e){e.hasController=!1,e.statusAcronymMap={LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_PERFORMED:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_PERFORMED_ACRONYM",LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_OK:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_OK_ACRONYM",LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_NOT_OK:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_NOT_OK_ACRONYM",LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_MISSED:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_MISSED_ACRONYM",LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_ATTEMPTED:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_ATTEMPTED_ACRONYM"},e.seenFilter={or:[{statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_OK"},{statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_NOT_OK"}]},e.notSeenFilter={or:[{statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_PERFORMED"},{statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_MISSED"},{statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_NOT_ATTEMPTED"}]},e.isPerformed=function(e){return["LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_OK","LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE_SEEN_NOT_OK"].indexOf(e.statusId)>=0},e.fieldLabelsMap=Object.assign({},e.fieldLabelsMap,{contact:"LNG_FOLLOW_UP_FIELD_LABEL_CONTACT","contact.id":"LNG_FOLLOW_UP_FIELD_LABEL_CONTACT_ID","contact.visualId":"LNG_FOLLOW_UP_FIELD_LABEL_CONTACT_VISUAL_ID","contact.firstName":"LNG_FOLLOW_UP_FIELD_LABEL_CONTACT_FIRST_NAME","contact.lastName":"LNG_FOLLOW_UP_FIELD_LABEL_CONTACT_LAST_NAME",date:"LNG_FOLLOW_UP_FIELD_LABEL_DATE",address:"LNG_FOLLOW_UP_FIELD_LABEL_ADDRESS","address.typeId":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_TYPEID","address.country":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_COUNTRY","address.city":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_CITY","address.addressLine1":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_1","address.addressLine2":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_2","address.postalCode":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_POSTAL_CODE","address.locationId":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_LOCATION_ID","address.geoLocation":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION","address.geoLocation.lat":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_LAT","address.geoLocation.lng":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_LNG","address.geoLocationAccurate":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_ACCURATE","address.date":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_DATE",fillLocation:"LNG_FOLLOW_UP_FIELD_LABEL_FILL_LOCATION","fillLocation.geoLocation":"LNG_FILL_LOCATION_FIELD_LABEL_GEO_LOCATION","fillLocation.geoLocation.lat":"LNG_FILL_LOCATION_FIELD_LABEL_GEO_LOCATION_LAT","fillLocation.geoLocation.lng":"LNG_FILL_LOCATION_FIELD_LABEL_GEO_LOCATION_LNG",index:"LNG_FOLLOW_UP_FIELD_LABEL_INDEX",teamId:"LNG_FOLLOW_UP_FIELD_LABEL_TEAM",statusId:"LNG_FOLLOW_UP_FIELD_LABEL_STATUSID",isGenerated:"LNG_FOLLOW_UP_FIELD_LABEL_IS_GENERATED",targeted:"LNG_FOLLOW_UP_FIELD_LABEL_TARGETED",comment:"LNG_FOLLOW_UP_FIELD_LABEL_COMMENT",questionnaireAnswers:"LNG_FOLLOW_UP_FIELD_LABEL_QUESTIONNAIRE_ANSWERS"}),e.referenceDataFieldsToCategoryMap={"address.typeId":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_TYPE",statusId:"LNG_REFERENCE_DATA_CONTACT_DAILY_FOLLOW_UP_STATUS_TYPE"},e.referenceDataFields=Object.keys(e.referenceDataFieldsToCategoryMap),e.nestedGeoPoints=["address.geoLocation","fillLocation.geoLocation"],e.printFieldsinOrder=["date","statusId","targeted","address","index","teamId"],e.locationFields=["address.locationId"],e.foreignKeyResolverMap={"address.locationId":{modelName:"location",useProperty:"name"},personId:{modelName:"contact",useProperty:["id","visualId","firstName","lastName"]},teamId:{modelName:"team",useProperty:"name"}},e.extendedForm={template:"contactFollowUpTemplate",containerProperty:"questionnaireAnswers",isBasicArray:e=>"LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_MULTIPLE_ANSWERS"===e.answerType},e.observe("loaded",function(e,t){var o;(o=e.data,o.address&&o.address.locationId||!o.personId?Promise.resolve():app.models.person.findById(o.personId).then(e=>{if(!e)return;let t=e.getCurrentAddress();t&&(o.address=t)})).then(()=>t()).catch(t)}),e.observe("before save",function(e,t){const o=e.isNewInstance?e.instance:e.data;helpers.sortMultiAnswerQuestions(o);let n=_.get(e,"options.remotingContext.instance");n&&(n instanceof app.models.outbreak||(n=void 0)),helpers.convertQuestionStringDatesToDates(o,n?n.contactFollowUpTemplate:null).then(()=>{(function(e){return!e.isNewInstance||e.options&&e.options._sync?Promise.resolve():app.models.person.findById(e.instance.personId).then(t=>{if(!t)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.person.modelName,id:e.instance.personId});if(!t.followUp)throw app.utils.apiError.getError("INTERNAL_ERROR",{error:`Contact record (id: '${t.id}) missing follow-up interval information`});e.instance.index=helpers.getDaysSince(moment(t.followUp.startDate),e.instance.date)+1})})(e).then(()=>(function(e){const t=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);if(_.get(t,"source.all.address.locationId"))return Promise.resolve();const o=_.get(t,"source.all.personId");return o?app.models.person.findById(o).then(e=>{if(!e)return;let o=e.getCurrentAddress();o&&_.set(t,"target.address",o)}):Promise.resolve()})(e)).then(()=>(function(e){if(!e.isNewInstance||e.options&&e.options._sync)return Promise.resolve();const t=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);if(_.get(t,"source.all.teamId"))return Promise.resolve();const o=_.get(t,"source.all.personId");return o?app.models.person.findById(o).then(e=>{if(e)return FollowupGeneration.getAllTeamsWithLocationsIncluded().then(o=>FollowupGeneration.getContactFollowupEligibleTeams(e,o).then(e=>{_.set(t,"target.teamId",RoundRobin(e))}))}):Promise.resolve()})(e)).then(()=>t()).catch(t)}).catch(t)}),e.countContacts=function(t,o){let n,r;return o&&(n=_.get(o,"where.date"),_.unset(o,"where.date")),n?n.setHours(0,0,0,0):(n=new Date).setHours(0,0,0,0),(r=new Date(n)).setHours(23,59,59,999),e.find(app.utils.remote.mergeFilters({where:{outbreakId:t,date:{between:[n,r]}}},o||{})).then(function(e){e=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(e,o);let t={};e.forEach(function(e){t[e.personId]||(t[e.personId]=!0)});let _=Object.keys(t);return{contactsCount:_.length,followUpsCount:e.length,contactIDs:_}})},e.countByTeam=function(t,o){const _=Uuid.v4(),n=new Timer;n.start(),(o=o||{}).where=o.where||{};let r=app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:t},o.where]});o.deleted||(r={$and:[r,{deleted:{$ne:!0}}]});const a=[];return a.push({$match:r}),a.push({$group:{_id:"$teamId",count:{$sum:1}}}),a.push({$lookup:{from:"team",localField:"_id",foreignField:"_id",as:"team"}}),app.logger.info(`[QueryId: ${_}] Performing MongoDB aggregate request on collection '${e.modelName}': aggregate ${JSON.stringify(a)}`),app.dataSources.mongoDb.connector.collection(e.modelName).aggregate(a).toArray().then(e=>{app.logger.info(`[QueryId: ${_}] MongoDB request completed after ${n.getElapsedMilliseconds()} msec`),e=e||[];const t={team:{},count:0};for(let o of e)Array.isArray(o.team)&&o.team.length?o.team=o.team[0]:o.team="",o.id=o._id||"",delete o._id,t.team[o.id]={team:o.team,count:o.count},t.count+=o.count;return t})},e.preFilterForOutbreak=function(e,t){t=t||{};let o=_.get(t,"where.case");o&&delete t.where.case;let n=_.get(t,"where.contact");n&&delete t.where.contact;let r=_.get(t,"where.timeLastSeen");null!=r&&delete t.where.timeLastSeen;let a=_.get(t,"where.weekNumber");null!=a&&delete t.where.weekNumber;let s,i=_.get(t,"where",{}),E=Promise.resolve();return o&&(o={$and:[o,{outbreakId:e.id}]},E=E.then(function(){return app.models.case.rawFind(o,{projection:{_id:1}}).then(function(t){const o=t.map(e=>e.id);return app.models.relationship.rawFind({outbreakId:e.id,"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","persons.id":{$in:o}},{projection:{persons:1}})}).then(function(e){s=[],e.forEach(function(e){e.persons.forEach(function(e){"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type&&s.push(e.id)})})})})),null!=r&&(E=E.then(function(){return app.models.followUp.rawFind({outbreakId:e.id,performed:!0,date:{$gt:r}},{projection:{personId:1}}).then(function(e){n||(n={}),n={$and:[n,{_id:{$nin:e.map(e=>e.personId)}}]}})})),E.then(function(){if(s&&(n||(n={}),n={$and:[n,{_id:{$in:s}}]}),n)return n={$and:[n,{outbreakId:e.id}]},app.models.contact.rawFind(n,{projection:{_id:1}}).then(function(e){i={and:[i,{personId:{inq:e.map(e=>e.id)}}]}})}).then(function(){return i={and:[i,{outbreakId:e.id}]},null!=a&&i.and.push({index:{between:[7*(a-1)+1,7*a]}}),Object.assign(t,{where:i})})},e.getOrCountGroupedByPerson=function(e,t,o,n){(t=t||{}).where=t.where||{};let r=Promise.resolve();if(!_.isEmpty(t.where.contact)){const o={$and:[{outbreakId:e},t.where.contact]};r=r.then(()=>app.models.contact.rawFind(app.utils.remote.convertLoopbackFilterToMongo(o),{projection:{_id:1}})),delete t.where.contact}r.then(r=>{const a=app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:e},{$or:[{deleted:!1},{deleted:{$eq:null}}]},...void 0===r?[]:[{personId:{$in:Array.from(new Set((r||[]).map(e=>e.id)))}}],t.where]}),s={ASC:1,DESC:-1},i={};Array.isArray(t.order)&&t.order.forEach(e=>{const t=e.split(" ");2===t.length&&(t[1]=t[1].toUpperCase(),s.hasOwnProperty(t[1])&&(i[t[0]]=s[t[1]]))});const E=[{$match:a},{$group:{_id:"$personId",followUps:{$push:"$$ROOT"}}}];o||(E.push({$lookup:{from:"person",localField:"_id",foreignField:"_id",as:"contacts"}},{$project:{_id:0,contact:{$arrayElemAt:["$contacts",0]},followUps:1}},{$match:{$or:[{"contact.deleted":!1},{"contact.deleted":{$eq:null}}]}}),Object.keys(i).length&&E.push({$sort:i}),isNaN(t.skip)||E.push({$skip:t.skip}),isNaN(t.limit)||E.push({$limit:t.limit})),app.dataSources.mongoDb.connector.collection("followUp").aggregate(E).toArray().then(e=>{if(o)return n(null,{count:e.length});let t={};return e.forEach(e=>{if(e.contact&&(e.contact.id=e.contact._id,delete e.contact._id,!_.isEmpty(e.contact.addresses))){const o=e.contact.addresses.find(e=>"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId);_.isEmpty(o.locationId)||(t[o.locationId]=!0)}Array.isArray(e.followUps)&&e.followUps.forEach(e=>{e.id=e._id,delete e._id})}),t=Object.keys(t),_.isEmpty(t)?n(null,e):app.models.location.rawFind({id:{$in:t}}).then(t=>{const o=_.transform(t,(e,t)=>{e[t.id]=t},{});return e.forEach(e=>{if(!_.isEmpty(e.contact.addresses)){const t=e.contact.addresses.find(e=>"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId);!_.isEmpty(t.locationId)&&o[t.locationId]&&(t.location=o[t.locationId])}}),n(null,e)})}).catch(n)})},e.findAggregate=((t,o)=>{let _=[];return o||_.push({lookup:{from:"person",localField:"personId",foreignField:"_id",as:"contact"},unwind:!0}),app.models.followUp.rawFindAggregate(t,{countOnly:o,relations:_}).then(t=>o?t:((t||[]).forEach(t=>{t.contact&&(t.contact.id=t.contact._id,delete t.contact._id),e.prepareDataForRead({data:t})}),t))}),e.migrate=((t,o)=>{app.models.outbreak.find({},{projection:{_id:1,contactFollowUpTemplate:1}}).then(n=>{const r=_.transform(n,(e,t)=>{e[t.id]=t.contactFollowUpTemplate},{});helpers.migrateModelDataInBatches(e,(e,o)=>{if(_.isEmpty(e.questionnaireAnswers))o();else{const n=_.cloneDeep(e.questionnaireAnswers);helpers.convertQuestionStringDatesToDates(e,r[e.outbreakId]).then(()=>{_.isEqual(e.questionnaireAnswers,n)?o():e.updateAttributes({questionnaireAnswers:e.questionnaireAnswers},t).then(()=>o()).catch(o)}).catch(o)}}).then(()=>o()).catch(o)}).catch(o)})};
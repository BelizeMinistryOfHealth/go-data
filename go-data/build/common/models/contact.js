"use strict";const app=require("../../server/server"),dateParser=app.utils.helpers.getDateDisplayValue,_=require("lodash"),helpers=require("../../components/helpers");module.exports=function(e){e.hasController=!1,e.helpers={},e.helpers.sanitizeFieldLabelsMapForExport=(()=>{const L={};return Object.assign(L,e.fieldLabelsMap,_.transform({relatedId:"LNG_RELATIONSHIP_FIELD_LABEL_PERSONS_RELATED_PERSON",contactDate:"LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE",contactDateEstimated:"LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE_ESTIMATED",certaintyLevelId:"LNG_RELATIONSHIP_FIELD_LABEL_CERTAINTY_LEVEL",exposureTypeId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_TYPE",exposureFrequencyId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_FREQUENCY",exposureDurationId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_DURATION",socialRelationshipTypeId:"LNG_RELATIONSHIP_FIELD_LABEL_RELATION",socialRelationshipDetail:"LNG_RELATIONSHIP_FIELD_LABEL_RELATION_DETAIL",clusterId:"LNG_RELATIONSHIP_FIELD_LABEL_CLUSTER",comment:"LNG_RELATIONSHIP_FIELD_LABEL_COMMENT",id:"LNG_COMMON_MODEL_FIELD_LABEL_ID",createdAt:"LNG_COMMON_MODEL_FIELD_LABEL_CREATED_AT",createdBy:"LNG_COMMON_MODEL_FIELD_LABEL_CREATED_BY",updatedAt:"LNG_COMMON_MODEL_FIELD_LABEL_UPDATED_AT",updatedBy:"LNG_COMMON_MODEL_FIELD_LABEL_UPDATED_BY",deleted:"LNG_COMMON_MODEL_FIELD_LABEL_DELETED",deletedAt:"LNG_COMMON_MODEL_FIELD_LABEL_DELETED_AT"},(e,_,L)=>{e[`relationship.${L}`]=_},{}),{relationship:"LNG_CONTACT_FIELD_LABEL_RELATIONSHIP"}),L}),e.fieldLabelsMap=Object.assign({},e.fieldLabelsMap,{firstName:"LNG_CONTACT_FIELD_LABEL_FIRST_NAME",middleName:"LNG_CONTACT_FIELD_LABEL_MIDDLE_NAME",lastName:"LNG_CONTACT_FIELD_LABEL_LAST_NAME",gender:"LNG_CONTACT_FIELD_LABEL_GENDER",occupation:"LNG_CONTACT_FIELD_LABEL_OCCUPATION",age:"LNG_CONTACT_FIELD_LABEL_AGE","age.years":"LNG_CONTACT_FIELD_LABEL_AGE_YEARS","age.months":"LNG_CONTACT_FIELD_LABEL_AGE_MONTHS",followUp:"LNG_CONTACT_FIELD_LABEL_FOLLOW_UP","followUp.originalStartDate":"LNG_CONTACT_FIELD_LABEL_FOLLOW_UP_ORIGINAL_START_DATE","followUp.startDate":"LNG_CONTACT_FIELD_LABEL_FOLLOW_UP_START_DATE","followUp.endDate":"LNG_CONTACT_FIELD_LABEL_FOLLOW_UP_END_DATE","followUp.status":"LNG_CONTACT_FIELD_LABEL_FOLLOW_UP_STATUS",dob:"LNG_CONTACT_FIELD_LABEL_DOB",documents:"LNG_CONTACT_FIELD_LABEL_DOCUMENTS","documents[].type":"LNG_CONTACT_FIELD_LABEL_DOCUMENT_TYPE","documents[].number":"LNG_CONTACT_FIELD_LABEL_DOCUMENT_NUMBER",wasCase:"LNG_CONTACT_FIELD_LABEL_WAS_CASE",dateBecomeContact:"LNG_CONTACT_FIELD_LABEL_DATE_BECOME_CONTACT",dateOfReporting:"LNG_CONTACT_FIELD_LABEL_DATE_OF_REPORTING",dateOfLastContact:"LNG_CONTACT_FIELD_LABEL_DATE_OF_LAST_CONTACT",riskLevel:"LNG_CONTACT_FIELD_LABEL_RISK_LEVEL",riskReason:"LNG_CONTACT_FIELD_LABEL_RISK_REASON",outcomeId:"LNG_CONTACT_FIELD_LABEL_OUTCOME_ID",dateOfOutcome:"LNG_CONTACT_FIELD_LABEL_DATE_OF_OUTCOME",visualId:"LNG_CONTACT_FIELD_LABEL_VISUAL_ID",type:"LNG_CONTACT_FIELD_LABEL_TYPE",addresses:"LNG_CASE_FIELD_LABEL_ADDRESSES","addresses[].typeId":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_TYPEID","addresses[].country":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_COUNTRY","addresses[].city":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_CITY","addresses[].addressLine1":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_1","addresses[].addressLine2":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_2","addresses[].postalCode":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_POSTAL_CODE","addresses[].locationId":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_LOCATION_ID","addresses[].geoLocation":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION","addresses[].geoLocation.lat":"LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LAT","addresses[].geoLocation.lng":"LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LNG","addresses[].geoLocationAccurate":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_ACCURATE","addresses[].date":"LNG_ADDRESS_FIELD_LABEL_ADDRESS_DATE","addresses[].phoneNumber":"LNG_ADDRESS_FIELD_LABEL_PHONE_NUMBER",isDateOfReportingApproximate:"LNG_CONTACT_FIELD_LABEL_IS_DATE_OF_REPORTING_APPROXIMATE",safeBurial:"LNG_CONTACT_FIELD_LABEL_SAFE_BURIAL",dateOfBurial:"LNG_CONTACT_FIELD_LABEL_DATE_OF_BURIAL",vaccinesReceived:"LNG_CONTACT_FIELD_LABEL_VACCINES_RECEIVED","vaccinesReceived[].vaccine":"LNG_CONTACT_FIELD_LABEL_VACCINE","vaccinesReceived[].date":"LNG_CONTACT_FIELD_LABEL_VACCINE_DATE","vaccinesReceived[].status":"LNG_CONTACT_FIELD_LABEL_VACCINE_STATUS",pregnancyStatus:"LNG_CONTACT_FIELD_LABEL_PREGNANCY_STATUS"}),e.exportFieldsOrder=["id","visualId","dateOfReporting","isDateOfReportingApproximate"],e.arrayProps={addresses:{typeId:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_TYPEID",country:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_COUNTRY",city:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_CITY",addressLine1:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_1",addressLine2:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_2",postalCode:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_POSTAL_CODE",locationId:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_LOCATION_ID",geoLocation:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION","geoLocation.lat":"LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LAT","geoLocation.lng":"LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LNG",geoLocationAccurate:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_ACCURATE",date:"LNG_ADDRESS_FIELD_LABEL_ADDRESS_DATE",phoneNumber:"LNG_ADDRESS_FIELD_LABEL_PHONE_NUMBER"},documents:{type:"LNG_CONTACT_FIELD_LABEL_DOCUMENT_TYPE",number:"LNG_CONTACT_FIELD_LABEL_DOCUMENT_NUMBER"},vaccinesReceived:{vaccine:"LNG_CONTACT_FIELD_LABEL_VACCINE",date:"LNG_CONTACT_FIELD_LABEL_VACCINE_DATE",status:"LNG_CONTACT_FIELD_LABEL_VACCINE_STATUS"}},e.sectionsFieldLabels={personalInformation:{title:"LNG_CONTACT_PERSONAL_SECTION",labels:["LNG_CONTACT_FIELD_LABEL_VISUAL_ID","LNG_CONTACT_FIELD_LABEL_FIRST_NAME","LNG_CONTACT_FIELD_LABEL_MIDDLE_NAME","LNG_CONTACT_FIELD_LABEL_LAST_NAME","LNG_CONTACT_FIELD_LABEL_GENDER","LNG_CONTACT_FIELD_LABEL_OCCUPATION","LNG_CONTACT_FIELD_LABEL_AGE","LNG_CONTACT_FIELD_LABEL_DOB","LNG_CONTACT_FIELD_LABEL_DATE_OF_REPORTING","LNG_CONTACT_FIELD_LABEL_IS_DATE_OF_REPORTING_APPROXIMATE","LNG_CONTACT_FIELD_LABEL_RISK_LEVEL","LNG_CONTACT_FIELD_LABEL_RISK_REASON"]},addresses:{title:"LNG_CONTACT_FIELD_LABEL_ADDRESSES",labels:["LNG_ADDRESS_FIELD_LABEL_ADDRESS_TYPEID","LNG_ADDRESS_FIELD_LABEL_ADDRESS_COUNTRY","LNG_ADDRESS_FIELD_LABEL_ADDRESS_CITY","LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_1","LNG_ADDRESS_FIELD_LABEL_ADDRESS_ADDRESS_LINE_2","LNG_ADDRESS_FIELD_LABEL_ADDRESS_POSTAL_CODE","LNG_ADDRESS_FIELD_LABEL_ADDRESS_LOCATION_ID","LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION","LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LAT","LNG_LOCATION_FIELD_LABEL_GEO_LOCATION_LNG","LNG_ADDRESS_FIELD_LABEL_ADDRESS_GEO_LOCATION_ACCURATE","LNG_ADDRESS_FIELD_LABEL_ADDRESS_DATE","LNG_ADDRESS_FIELD_LABEL_PHONE_NUMBER"]},documents:{title:"LNG_CONTACT_FIELD_LABEL_DOCUMENTS",labels:["LNG_CONTACT_FIELD_LABEL_DOCUMENT_TYPE","LNG_CONTACT_FIELD_LABEL_DOCUMENT_NUMBER"]}},e.referenceDataFieldsToCategoryMap={type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE",riskLevel:"LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL",gender:"LNG_REFERENCE_DATA_CATEGORY_GENDER",occupation:"LNG_REFERENCE_DATA_CATEGORY_OCCUPATION",outcomeId:"LNG_REFERENCE_DATA_CATEGORY_OUTCOME",pregnancyStatus:"LNG_REFERENCE_DATA_CATEGORY_PREGNANCY_STATUS","documents[].type":"LNG_REFERENCE_DATA_CATEGORY_DOCUMENT_TYPE","addresses[].typeId":"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE","vaccinesReceived[].vaccine":"LNG_REFERENCE_DATA_CATEGORY_VACCINE","vaccinesReceived[].status":"LNG_REFERENCE_DATA_CATEGORY_VACCINE_STATUS","followUp.status":"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE"},e.referenceDataFields=Object.keys(e.referenceDataFieldsToCategoryMap),e.fieldToValueParsersMap={dob:dateParser,dateOfOutcome:dateParser,dateOfBurial:dateParser,"addresses[].date":dateParser,"followUps[].date":dateParser},e.fieldsToParse=Object.keys(e.fieldToValueParsersMap),e.printFieldsinOrder=["visualId","firstName","middleName","lastName","gender","dob","age","occupation","addresses","documents","riskLevel","riskReason","wasCase","outcomeId","dateOfOutcome","dateBecomeContact","safeBurial","dateOfBurial","vaccinesReceived","pregnancyStatus","dateOfReporting","isDateOfReportingApproximate"],e.locationFields=["addresses[].locationId"],e.foreignKeyResolverMap={"addresses[].locationId":{modelName:"location",useProperty:"name"},"followUps[].address.locationId":{modelName:"location",useProperty:"name"},"followUps[].teamId":{modelName:"team",useProperty:"name"},"relationships[].clusterId":{modelName:"cluster",useProperty:"name"},"relationships[].people[].addresses[].locationId":{modelName:"location",useProperty:"name"},"relationships[].people[].address.locationId":{modelName:"location",useProperty:"name"},"relationships[].people[].burialLocationId":{modelName:"location",useProperty:"name"},"relationships[].people[].dateRanges[].locationId":{modelName:"location",useProperty:"name"}},e.nestedGeoPoints=["addresses[].geoLocation"],e.updateFollowUpDatesIfNeeded=function(e){if(app.utils.helpers.getValueFromContextOptions(e,"updateFollowUpDatesIfNeeded"))return Promise.resolve();let L,E=e.instance;return app.models.relationship.findOne({order:"contactDate DESC",where:{"persons.id":E.id,active:!0}}).then(function(e){return L=e,app.models.outbreak.findById(E.outbreakId)}).then(function(t){if(!t)throw app.logger.error(`Error when updating contact (id: ${E.id}) follow-up dates. Outbreak (id: ${E.outbreakId}) was not found.`);let A=!1;const a=_.get(E,"followUp.status"),o={status:a||"LNG_REFERENCE_DATA_CONTACT_FINAL_FOLLOW_UP_STATUS_TYPE_UNDER_FOLLOW_UP"};if(E.followUp&&E.followUp.originalStartDate&&(o.originalStartDate=E.followUp.originalStartDate),L&&(o.startDate=helpers.getDate(L.contactDate).add(1,"days"),o.originalStartDate||(A=!0,o.originalStartDate=helpers.getDate(o.startDate)),o.endDate=helpers.getDate(o.startDate).add(t.periodOfFollowup-1,"days")),!A&&["startDate","endDate"].forEach(function(e){return E.followUp?!E.followUp[e]&&o[e]||E.followUp[e]&&!o[e]?A=!0:E.followUp[e]&&o[e]&&new Date(E.followUp[e]).getTime()!==new Date(o[e]).getTime()?A=!0:void 0:A=!0}),A)return app.utils.helpers.setValueInContextOptions(e,"updateFollowUpDatesIfNeeded",!0),E.updateAttributes({followUp:o,active:!!o.startDate},e.options)})},e.observe("after save",function(_,L){_.isNewInstance?L():e.updateFollowUpDatesIfNeeded(_).then(function(){L()}).catch(L)}),e.getGroupedByDate=function(L,E,t){let A=[];if(A="object"==typeof E&&E.startDate&&E.endDate?[helpers.getDate(E.startDate),helpers.getDateEndOfDay(E.endDate)]:"string"==typeof E?[helpers.getDate(E),helpers.getDateEndOfDay(E)]:[helpers.getDate(),helpers.getDateEndOfDay()],"case"===t){let E={where:{outbreakId:L.id},include:[{relation:"followUps",scope:{where:{date:{between:A}},filterParent:!0}},{relation:"relationships",scope:{where:{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"},order:"contactDate DESC",limit:1,filterParent:!0,include:[{relation:"people",scope:{where:{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"}}}]}}]};return e.find(E).then(e=>(e=(e=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(e,E)).map(e=>{let _=e.relationships[0].persons.find(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===e.type);return e.caseId=_?_.id:null,e}),Promise.all(e.map(e=>{let _=app.models.person.getCurrentAddress(e);return _&&_.locationId?app.models.location.findById(_.locationId).then(L=>(L&&(_.locationName=L.name),e)):e})).then(e=>_.groupBy(e,e=>e.caseId))))}if("riskLevel"===t)return app.models.followUp.rawFind({date:{between:A},outbreakId:L.id},{order:{date:1}}).then(function(e){const _={};return e.forEach(function(e){_[e.personId]||(_[e.personId]=[]),_[e.personId].push(e)}),app.models.contact.rawFind({_id:{inq:Array.from(new Set(Object.keys(_)))},outbreakId:L.id}).then(function(e){const L={};e.forEach(function(e){e.followUps=_[e.id],null==e.riskLevel&&(e.riskLevel="LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_UNCLASSIFIED"),L[e.riskLevel]||(L[e.riskLevel]=[]),L[e.riskLevel].push(e)});const E={};return Object.keys(L).sort().forEach(function(e){E[e]=L[e]}),E})});let a={dateOfFollowUp:E};return"object"==typeof E&&(a={startDate:E.startDate,endDate:E.endDate}),app.models.person.getPeoplePerLocation("contact",a,L).then(e=>{let _={};return e.peopleDistribution.forEach(e=>{e.people.length&&(_[e.location.name]=e.people)}),_})},e.preFilterForOutbreak=function(e,L){L=L||{};let E=_.get(L,"where.case");E&&delete L.where.case;let t=_.get(L,"where.followUp");t&&delete L.where.followUp;let A=_.get(L,"where",{}),a=Promise.resolve();return E&&(E={$and:[E,{outbreakId:e.id}]},a=a.then(function(){return app.models.case.rawFind(E,{projection:{_id:1}}).then(function(_){return app.models.relationship.rawFind({outbreakId:e.id,"persons.id":{$in:_.map(e=>e.id)},"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{projection:{persons:1}}).then(function(e){let _=[];return e.forEach(function(e){Array.isArray(e.persons)&&e.persons.forEach(function(e){"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type&&_.push(e.id)})}),A={and:[A,{id:{inq:_}}]},_})})})),t&&(a=a.then(function(_){return t={$and:[t,{outbreakId:e.id}]},_&&t.$and.push({personId:{$in:_}}),app.models.followUp.rawFind(t,{projection:{personId:1}}).then(function(e){A={and:[A,{id:{inq:e.map(e=>e.personId)}}]}})})),a.then(function(){return A={and:[A,{outbreakId:e.id}]},Object.assign(L,{where:A})})},e.observe("before save",function(e,_){!function(e){const _=app.utils.helpers.getSourceAndTargetFromModelHookContext(e),L=_.source.all;if(!L.followUp)return;let E;Array.isArray(L.followUpHistory)&&L.followUpHistory.length&&(E=L.followUpHistory.find(e=>null==e.endDate)),E?(L.followUp.status!==E.status&&(E.endDate=new Date,L.followUpHistory.push({status:L.followUp.status,startDate:E.endDate})),_.target.followUpHistory=L.followUpHistory):(_.target.followUpHistory=L.followUpHistory,Array.isArray(_.target.followUpHistory)||(_.target.followUpHistory=[]),_.target.followUpHistory.push({status:L.followUp.status,startDate:new Date}))}(e),_()})};
"use strict";const app=require("../../server/server"),backupHelper=require("../../components/backup"),fs=require("fs");module.exports=function(e){e.hasController=!0,e.status={SUCCESS:"LNG_BACKUP_STATUS_SUCCESS",FAILED:"LNG_BACKUP_STATUS_FAILED",PENDING:"LNG_BACKUP_STATUS_PENDING"},e.modules={"System Configuration":["systemSettings","language","languageToken","referenceData","helpCategory","auditLog","template","icon","device","deviceHistory","importMapping"],Data:["outbreak","person","labResult","followUp","relationship","team","location","user","role","cluster","fileAttachment"]},e.createBackup=function(t,a,r,u){let s=e.create({date:Date.now(),modules:a,location:null,userId:r,status:e.status.PENDING}).then(r=>(u&&u(null,r.id),app.logger.debug(`Backup ${r.id}: Started the backup process`),new Promise(function(u,s){backupHelper.create(a,t,(t,a)=>{let o=e.status.SUCCESS,c="";t?(o=e.status.FAILED,c=t,app.logger.debug(`Backup ${r.id}: Backup process failed with error: ${t}`)):app.logger.debug(`Backup ${r.id}: Successfully created backup file at ${a}`),r.updateAttributes({status:o,location:a,error:c}).then(function(e){app.logger.debug(`Backup ${e.id}: Successfully updated backup entry status`),t?s(t):u(e)}).catch(function(e){app.logger.debug(`Backup ${r.id}: Failed updating backup entry status. Error: ${e}`),s(e)})})})));return u?s.catch(e=>u(e)):s},e.attachCustomProperties=function(e){let t;try{if(fs.existsSync(e.location)){t=fs.statSync(e.location).size}}catch(a){app.logger.error(`Can't determine backup size ( ${e.id} )`),t=void 0}e.sizeBytes=t}};
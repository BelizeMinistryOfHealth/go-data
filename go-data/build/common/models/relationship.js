"use strict";const transmissionChain=require("../../components/workerRunner").transmissionChain,app=require("../../server/server"),_=require("lodash"),async=require("async");module.exports=function(e){e.hasController=!1,e.helpers={},e.helpers.sanitizeFieldLabelsMapForExport=(()=>{const t={},r={id:"LNG_ENTITY_FIELD_LABEL_ID",visualId:"LNG_ENTITY_FIELD_LABEL_VISUAL_ID",name:"LNG_ENTITY_FIELD_LABEL_NAME",lastName:"LNG_ENTITY_FIELD_LABEL_LAST_NAME",firstName:"LNG_ENTITY_FIELD_LABEL_FIRST_NAME",middleName:"LNG_ENTITY_FIELD_LABEL_MIDDLE_NAME",gender:"LNG_ENTITY_FIELD_LABEL_GENDER",dob:"LNG_ENTITY_FIELD_LABEL_DOB",age:"LNG_ENTITY_FIELD_LABEL_AGE","age.years":"LNG_ENTITY_FIELD_LABEL_AGE_YEARS","age.months":"LNG_ENTITY_FIELD_LABEL_AGE_MONTHS"};return Object.assign(t,e.fieldLabelsMap,_.transform(r,(e,t,r)=>{e[`sourcePerson.${r}`]=t},{}),{sourcePerson:"LNG_RELATIONSHIP_FIELD_LABEL_SOURCE"}),Object.assign(t,e.fieldLabelsMap,_.transform(r,(e,t,r)=>{e[`targetPerson.${r}`]=t},{}),{targetPerson:"LNG_RELATIONSHIP_FIELD_LABEL_TARGET"}),delete t.persons,delete t["persons[].type"],delete t["persons[].id"],delete t["persons[].target"],delete t["persons[].source"],t}),e.fieldLabelsMap=Object.assign({},e.fieldLabelsMap,{persons:"LNG_RELATIONSHIP_FIELD_LABEL_PERSONS","persons[].type":"LNG_RELATIONSHIP_FIELD_LABEL_TYPE","persons[].id":"LNG_RELATIONSHIP_FIELD_LABEL_RELATED_PERSON","persons[].target":"LNG_RELATIONSHIP_FIELD_LABEL_TARGET","persons[].source":"LNG_RELATIONSHIP_FIELD_LABEL_SOURCE",contactDate:"LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE",contactDateEstimated:"LNG_RELATIONSHIP_FIELD_LABEL_CONTACT_DATE_ESTIMATED",certaintyLevelId:"LNG_RELATIONSHIP_FIELD_LABEL_CERTAINTY_LEVEL",exposureTypeId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_TYPE",exposureFrequencyId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_FREQUENCY",exposureDurationId:"LNG_RELATIONSHIP_FIELD_LABEL_EXPOSURE_DURATION",socialRelationshipTypeId:"LNG_RELATIONSHIP_FIELD_LABEL_RELATION",socialRelationshipDetail:"LNG_RELATIONSHIP_FIELD_LABEL_RELATION_DETAIL",clusterId:"LNG_RELATIONSHIP_FIELD_LABEL_CLUSTER",comment:"LNG_RELATIONSHIP_FIELD_LABEL_COMMENT"}),e.referenceDataFieldsToCategoryMap={certaintyLevelId:"LNG_REFERENCE_DATA_CATEGORY_CERTAINTY_LEVEL",exposureTypeId:"LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_TYPE",exposureFrequencyId:"LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY",exposureDurationId:"LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_DURATION",socialRelationshipTypeId:"LNG_REFERENCE_DATA_CATEGORY_CONTEXT_OF_TRANSMISSION"},e.referenceDataFields=Object.keys(e.referenceDataFieldsToCategoryMap),e.customRelations={people:{type:"belongsToManyComplex",model:"person",foreignKeyContainer:"persons",foreignKey:"id"}},e.foreignKeyResolverMap={clusterId:{modelName:"cluster",useProperty:"name"}},e.relatedFieldLabelsMap={person:"LNG_RELATIONSHIP_PDF_FIELD_LABEL_PERSON"},e.printFieldsinOrder=["contactDate","contactDateEstimated","certaintyLevelId","exposureTypeId","exposureFrequencyId","exposureDurationId","clusterId","socialRelationshipTypeId","socialRelationshipDetail","comment","person"],e.buildOrCountTransmissionChains=function(e,t,r,n,o,s){let i;r&&(i=_.get(r,"where.endDate"),_.unset(r,"where.endDate")),i||(i=new Date),r=app.utils.remote.mergeFilters({where:{outbreakId:e,contactDate:{lte:i}},include:{relation:"people",scope:{where:{or:[{type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",classification:{nin:app.models.case.discardedCaseClassifications}},{type:{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]}}]},filterParent:!0}}},r||{}),app.models.relationship.rawFind(app.utils.remote.convertLoopbackFilterToMongo(r.where)).then(function(e){const E=[];e.forEach(function(e){Array.isArray(e.persons)&&e.persons.forEach(function(e){E.push(e.id)})});let a=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(r).people;return app.models.person.rawFind(app.utils.remote.mergeFilters(a,{where:{id:{inq:E}}}).where).then(function(E){const a={};E.forEach(function(e){a[e.id]=e}),e.forEach(function(e){e.people=[],Array.isArray(e.persons)&&e.persons.forEach(function(t){a[t.id]&&e.people.push(a[t.id])})}),e=app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(e,r),n?transmissionChain.count(e,t,{activeChainStartDate:i},s):transmissionChain.build(e,t,{activeChainStartDate:i,countContacts:o},s)})}).catch(s)},e.getTransmissionChains=function(t,r,n,o,s){e.buildOrCountTransmissionChains(t,r,n,!1,o,s)},e.countTransmissionChains=function(t,r,n,o){e.buildOrCountTransmissionChains(t,r,n,!0,!1,o)},e.filterKnownTransmissionChains=function(t,r){let n=app.utils.remote.mergeFilters({where:{outbreakId:t,"persons.0.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},"persons.1.type":{inq:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]}},include:{relation:"people",scope:{where:{classification:{nin:app.models.case.discardedCaseClassifications}},filterParent:!0}}},r||{});return e.rawFind(n.where).then(function(e){let r=[];e.forEach(function(e){Array.isArray(e.persons)&&e.persons.forEach(function(e){r.push(e.id)})});let o=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(n).people;return app.models.person.rawFind({$and:[o,{type:{$in:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},_id:{$in:r}},{outbreakId:t}]}).then(function(t){const r={};return t.forEach(function(e){r[e.id]=e}),e.filter(function(e){let t=!0;return e.people=[],e.persons.forEach(function(n){r[n.id]?e.people.push(r[n.id]):t=!1}),t})})})},e.transmissionChain={build:function(e,t,r,n){transmissionChain.build(e,t,r,n)},count:function(e,t,r,n){transmissionChain.build(e,t,r,n)}},e.getCasesWithContacts=function(e,t){t=t||{};let r={casesCount:0,contactsCount:0,cases:{}},n=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(t).people,o=Promise.resolve();return n=n?{and:[n,{outbreakId:e,type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",classification:{$nin:app.models.case.discardedCaseClassifications}}]}:{outbreakId:e,type:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE",classification:{$nin:app.models.case.discardedCaseClassifications}},(o=app.models.person.rawFind(n,{projection:{_id:1}}).then(function(e){return e.map(e=>e.id)})).then(function(n){let o={where:{outbreakId:e,and:[{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"},{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"}]}};return o.where["persons.id"]={inq:n},app.models.relationship.rawFind(app.utils.remote.convertLoopbackFilterToMongo(app.utils.remote.mergeFilters(o,t||{})).where).then(function(e){let t={},n={};e.forEach(function(e){let o=e.persons.findIndex(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===e.type),s=e.persons[o].id,i=e.persons[o?0:1].id;r.cases[s]||(r.cases[s]={id:s,contactsCount:0,contactIDs:[]},n[s]={},r.casesCount++),n[s][i]||(n[s][i]=!0,r.cases[s].contactsCount++,r.cases[s].contactIDs.push(i)),t[i]||(t[i]=!0,r.contactsCount++)})}).then(()=>(n.forEach(e=>{r.cases[e]||(r.cases[e]={id:e,contactsCount:0,contactIDs:[]},r.casesCount++)}),r))})},e.observe("before save",function(e,t){const r=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);r.target.active=!0;let n=r.source.all.persons.filter(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===e.type).map(e=>e.id);n?app.models.case.find({where:{id:{inq:n}}}).then(function(e){e.forEach(function(e){app.models.case.discardedCaseClassifications.includes(e.classification)&&(r.target.active=!1)}),t()}):t()}),e.observe("after save",function(e,t){if(app.utils.helpers.getValueFromContextOptions(e,"triggerPeopleUpdates"))return Promise.resolve();app.utils.helpers.setValueInContextOptions(e,"triggerPeopleUpdates",!0);let r=e.instance;const n=[];r.persons.forEach(function(t){n.push(app.models.person.findById(t.id).then(function(r){if(!r)throw app.logger.error(`Failed to trigger person record updates. Person (id: ${t.id}) not found.`);return r.systemTriggeredUpdate=!0,r.updateAttributes({},e.options)}))}),Promise.all(n).then(function(){let n=r.persons.find(e=>"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type);if(n)return app.models.contact.findById(n.id).then(function(t){if(!t)throw app.logger.error(`Failed to trigger contact record updates. Contact (id: ${n.id}) not found.`);return t.systemTriggeredUpdate=!0,t.updateAttributes({},e.options)}).then(function(){t()});t()}).catch(t)}),e.findOrCountPersonRelationshipExposuresOrContacts=function(t,r,n={},o=!0,s=!1){const i=_.get(n,"where.relationship");let E={outbreakId:t,persons:{elemMatch:{id:r,[o?"source":"target"]:!0}}};return i&&(delete n.where.relationship,E={and:[i,E]}),app.models.relationship.find({where:E}).then(function(o){return o=o.map(e=>e.toJSON()),new Promise(function(t,r){s?t(o):e.retrieveUserSupportedRelations({req:{options:{_userRelations:_.map(e.userSupportedRelations,e=>({relation:e}))}}},o,e=>{e&&r(e),t(o)})}).then(e=>{const o={},i=[];e.forEach(function(e){Array.isArray(e.persons)&&e.persons.forEach(function(t){t.id!==r&&(i.push(t.id),o[t.id]||(o[t.id]=[]),o[t.id].push(e))})});const E=_.get(n,"skip",0);delete n.skip;let a=_.get(n,"limit");delete n.limit;const p=app.utils.remote.mergeFilters({where:{outbreakId:t,id:{inq:i}}},n||{});return app.models.person.find(p).then(function(e){let t=[];return e.forEach(function(e){Array.isArray(o[e.id])&&o[e.id].forEach(function(r){const n=JSON.parse(JSON.stringify(e));n.relationship=r,t.push(n)})}),s?t.length:(void 0!==a&&(a+=E),void 0===E&&void 0===a||(t=t.slice(E,a)),t)})})})},e.findPersonRelationshipExposures=function(t,r,n){return e.findOrCountPersonRelationshipExposuresOrContacts(t,r,n,!1)},e.countPersonRelationshipExposures=function(t,r,n){return e.findOrCountPersonRelationshipExposuresOrContacts(t,r,n,!1,!0)},e.findPersonRelationshipContacts=function(t,r,n){return e.findOrCountPersonRelationshipExposuresOrContacts(t,r,n)},e.countPersonRelationshipContacts=function(t,r,n){return e.findOrCountPersonRelationshipExposuresOrContacts(t,r,n,!0,!0)},e.createRelationshipBetweenTwoPeople=function(e,t,r,n,o){return app.models.person.findOne({where:{id:t,outbreakId:e}}).then(function(n){if(!n)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.person.modelName,id:t});if(!["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"].includes(n.type))throw app.utils.apiError.getError("INVALID_RELATIONSHIP_SOURCE_TYPE",{type:n.type,allowedTypes:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"]});if("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===n.type&&app.models.case.discardedCaseClassifications.includes(n.classification))throw app.utils.apiError.getError("INVALID_RELATIONSHIP_WITH_DISCARDED_CASE",{id:t});return app.models.person.findOne({where:{id:r,outbreakId:e}}).then(function(e){if(!e)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.person.modelName,id:r});if("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===e.type&&app.models.case.discardedCaseClassifications.includes(e.classification))throw app.utils.apiError.getError("INVALID_RELATIONSHIP_WITH_DISCARDED_CASE",{id:r});return{source:n,target:e}})}).then(function(t){return new Promise(function(r,s){app.models.outbreak.helpers.createPersonRelationship(e,t.source.id,t.source.type,Object.assign({},n,{persons:[{id:t.target.id}]}),o,function(e,t){if(e)return s(e);r(t)})})})},e.bulkCreate=function(t,r,n,o,s){const i={created:[],failed:[]},E=[];return r.forEach(function(r){n.forEach(function(n){E.push(e.createRelationshipBetweenTwoPeople(t,r,n,o,s).then(function(e){i.created.push(e)}).catch(function(e){i.failed.push({sourceId:r,targetId:n,error:e})}))})}),Promise.all(E).then(function(){return i})},e.preFilterForOutbreak=function(e,t){t=t||{};let r=_.get(t,"where.person");r&&delete t.where.person;let n=_.get(t,"where.followUp");n&&delete t.where.followUp;let o=_.get(t,"where"),s=Promise.resolve();return r&&(r={$and:[r,{outbreakId:e.id}]},s=s.then(function(){return app.models.person.rawFind(r,{projection:{_id:1}}).then(function(e){const t=[];return e.forEach(function(e){t.push(e.id)}),Array.from(new Set(t))})})),n&&(n={$and:[n,{outbreakId:e.id}]},s=s.then(e=>e&&e.length<1?[]:app.models.followUp.rawFind(n,{projection:{personId:1}}).then(function(t){if(e){const r={};t.forEach(e=>{r[e.personId]=!0});const n=e;e=[],n.forEach(t=>{r[t]&&e.push(t)})}else e=[],t.forEach(t=>{e.push(t.personId)});return Array.from(new Set(e))}))),s.then(function(r){return r&&(o=_.isEmpty(o)?{"persons.id":{inq:r}}:{and:[o,{"persons.id":{inq:r}}]}),o=_.isEmpty(o)?{outbreakId:e.id}:{and:[o,{outbreakId:e.id}]},Object.assign(t,{where:o})})},e.bulkChangeSourceOrTarget=function(e,t,r,n){return _.isEmpty(r)||_.isEmpty(n)?Promise.reject(app.utils.apiError.getError("VALIDATION_ERROR",{model:app.models.relationship.modelName,details:"Where & source / target id are required"})):app.models.person.findById(r).then(e=>{if(_.isEmpty(e))throw app.utils.apiError.getError("VALIDATION_ERROR",{model:app.models.relationship.modelName,details:"Source / Target id is invalid"});if(t&&"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.type)throw app.utils.apiError.getError("CONTACT_CANT_BE_SOURCE");return e}).then(t=>app.models.relationship.find({where:app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:e},n]})}).then(e=>({sourceTargetModel:t,relationships:e}))).then(e=>{const r=[],n=e.sourceTargetModel,o=e.relationships,s={};return o.forEach(e=>{if(!e.persons||2!==e.persons.length)return;const o=_.find(e.persons,t?{source:!0}:{target:!0});if(o.id!==n.id){if(t||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"!==o.type||(s[o.id]||(s[o.id]={}),s[o.id][e.id]=!0),Object.assign(o,{id:n.id,type:n.type}),"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.persons[0].type&&"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e.persons[1].type)throw app.utils.apiError.getError("CONTACT_CANT_BE_SOURCE");if(e.persons[0].id===e.persons[1].id)throw app.utils.apiError.getError("CIRCULAR_RELATIONSHIP");r.push(function(e){return t=>{e.updateAttributes({persons:e.persons}).then(()=>{t()}).catch(t)}}(e))}}),{updateRelationshipsJobs:r,isolatedContactsData:s}}).then(e=>{const t=e.isolatedContactsData;return _.isEmpty(t)?e.updateRelationshipsJobs:app.models.relationship.rawFind({deleted:{$ne:!0},"persons.id":{$in:Object.keys(t)}},{projection:{_id:1,persons:1}}).then(r=>{if(r.forEach(e=>{const r=(e=>{let t;return"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e[0].type?t=e[0].id:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===e[1].type&&(t=e[1].id),t})(e.persons);t[r]&&void 0===t[r][e.id]&&delete t[r]}),!_.isEmpty(t)){const e=Object.keys(t);throw app.utils.apiError.getError("DELETE_CONTACT_LAST_RELATIONSHIP",{contactIDs:e.join(", "),contactIDsArray:e})}return e.updateRelationshipsJobs})}).then(e=>new Promise((t,r)=>{async.parallelLimit(e,10,function(n){if(!_.isEmpty(n))return r(n);t(e.length)})}))}};
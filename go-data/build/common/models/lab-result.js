"use strict";const app=require("../../server/server"),_=require("lodash"),helpers=require("../../components/helpers");module.exports=function(e){e.hasController=!1,e.fieldLabelsMap=Object.assign({},e.fieldLabelsMap,{personId:"LNG_LAB_RESULT_FIELD_LABEL_PERSON_ID",dateSampleTaken:"LNG_LAB_RESULT_FIELD_LABEL_DATE_SAMPLE_TAKEN",dateSampleDelivered:"LNG_LAB_RESULT_FIELD_LABEL_DATE_SAMPLE_DELIVERED",dateTesting:"LNG_LAB_RESULT_FIELD_LABEL_DATE_TESTING",dateOfResult:"LNG_LAB_RESULT_FIELD_LABEL_DATE_OF_RESULT",labName:"LNG_LAB_RESULT_FIELD_LABEL_LAB_NAME",sampleIdentifier:"LNG_LAB_RESULT_FIELD_LABEL_SAMPLE_LAB_ID",sampleType:"LNG_LAB_RESULT_FIELD_LABEL_SAMPLE_TYPE",testType:"LNG_LAB_RESULT_FIELD_LABEL_TEST_TYPE",testedFor:"LNG_LAB_RESULT_FIELD_LABEL_TESTED_FOR",result:"LNG_LAB_RESULT_FIELD_LABEL_RESULT",quantitativeResult:"LNG_LAB_RESULT_FIELD_LABEL_QUANTITATIVE_RESULT",notes:"LNG_LAB_RESULT_FIELD_LABEL_NOTES",status:"LNG_LAB_RESULT_FIELD_LABEL_STATUS",questionnaireAnswers:"LNG_LAB_RESULT_FIELD_LABEL_QUESTIONNAIRE_ANSWERS"}),e.referenceDataFieldsToCategoryMap={labName:"LNG_REFERENCE_DATA_CATEGORY_LAB_NAME",sampleType:"LNG_REFERENCE_DATA_CATEGORY_TYPE_OF_SAMPLE",testType:"LNG_REFERENCE_DATA_CATEGORY_TYPE_OF_LAB_TEST",result:"LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT",status:"LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_STATUS"},e.referenceDataFields=Object.keys(e.referenceDataFieldsToCategoryMap),e.printFieldsinOrder=["status","labName","testType","testedFor","dateTesting","result","dateOfResult","sampleType","dateSampleTaken","dateSampleDelivered","sampleIdentifier","quantitativeResult","notes"],e.extendedForm={template:"labResultsTemplate",containerProperty:"questionnaireAnswers",isBasicArray:e=>"LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_MULTIPLE_ANSWERS"===e.answerType},e.preFilterForOutbreak=function(e,t){t=t||{};let n=_.get(t,"where.contact");n&&delete t.where.contact;let s=_.get(t,"where.case");s&&delete t.where.case;let r=_.get(t,"where.person");r&&delete t.where.person;let a=_.get(t,"where",{}),E=Promise.resolve();const o=[];return s&&(s={$and:[s,{outbreakId:e.id}]},E=E.then(function(){return app.models.case.rawFind(s,{projection:{_id:1}}).then(function(e){o.push(...e.map(e=>e.id))})})),n&&(n={$and:[n,{outbreakId:e.id}]},E=E.then(function(){return app.models.contact.rawFind(n,{projection:{_id:1}}).then(function(e){o.push(...e.map(e=>e.id))})})),r&&(r={$and:[r,{outbreakId:e.id}]},E=E.then(()=>app.models.person.rawFind(r,{projection:{_id:1}}).then(e=>{o.push(...e.map(e=>e.id))}))),E.then(()=>((r||n||s)&&(a={$and:[a,{personId:{$in:o}}]}),a={$and:[a,{outbreakId:e.id}]},Object.assign(t,app.utils.remote.convertLoopbackFilterToMongo({where:a}))))},e.retrieveAggregateLabResults=((e,t,n,s)=>{t=t||{};const r={outbreakId:e.id};e.isContactLabResultsActive||(r.personType={neq:"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"}),t.where=_.isEmpty(t.where)?r:{and:[r,t.where]},app.models.labResult.rawFindAggregate(t,{countOnly:n,relations:[{lookup:{from:"person",localField:"personId",foreignField:"_id",as:"person"},unwind:!0,map:e=>(e.id=e._id,delete e._id,e)}]}).then(e=>{s(null,e)}).catch(s)}),e.observe("before save",function(e,t){const n=e.isNewInstance?e.instance:e.data;helpers.sortMultiAnswerQuestions(n),Promise.resolve().then(()=>{const t=e.isNewInstance?e.instance:e.currentInstance;return!t.personType&&t.personId?app.models.person.findOne({deleted:!0,where:{id:t.personId}}).then(e=>{n.personType=e?e.type:void 0}):null}).then(()=>{let s=_.get(e,"options.remotingContext.instance");s&&(s instanceof app.models.outbreak||(s=void 0)),helpers.convertQuestionStringDatesToDates(n,s?s.labResultsTemplate:null).then(()=>{t()}).catch(t)})}),e.migrate=((t,n)=>{app.models.outbreak.find({},{projection:{_id:1,labResultsTemplate:1}}).then(s=>{const r=_.transform(s,(e,t)=>{e[t.id]=t.labResultsTemplate},{});helpers.migrateModelDataInBatches(e,(e,n)=>{const s=()=>{e.updateAttributes({outbreakId:e.outbreakId},t).then(()=>n()).catch(n)};if(_.isEmpty(e.questionnaireAnswers))!e.personType&&e.personId?s():n();else{const a=_.cloneDeep(e.questionnaireAnswers);helpers.convertQuestionStringDatesToDates(e,r[e.outbreakId]).then(()=>{_.isEqual(e.questionnaireAnswers,a)?!e.personType&&e.personId?s():n():e.updateAttributes({questionnaireAnswers:e.questionnaireAnswers},t).then(()=>n()).catch(n)}).catch(n)}}).then(()=>n()).catch(n)}).catch(n)})};
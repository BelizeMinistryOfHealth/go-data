"use strict";const assert=require("assert"),authTokenConfig=require("../../server/config").authToken;module.exports=function(t){t.hasController=!1,t.observe("after save",(e,s)=>(e.isNewInstance&&t.remove({userId:e.instance.userId,id:{neq:e.instance.id}}),s())),t.prototype.validate=function(t){try{assert(this.created&&"function"==typeof this.created.getTime,"token.created must be a valid Date"),assert(0!==this.ttl,"token.ttl must be not be 0"),assert(this.ttl,"token.ttl must exist"),assert(this.ttl>=-1,"token.ttl must be >= -1");const e=this.constructor,s=e.relations.user;let n=s&&s.modelTo;this.principalType&&((n=e.registry.findModel(this.principalType))||process.nextTick(function(){return t(null,!1)}));const i=Date.now(),o=(i-this.created.getTime())/1e3,r=this.ttl,a=!(!n||!n.settings.allowEternalTokens),c=-1===r?a:o<r;c?(o>5&&(this.created=i,this.save()),process.nextTick(function(){t(null,c)})):this.destroy(function(e){t(e,c)})}catch(e){process.nextTick(function(){t(e)})}},t.observe("before save",function(t,e){const s=t.isNewInstance||!t.data?t.instance:t.data;s&&authTokenConfig&&authTokenConfig.ttl&&-1!==s.ttl&&s.ttl!==authTokenConfig.ttl&&(s.ttl=authTokenConfig.ttl),e()})};
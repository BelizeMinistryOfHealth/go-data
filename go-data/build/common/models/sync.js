"use strict";const async=require("async"),app=require("../../server/server"),fs=require("fs"),dbSync=require("../../components/dbSync"),SyncClient=require("../../components/syncClient"),syncConfig=require("../../server/config.json").sync,asyncActionsSettings=syncConfig.asyncActionsSettings,_=require("lodash"),syncWorker=require("./../../components/workerRunner").sync;module.exports=function(e){function r(e,r){return{errorType:e,errorMessage:r}}e.hasController=!0,e.inProgress={servers:{}},e.pending={servers:{}},e.errorType={fatal:"Fatal",partial:"Partial"},e.getFatalError=function(t){return r(e.errorType.fatal,t)},e.getPartialError=function(t){return r(e.errorType.partial,t)},e.exportDatabase=function(e,r,t,n){app.logger.debug(`Started database export for the following collections: ${r.join(", ")}`),t=t||{},e=e||{where:{}},r=r||[];let o=Object.assign({},dbSync.collectionsMap);r.length&&Object.keys(o).forEach(e=>{-1===r.indexOf(e)&&delete o[e]}),Object.assign(t,{filter:e}),syncWorker.exportCollections(o,t).then(function(e){return app.logger.debug(`Exported database at '${e}'`),n(null,e)}).catch(n)},e.syncDatabaseWithSnapshot=function(r,t,n,o,s,i,a){i=i||{},o.generatePersonVisualId=void 0!==i.generatePersonVisualId&&i.generatePersonVisualId,app.models.systemSettings.getCache().then(function(e){if(s||void 0===s&&_.get(e,"sync.triggerBackupBeforeSync")){let r=e.dataBackup;return app.logger.debug(`Sync ${t.id}: Backup before sync is enabled. Starting backup process`),app.models.backup.createBackup(r.location,r.modules,`Sync ${t.id}`)}return app.logger.debug(`Sync ${t.id}: Backup before sync is disabled. Proceeding with sync process`)}).then(function(s){return s&&app.logger.debug(`Sync ${t.id}: Backup process completed successfully. Backup ID: ${s.id}`),app.logger.debug(`Sync ${t.id}: Importing the DB at ${r}`),syncWorker.extractAndDecryptSnapshotArchive(r,i).then(function(s){let c=s.collectionFilesDirName,l=s.tmpDirName;return fs.readdir(c,(s,p)=>{if(s)return a(e.getFatalError(s));let g=p.filter(e=>(e=e.split("."))[0]&&dbSync.collectionsMap.hasOwnProperty(e[0]));g.sort(function(e,r){let t=e.split("."),n=r.split(".");return t[0]!==n[0]?t[0]<n[0]?-1:1:parseInt(t[1])<parseInt(n[1])?-1:1});let u={},d=[],y={},m={};return async.series(g.map(e=>r=>{let s=`${c}/${e}`,a=e.split(".")[0];-1===d.indexOf(a)&&d.push(a);let p=app.models[dbSync.collectionsMap[a]];return fs.readFile(s,{encoding:"utf8"},(e,c)=>{if(u[a]=[],e)return app.logger.error(`Sync ${t.id}: Failed to read collection file ${s}. ${e}`),y[a]=`Failed to read collection file ${s}. ${e}`,r();const g=function(e){try{let r=JSON.parse(c).map(e=>r=>{if(e.id=e._id,n.length&&dbSync.collectionsImportFilterMap[a]&&!dbSync.collectionsImportFilterMap[a](a,e,n))return app.logger.debug(`Sync ${t.id}: Skipped syncing record (collection: ${a}, id: ${e.id}) as it's outbreak ID is not accepted`),r();dbSync.syncRecord(app.logger,p,e,o,n=>(n&&(app.logger.debug(`Sync ${t.id}: Failed syncing record (collection: ${a}, id: ${e.id}). Error: ${n.message}`),u[a].push(`ID: "${e.id}". Error: ${n.message}`)),r()))});return-1!==dbSync.collectionsToSyncInSeries.indexOf(a)?async.series(r,()=>(u[a].length||delete u[a],e())):async.parallelLimit(r,10,()=>(u[a].length||delete u[a],e()))}catch(r){return app.logger.error(`Sync ${t.id}: Failed to parse collection file ${s}. ${r}`),y[a]=`Failed to parse collection file ${s}. ${r}`,e()}};if(!dbSync.collectionsWithFiles.hasOwnProperty(a))return g(r);dbSync.importCollectionRelatedFiles(a,l,app.logger,i.password,e=>(e&&(m[a]=`Failed to copy related files. ${e}`),g(r)))})}),()=>{syncConfig.debug?app.logger.info("Sync running in debug mode, no cleanup performed"):fs.unlink(r,()=>{app.logger.debug(`Sync ${t.id}: Removed temporary files at ${r}`)});let n=null,o=Object.keys(y);if(o.length&&(n="Failed collections: ",o.forEach(function(e){n+=`Collection ${e}. Error: ${y[e]}`})),d.length&&d.length===o.length)return a(e.getFatalError(n));let s=Object.keys(u);if(s.length&&(n=n||"",n+="Failed records: ",s.forEach(function(e){n+=`Collection ${e}. Records: ${u[e].join("; ")} `})),m.length){n=n||"",n+="Failed collections with related files: ";for(let e in m)n+=`Collection ${e}. Error: ${m[e]} `}return a(n?e.getPartialError(n):null)})})})}).catch(function(r){return a(e.getFatalError(r))})},e.getAvailableOutbreaksIDs=function(e,r){return new SyncClient(e,r).getAvailableOutbreaks()},e.sendDBSnapshotForImport=function(e,r,t,n){"string"!=typeof t&&(t=!0===t?"true":"false");let o=new SyncClient(e,n);return"true"===t?(app.logger.debug(`Sync ${n.id}: Upstream server import is being done in async mode`),o.sendDBSnapshotForImport(r,t,e.autoEncrypt?"true":"false").then(function(e){app.logger.debug(`Sync ${n.id}: Upstream server import: received upstream server sync log id: ${e}`);let r=null;return new Promise(function(t,s){let i,a;app.logger.debug(`Sync ${n.id}: Upstream server import: Checking upstream server sync status for ${asyncActionsSettings.actionTimeout} milliseconds at an interval of ${asyncActionsSettings.intervalTimeout} milliseconds`);let c=!1;i=setTimeout(function(){c=!0,app.logger.debug(`Sync ${n.id}: Upstream server import failed. Upstream server sync status was not updated in time (${asyncActionsSettings.actionTimeout} milliseconds)`),clearTimeout(a),s(app.utils.apiError.getError("UPSTREAM_SERVER_SYNC_FAILED",{upstreamServerName:o.upstreamServerName,error:`Upstream server sync status was not updated in time (${asyncActionsSettings.actionTimeout} milliseconds). ${r?`Latest status check error was a connection error: ${r}`:""}`}))},asyncActionsSettings.actionTimeout),a=setTimeout(function l(){o.getSyncLogEntry(e).then(function(p){if(c)app.logger.debug(`Sync ${n.id}: Total action timeout was reached when the sync log check was in execution. Stopping sync log check response handling`);else{if(r=null,"LNG_SYNC_STATUS_IN_PROGRESS"===p.status)return app.logger.debug(`Sync ${n.id}: Upstream server import is in progress`),void(a=setTimeout(l,asyncActionsSettings.intervalTimeout));"LNG_SYNC_STATUS_FAILED"===p.status?(app.logger.debug(`Sync ${n.id}: Upstream server import failed: upstream server sync status is 'failed'. Fail reason ${p.error}`),s(app.utils.apiError.getError("UPSTREAM_SERVER_SYNC_FAILED",{upstreamServerName:o.upstreamServerName,error:p.error}))):("LNG_SYNC_STATUS_SUCCESS_WITH_WARNINGS"===p.status?(app.logger.debug(`Sync ${n.id}: Upstream server import succeeded with some errors: ${p.error}`),n.addError(`Upstream server import errors: ${p.error}`)):app.logger.debug(`Sync ${n.id}: Upstream server import success`),t(e)),clearTimeout(i)}}).catch(function(e){c?app.logger.debug(`Sync ${n.id}: Total action timeout was reached when the sync log check was in execution. Stopping sync log check response handling`):(app.logger.debug(`Sync ${n.id}: Upstream server import: Couldn't check upstream server sync status. Retrying after the next interval. Error ${e}`),r=e,a=setTimeout(l,asyncActionsSettings.intervalTimeout))})},asyncActionsSettings.intervalTimeout)})})):(app.logger.debug(`Sync ${n.id}: Upstream server import is being done in sync mode`),o.sendDBSnapshotForImport(r,t,e.autoEncrypt?"true":"false").then(function(e){return app.logger.debug(`Sync ${n.id}: Upstream server import success. Received upstream server sync log id: ${e}`),e}))},e.checkAndTriggerPendingSync=function(r,t){let n=e.inProgress.servers,o=e.pending.servers;if(o[r.url])if(n[r.url])app.logger.debug(`Sync on every change: There is already a sync in progress with server '${r.name}'. Sync is pending completion of the current sync process`),o[r.url]=!0;else{let s={upstreamServerURL:r.url,triggerBackupBeforeSync:!1,forceSync:!0},i={remotingContext:{req:{authData:{user:Object.assign({},_.get(t,"remotingContext.req.authData.user",{}))},headers:_.get(t,"remotingContext.req.headers"),connection:_.get(t,"remotingContext.req.connection")}},syncOnEveryChange:!0};t.syncOnEveryChange||_.set(i,"remotingContext.req.authData.user.id",`${_.get(i,"remotingContext.req.authData.user.id")} (Sync on every change)`),app.logger.debug(`Sync on every change: Started sync with server '${r.name}'`),e.sync(s,i,function(e,t){e?app.logger.debug(`Sync on every change: Sync with server '${r.name}' failed with error: ${e}`):app.logger.debug(`Sync on every change: Sync with server '${r.name}' is progressing having sync log ID ${t}`)}),n[r.url]=!0,o[r.url]=!1}}};
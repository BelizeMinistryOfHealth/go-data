"use strict";const fs=require("fs"),_=require("lodash"),args=process.argv,sources={config:{path:`${__dirname}/../../server/config.json`,data:require("../../server/config")},dataSources:{path:`${__dirname}/../../server/datasources.json`,data:require("../../server/datasources")},package:{path:`${__dirname}/../../package.json`,data:require("../../package")}},cliArguments={apiPort:{source:sources.config,paramPath:"port",get:{convertor:e=>e.toString()},set:{allowed:!0,convertor:e=>parseInt(e)}},publicProtocol:{source:sources.config,paramPath:"public.protocol",get:{convertor:e=>e.toString()},set:{allowed:!1,convertor:e=>parseInt(e)}},publicHost:{source:sources.config,paramPath:"public.host",get:{convertor:e=>e},set:{allowed:!1,convertor:e=>e}},publicPort:{source:sources.config,paramPath:"public.port",get:{convertor:e=>e.toString()},set:{allowed:!1,convertor:e=>parseInt(e)}},logLevel:{source:sources.config,paramPath:"logging.level",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},dbHost:{source:sources.dataSources,paramPath:"mongoDb.host",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},dbPort:{source:sources.dataSources,paramPath:"mongoDb.port",get:{convertor:e=>e.toString()},set:{allowed:!0,convertor:e=>parseInt(e)}},dbUser:{source:sources.dataSources,paramPath:"mongoDb.user",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},dbPassword:{source:sources.dataSources,paramPath:"mongoDb.password",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},smtpHost:{source:sources.dataSources,paramPath:"email.transports.0.host",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},smtpPort:{source:sources.dataSources,paramPath:"email.transports.0.port",get:{convertor:e=>e.toString()},set:{allowed:!0,convertor:e=>parseInt(e)}},smtpSecure:{source:sources.dataSources,paramPath:"email.transports.0.secure",get:{convertor:e=>e.toString()},set:{allowed:!0,convertor:e=>"true"===e}},smtpUser:{source:sources.dataSources,paramPath:"email.transports.0.auth.user",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},smtpPassword:{source:sources.dataSources,paramPath:"email.transports.0.auth.pass",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},buildPlatform:{source:sources.package,paramPath:"build.platform",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},version:{source:sources.package,paramPath:"build.version",get:{convertor:e=>e},set:{allowed:!1,convertor:e=>e}},buildNumber:{source:sources.package,paramPath:"build.build",get:{convertor:e=>e},set:{allowed:!1,convertor:e=>e}},buildArch:{source:sources.package,paramPath:"build.arch",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}},backUpPassword:{source:sources.config,paramPath:"backUp.password",get:{convertor:e=>e},set:{allowed:!0,convertor:e=>e}}};function output(e,r){process[r?"stderr":"stdout"].write(`${e}\n`),process.exit(r?1:0)}const supportedCommands=["get","set"];let command;supportedCommands.forEach(function(e){!command&&args.includes(e)&&(command=e)}),command||output(`No valid command specified. Available commands: \n- ${supportedCommands.join("\n- ")}`,!0);const supportedArguments=Object.keys(cliArguments);let argument,argumentIndex,argumentValue,convertedValue;switch(supportedArguments.forEach(function(e){argument||-1===(argumentIndex=args.indexOf(e))||(argument=e)}),argument||output(`No valid argument specified. Available arguments: \n- ${supportedArguments.join("\n- ")}`,!0),command){case"set":cliArguments[argument][command].allowed||output(`Setting ${argument} is not allowed`,!0),void 0===(argumentValue=args[argumentIndex+1])&&output(`No argument value sent. You can specify argument value like this: ${command} ${argument} <argumentValue>`,!0),convertedValue=cliArguments[argument][command].convertor(argumentValue),_.set(cliArguments[argument].source.data,cliArguments[argument].paramPath,convertedValue),fs.writeFile(cliArguments[argument].source.path,JSON.stringify(cliArguments[argument].source.data,null,2),function(e){e&&output(JSON.stringify(e),!0),output(`Success: ${command} ${argument} ${convertedValue.toString()}`,!1)});break;case"get":output(cliArguments[argument][command].convertor(_.get(cliArguments[argument].source.data,cliArguments[argument].paramPath)),!1)}
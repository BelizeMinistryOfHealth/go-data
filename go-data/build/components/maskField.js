"use strict";const escapeRegExp=require("./escapeRegExp");function maskIsValid(e){return/^(?:9*[^9()]*|[^9()]*9*[^9()]*|[^9()]*9*)$/.test(e)}function getMaskRegExpStringForSearch(e,t){if(e=escapeRegExp(e),t=escapeRegExp(t),!maskIsValid(e))return!1;const r={YYYY:"\\d{4,4}",0:"\\d",9:"(\\d)","@":"[a-zA-Z]","&":".","\\*":"\\?.+"};Object.keys(r).forEach(function(t){e=e.replace(new RegExp(t,"g"),r[t])});const s=e.indexOf("("),n=e.lastIndexOf(")"),a=new RegExp(`^(${e.substring(0,s)})${e.substring(s,n+1)}(${e.substring(n+1)})$`);return!!a.test(t)&&t.replace(a,function(){let e="";for(let t=1;t<arguments.length-4;t++)e+="(\\d)";return`${arguments[1]}${e}${arguments[arguments.length-3]}`})}function convertMaskToSearchRegExp(e,t){const r=getMaskRegExpStringForSearch(e,t);return!!r&&new RegExp(`^${r}$`)}function resolveMask(e,t,r){return new Promise(function(s,n){if(!maskIsValid(e))return n({code:"INVALID_MASK",message:"Invalid mask. The mask does not match the following pattern: /^(?:9*[^9()]*|[^9()]*9*[^9()]*|[^9()]*9*)$/."});let a=0;const o=e.match("9+");if(o&&(a=o[0].length),r>1&&r.toString().length>a)return n({code:"MASK_TOO_SHORT",message:"Cannot resolve mask. The numeric value is too big for current mask."});let c=getMaskRegExpStringForSearch(e,t);if(!c)return n({code:"MASK_MISS_MATCH",message:"Cannot resolve mask. Property template does not match mask pattern"});for(;r;){const e=c.lastIndexOf("(\\d)");-1!==e&&(c=`${c.substring(0,e)}${r%10}${c.substring(e+4)}`),r=parseInt(r/10)}s(c=c.replace(/\(\\d\)/g,"0"))})}function extractValueFromMaskedField(e,t){let r="0",s=convertMaskToSearchRegExp(e,t);if(s){let e=s.exec(t);e?e.forEach(function(e,t){t&&(r+=e)}):r=0}return parseInt(r)}module.exports={maskIsValid:maskIsValid,convertMaskToSearchRegExp:convertMaskToSearchRegExp,resolveMask:resolveMask,extractValueFromMaskedField:extractValueFromMaskedField};
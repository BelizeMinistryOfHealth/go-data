"use strict";const winston=require("winston"),config=require("../server/config.json"),_=require("lodash");"warning"===config.logging.level&&(config.logging.level="warn"),winston.loggers.add("fileLogger",{file:{filename:`${__dirname}/../logs/application.log`,level:config.logging.level,maxsize:config.logging.maxSize,maxFiles:config.logging.maxFiles,tailable:!0},console:{stderrLevels:["error"],level:config.logging.level}});let logger=winston.loggers.get("fileLogger");console.log=logger.debug,console.info=logger.info,console.warn=logger.warn,console.error=logger.error;let flushHandlerAdded=!1;logger.exitProcessAfterFlush=function(e){flushHandlerAdded||(logger.transports.file.once("flush",function(){process.exit(e)}),flushHandlerAdded=!0)},logger.getTransactionLogger=function(e){let g={};return["debug","info","warn","error"].forEach(function(o){g[o]=function(g,n){!function(g,o,n){o=`[TransactionID: ${e}] ${o}`,logger.log(g,o,n)}(o,g,n)}}),g};const logFn=logger.log;logger.log=function(e,g,...o){const n=_.get(config,"logging.trim",!1);if("string"==typeof g&&n){const e=_.get(config,"logging.maxLength");g.length>e&&(g=g.substring(0,e)+"...(trimmed)")}logFn.call(logger,e,g,...o)},module.exports=logger;
"use strict";const app=require("./../server/server"),_=require("lodash"),uuid=require("uuid"),subTemplates=["caseInvestigationTemplate","contactFollowUpTemplate","labResultsTemplate"];function parseQuestions(e,n,t){n=n||"",e.forEach(function(a,s){t[a.variable]=t[a.variable]||{count:0},t[a.variable].count++;let r=`${n}_QUESTION_${_.snakeCase(a.variable).toUpperCase()}`;if(e[s].text=`${r}_TEXT`,a.answers&&Array.isArray(a.answers)&&a.answers.length){t[a.variable].answers=t[a.variable].answers||{};let n=e[s].answers;n.forEach(function(e,s){t[a.variable].answers[e.value]=t[a.variable].answers[e.value]||0,t[a.variable].answers[e.value]++;let o=`${r}_ANSWER_${_.snakeCase(e.value).toUpperCase()}`;n[s].label=`${o}_LABEL`,e.additionalQuestions&&Array.isArray(e.additionalQuestions)&&e.additionalQuestions.length&&parseQuestions(n[s].additionalQuestions,o,t)})}})}function saveLanguageTokens(e,n){let t=[],a={find:[],new:[],updated:[]},s=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);subTemplates.forEach(function(n){let t=app.utils.helpers.getOriginalValueFromContextOptions(e,n);t&&function n(t,a,s,r){t.forEach(function(o,i){if(r.find.push(app.models.languageToken.findOne({where:{token:t[i].text,languageId:s}}).then(function(n){n?(e.options.remotingContext.req.logger.debug(`Language token "${t[i].text}" exists in DB. Updating it for the user language.`),r.updated.push(n.updateAttributes({translation:a[i].text},e.options))):(e.options.remotingContext.req.logger.debug(`Language token "${t[i].text}" doesn't exist in DB. Creating it for all installed languages.`),r.new.push({token:t[i].text,translation:a[i].text}))})),o.answers&&Array.isArray(o.answers)&&o.answers.length){let o=t[i].answers;o.forEach(function(t,u){r.find.push(app.models.languageToken.findOne({where:{token:o[u].label,languageId:s}}).then(function(n){n?(e.options.remotingContext.req.logger.debug(`Language token "${o[u].label}" exists in DB. Updating it for the user language.`),r.updated.push(n.updateAttributes({translation:a[i].answers[u].label},e.options))):(e.options.remotingContext.req.logger.debug(`Language token "${o[u].label}" doesn't exist in DB. Creating it for all installed languages.`),r.new.push({token:o[u].label,translation:a[i].answers[u].label}))})),t.additionalQuestions&&Array.isArray(t.additionalQuestions)&&t.additionalQuestions.length&&n(o[u].additionalQuestions,a[i].answers[u].additionalQuestions,s,r)})}})}(s.target[n],t,e.options.remotingContext.req.authData.user.languageId,a)}),a.find.length?Promise.all(a.find).then(function(){if(t=t.concat(a.updated),a.new.length)return app.models.language.find()}).then(function(n){return n&&n.forEach(function(n){a.new.forEach(function(a){a.languageId=n.id,t.push(app.models.languageToken.create(a,e.options))})}),Promise.all(t)}).then(function(){n()}).catch(n):n()}function beforeHook(e,n){if(e.options&&e.options._sync)return n();let t;t=e.isNewInstance?e.instance.id=e.instance.id||uuid.v4():e.currentInstance.id;let a=`LNG_${e.Model.modelName.toUpperCase()}_${t.toUpperCase()}`,s=!1,r={questions:{},answers:{}},o=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);subTemplates.forEach(function(n){if(o.target&&Array.isArray(o.target[n])&&o.target[n].length){app.utils.helpers.setOriginalValueInContextOptions(e,n,JSON.parse(JSON.stringify(o.target[n])));let t=`${a}_${n.toUpperCase()}`,i=o.target[n],u={};parseQuestions(i,t,u),Object.keys(u).forEach(function(e){u[e].count>1&&(s=!0,r.questions[n]=r.questions[n]||[],r.questions[n].push(e)),u[e].answers&&Object.keys(u[e].answers).forEach(function(t){u[e].answers[t]>1&&(s=!0,r.answers[n]=r.answers[n]||{[`question '${e}'`]:[]},r.answers[n][`question '${e}'`].push(t))})})}}),s?n(app.utils.apiError.getError("DUPLICATE_TEMPLATE_QUESTION_VARIABLE_OR_ANSWER_VALUE",{duplicateQuestionVariable:r.questions,duplicateAnswerValue:r.answers})):n()}function afterHook(e,n){if(e.options&&e.options._sync)return n();saveLanguageTokens(e,n)}function extractVariablesAndAnswerOptions(e){let n=[];return Array.isArray(e)&&e.forEach(function(e){const t={name:e.variable,text:e.text,answerType:e.answerType};n.push(t),["LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_SINGLE_ANSWER","LNG_REFERENCE_DATA_CATEGORY_QUESTION_ANSWER_TYPE_MULTIPLE_ANSWERS"].includes(e.answerType)&&Array.isArray(e.answers)&&(t.answers=[],e.answers.forEach(function(e){t.answers.push({label:e.label,value:e.value}),Array.isArray(e.additionalQuestions)&&(n=n.concat(extractVariablesAndAnswerOptions(e.additionalQuestions)))}))}),n}function orderQuestions(e){Array.isArray(e)&&(e.sort(function(e,n){return e.order=parseInt(e.order),n.order=parseInt(n.order),isNaN(e.order)&&(e.order=1),isNaN(n.order)&&(n.order=1),e.order-n.order}),e.forEach(function(e){Array.isArray(e.answers)&&e.answers.forEach(function(e){orderQuestions(e.additionalQuestions)})}))}module.exports={beforeHook:beforeHook,afterHook:afterHook,extractVariablesAndAnswerOptions:extractVariablesAndAnswerOptions,orderQuestions:orderQuestions};
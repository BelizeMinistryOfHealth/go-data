"use strict";const app=require("../server"),personDuplicate=require("../../components/workerRunner").personDuplicate,helpers=require("../../components/helpers"),_=require("lodash"),moment=require("moment");module.exports=function(e){e.hasController=!1,e.customRelations={relationships:{type:"hasManyEmbedded",model:"relationship",foreignKey:"persons.id"},locations:{type:"belongsToManyComplex",model:"location",foreignKeyContainer:"addresses",foreignKey:"locationId"},location:{type:"belongsToEmbedded",model:"location",foreignKey:"address.locationId"},dateRangeLocations:{type:"belongsToManyComplex",model:"location",foreignKeyContainer:"dateRanges",foreignKey:"locationId"}},e.fieldLabelsMap=Object.assign({},e.fieldLabelsMap,{firstName:"LNG_CASE_FIELD_LABEL_FIRST_NAME",middleName:"LNG_CASE_FIELD_LABEL_MIDDLE_NAME",lastName:"LNG_CASE_FIELD_LABEL_LAST_NAME",gender:"LNG_CASE_FIELD_LABEL_GENDER",occupation:"LNG_CASE_FIELD_LABEL_OCCUPATION",age:"LNG_CASE_FIELD_LABEL_AGE","age.years":"LNG_CASE_FIELD_LABEL_AGE_YEARS","age.months":"LNG_CASE_FIELD_LABEL_AGE_MONTHS",dob:"LNG_CASE_FIELD_LABEL_DOB",classification:"LNG_CASE_FIELD_LABEL_CLASSIFICATION",wasContact:"LNG_CASE_FIELD_LABEL_WAS_CONTACT",dateBecomeCase:"LNG_CASE_FIELD_LABEL_DATE_BECOME_CASE",wasCase:"LNG_CONTACT_FIELD_LABEL_WAS_CASE",dateBecomeContact:"LNG_CONTACT_FIELD_LABEL_DATE_BECOME_CONTACT",dateOfInfection:"LNG_CASE_FIELD_LABEL_DATE_OF_INFECTION",dateOfOnset:"LNG_CASE_FIELD_LABEL_DATE_OF_ONSET",riskLevel:"LNG_CASE_FIELD_LABEL_RISK_LEVEL",riskReason:"LNG_CASE_FIELD_LABEL_RISK_REASON",outcomeId:"LNG_CASE_FIELD_LABEL_OUTCOME_ID",dateOfOutcome:"LNG_CASE_FIELD_LABEL_DATE_OF_OUTCOME",documents:"LNG_CASE_FIELD_LABEL_DOCUMENTS",type:"LNG_CASE_FIELD_LABEL_TYPE",dateRanges:"LNG_CASE_FIELD_LABEL_DATE_RANGES",transferRefused:"LNG_CASE_FIELD_LABEL_TRANSFER_REFUSED",addresses:"LNG_CASE_FIELD_LABEL_ADDRESSES",safeBurial:"LNG_CASE_FIELD_LABEL_SAFE_BURIAL",dateOfBurial:"LNG_CASE_FIELD_LABEL_DATE_OF_BURIAL"}),e.referenceDataFields=["gender","classification","riskLevel","outcomeId","occupation","documents.type"],e.printFieldsinOrder=["firstName","middleName","lastName","gender","occupation","age","dob","classification","wasContact","dateBecomeCase","wasCase","dateBecomeContact","dateOfInfection","dateOfOnset","riskLevel","riskReason","outcomeId","dateOfOutcome","dateOfBurial","safeBurial","documents","type","dateRanges","transferRefused","addresses"],e.nestedGeoPoints=["addresses[].geoLocation","address.geoLocation"],e.locationFields=["addresses[].locationId","dateRanges[].locationId","address.locationId"],e.typeToModelMap={LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE:"case",LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT:"contact",LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT:"event"},e.dossierDateFields=["dob","dateRanges[].startDate","dateRanges[].endDate","addresses[].date","dateBecomeCase","dateOfReporting","dateOfInfection","dateOfOnset","dateOfOutcome","dateOfBurial","vaccinesReceived[].date","relationships[].contactDate","relationships[].people[].vaccinesReceived[].date","relationships[].people[].date","relationships[].people[].address.date","relationships[].people[].dob","relationships[].people[].dateRanges[].startDate","relationships[].people[].dateRanges[].endDate","relationships[].people[].addresses[].date","relationships[].people[].dateOfReporting","relationships[].people[].dateOfReporting","relationships[].people[].dateOfInfection","relationships[].people[].dateOfOnset","relationships[].people[].dateOfOutcome","relationships[].people[].dateOfBurial","labResults[].dateSampleTaken","labResults[].dateSampleDelivered","labResults[].dateTesting","labResults[].dateOfResult","followUps[].date","followUps[].address.date"],e.prototype.getDisplayName=function(){return e.getDisplayName(this)},e.getDisplayName=function(e){return e.toJSON&&(e=e.toJSON()),e.name?this.name:["firstName","middleName","lastName"].reduce(function(t,a){return e[a]&&(t+=(t.length?" ":"")+e[a]),t},"")},e.sanitizeAddresses=function(e){return e.toJSON&&(e=e.toJSON()),e.addresses?_.filter(e.addresses,e=>!!_.find(e,e=>"string"==typeof e?!!e.trim():!!e)):e.addresses},e.observe("before save",function(e,t){!function(e){let t;function a(t){t.geoLocation&&t.geoLocation.lat&&t.geoLocation.lng&&(isNaN(t.geoLocation.lat)||isNaN(t.geoLocation.lng))&&(t.geoLocation.lat=parseFloat(t.geoLocation.lat),t.geoLocation.lng=parseFloat(t.geoLocation.lng),e.options&&e.options._sync&&(e.options._syncActionBeforeSaveChanges=!0))}t=e.isNewInstance?e.instance:e.data,Array.isArray(t.addresses)&&t.addresses.length&&t.addresses.forEach(function(e){a(e)}),t.address&&a(t.address)}(e);const a=app.utils.helpers.getSourceAndTargetFromModelHookContext(e);if(!e.isNewInstance&&"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===a.source.existingRaw.type&&a.source.update&&a.source.update.classification&&a.source.existing.classification&&a.source.existing.classification!==a.source.updated.classification&&app.models.case.discardedCaseClassifications.includes(a.source.existing.classification)!==app.models.case.discardedCaseClassifications.includes(a.source.updated.classification)&&(e.options.triggerRelationshipUpdates=!0),!a.source.all.deleted&&!a.source.all.systemTriggeredUpdate){const e=function(e){let t;if(Array.isArray(e.addresses)&&e.addresses.length){const a=[],s=[];e.addresses.forEach(function(e){"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId?a.push(e):"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_PREVIOUS_USUAL_PLACE_OF_RESIDENCE"!==e.typeId||e.date||s.push(e)}),a.length?a.length>1?t=app.utils.apiError.getError("ADDRESS_MULTIPLE_USUAL_PLACE_OF_RESIDENCE",{addresses:e.addresses,usualPlaceOfResidence:a}):s.length&&(t=app.utils.apiError.getError("ADDRESS_PREVIOUS_PLACE_OF_RESIDENCE_MUST_HAVE_DATE",{addresses:e.addresses,previousUsualPlaceOfResidence:s})):t=app.utils.apiError.getError("ADDRESS_MUST_HAVE_USUAL_PLACE_OF_RESIDENCE",{addresses:e.addresses})}return t}(a.source.all);if(e)return t(e)}Promise.resolve().then(()=>{const t=a.source.all;if(!t.dateRanges||!_.isArray(t.dateRanges)||t.dateRanges.length<1)return;const s={};return t.dateRanges.forEach(e=>{const t=(e.centerName||"").trim();if(!t||t.startsWith("LNG_REFERENCE_DATA"))return;const a=`LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME_${_.snakeCase(t).toUpperCase()}`;s[a]||(s[a]={id:a,value:t}),e.centerName=a}),_.isEmpty(s)?void 0:(a.target.dateRanges=t.dateRanges,app.models.referenceData.rawFind({_id:{$in:Object.keys(s)}},{projection:{_id:1}}).then(t=>{if((t||[]).forEach(e=>{delete s[e.id]}),!_.isEmpty(s))return Promise.resolve().then(()=>{if(e.options&&e.options._sync)return app.models.language.rawFind({},{projection:{id:1}})}).then(t=>{const a=new Date,o={createdBy:"system",updatedBy:"system",createdAt:a,updatedAt:a},r=[];return _.each(s,a=>{r.push(app.models.referenceData.create(Object.assign({id:a.id,categoryId:"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME",value:e.options&&e.options._sync?a.id:a.value,description:"",readOnly:!1,active:!0,deleted:!1},o),e.options)),e.options&&e.options._sync&&(t||[]).forEach(t=>{r.push(app.models.languageToken.create(Object.assign({id:app.models.languageToken.generateID(a.id,t.id),token:a.id,languageId:t.id,translation:a.value},o),e.options)),r.push(app.models.languageToken.create(Object.assign({id:app.models.languageToken.generateID(`${a.id}_DESCRIPTION`,t.id),token:`${a.id}_DESCRIPTION`,languageId:t.id,translation:""},o),e.options))})}),Promise.all(r).then(()=>void 0)})}))}).then(()=>{if(e.options&&e.options._sync)return e.options.generatePersonVisualId?a.target.visualId||a.source.all.visualId?t():void app.models.outbreak.findById(a.source.existing.outbreakId).then(function(e){if(!e)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.outbreak.modelName,id:a.source.existing.outbreakId});let t="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===a.source.existingRaw.type?"caseIdMask":"contactIdMask";return app.models.outbreak.helpers.getAvailableVisualId(e,t,app.models.person.sanitizeVisualId(e[t]))}).then(function(s){a.target.visualId=s,e.options._syncActionBeforeSaveChanges=!0,t()}).catch(function(e){app.logger.debug(`Failed generating visualId for person '${a.target.id}'. Error: ${e}`),t()}):t();!_.get(e,"options._disableVisualIdValidation",!1)?app.models.outbreak.findById(a.source.existing.outbreakId).then(function(t){if(!t)throw app.utils.apiError.getError("MODEL_NOT_FOUND",{model:app.models.outbreak.modelName,id:a.source.existing.outbreakId});return app.models.outbreak.helpers.resolvePersonVisualIdTemplate(t,a.target.visualId,a.source.existingRaw.type,e.isNewInstance?null:a.source.existing.id)}).then(function(e){a.target.visualId=e,t()}).catch(t):t()}).catch(t)}),e.observe("before delete",function(e,t){e.currentInstance.visualId&&(e.data.documents=e.currentInstance.documents||[],e.data.documents.push({type:"LNG_REFERENCE_DATA_CATEGORY_DOCUMENT_TYPE_ARCHIVED_ID",number:e.currentInstance.visualId}),e.data.visualId=null),t()}),e.observe("after save",function(e,t){let a=e.instance;return!e.isNewInstance&&"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===a.type&&e.options.triggerRelationshipUpdates&&app.models.relationship.find({where:{"persons.id":a.id,and:[{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"},{"persons.type":"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"}]}}).then(function(t){const a=[];return t.forEach(function(t){a.push(t.updateAttributes({},e.options))}),Promise.all(a)}).catch(function(e){app.logger.error(e)}),t()}),e.findOrCountPossibleDuplicates=function(e,t){return null==e&&(e={}),new Promise(function(a,s){let o=e.where||{};o={$and:[{$or:[{deleted:{$ne:!0}},{deleted:{$exists:!1}}]},o||{}]},app.dataSources.mongoDb.connector.collection("person").find(o).toArray(function(r,n){if(r)return s(r);let i;(i=t?personDuplicate.count.bind(null,n):personDuplicate.find.bind(null,n,Object.assign({where:o},e)))(function(e,t){return e?s(e):a(t)})})})},e.updateDateOfLastContactIfNeeded=function(e){if(app.utils.helpers.getValueFromContextOptions(e,"updateDateOfLastContactIfNeeded"))return Promise.resolve();let t=e.instance;return app.models.relationship.findOne({order:"contactDate DESC",where:{"persons.id":t.id,active:!0}}).then(function(a){let s;if(a&&(s=a.contactDate),!s||s instanceof Date||(s=new Date(s)),!t.dateOfLastContact||t.dateOfLastContact instanceof Date||(t.dateOfLastContact=new Date(t.dateOfLastContact)),!t.dateOfLastContact&&s||t.dateOfLastContact&&!s||t.dateOfLastContact&&s&&t.dateOfLastContact.getTime()!==s.getTime())return app.utils.helpers.setValueInContextOptions(e,"updateDateOfLastContactIfNeeded",!0),t.updateAttributes({dateOfLastContact:s},e.options)})},e.observe("after save",function(t,a){t.isNewInstance?a():e.updateDateOfLastContactIfNeeded(t).then(function(){a()}).catch(a)}),e.getPeoplePerLocation=function(t,a,s){return new Promise((o,r)=>{let n;Array.isArray(s.locationIds)&&s.locationIds.length&&(n=s.locationIds),app.models.location.getSubLocationsWithDetails(n,[],{},function(n,i){n&&r(n);let d,l=i.map(e=>e.id);s.reportingGeographicalLevelId||r(app.utils.apiError.getError("MISSING_REQUIRED_PROPERTY",{model:app.models.outbreak.modelName,properties:"reportingGeographicalLevelId"})),app.models.location.rawFind({and:[{id:{inq:l}},{geographicalLevelId:s.reportingGeographicalLevelId}]}).then(e=>{let o=e.map(e=>e.id),r=app.models.location.buildHierarchicalLocationsList(i,null,s.reportingGeographicalLevelId),n={},l={[app.models.location.noLocation.id]:{location:app.models.location.noLocation,people:[]}};e.forEach(e=>{l[e.id]={location:e,people:[]}}),app.models.location.createLocationCorelationMap(r,o,n);let p={};if("case"===t)p={where:{outbreakId:s.id}};else{let e=[];a?a.dateOfFollowUp?(e=[helpers.getDate(a.dateOfFollowUp),helpers.getDateEndOfDay(a.dateOfFollowUp)],delete a.dateOfFollowUp):a.startDate&&a.endDate&&(e=[helpers.getDate(a.startDate),helpers.getDateEndOfDay(a.endDate)]):e=[helpers.getDate(),helpers.getDateEndOfDay()],p={where:{outbreakId:s.id},include:{relation:"followUps",scope:{where:{date:{between:e}}}}}}return d=app.utils.remote.mergeFilters(p,a||{}),app.models[t].rawFind(d.where,{order:{"followUp.endDate":-1}}).then(e=>[e,n,l,d])}).then(a=>{let r=a[1],n=a[2];return new Promise(function(e){if("case"!==t){let t={};a[0].forEach(function(e){t[e.id]=e,e.followUps=[]});let o=app.utils.remote.searchByRelationProperty.convertIncludeQueryToFilterQuery(d,{},!1);return app.models.followUp.rawFind({and:[{personId:{inq:Object.keys(t)},outbreakId:s.id},o.followUps]}).then(function(a){a.forEach(function(e){t[e.personId].followUps.push(e)}),e(Object.values(t))})}e(app.utils.remote.searchByRelationProperty.deepSearchByRelationProperty(a[0],a[3]))}).then(function(t){t.forEach(t=>{const a=e.getCurrentAddress(t);let s;a&&(s=a.locationId),s?r[s]&&n[r[s]].people.push(t):n[app.models.location.noLocation.id].people.push(t)}),o({peopleDistribution:Object.values(n).filter(e=>e.people.length),locationCorelationMap:r})})}).catch(n)})})},e.getCurrentAddress=function(e){let t;return Array.isArray(e.addresses)&&e.addresses.length&&(t=e.addresses.filter(e=>"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE"===e.typeId).pop()),t},e.prototype.getCurrentAddress=function(){return e.getCurrentAddress(this)},e.prototype.getMovement=function(){let e=[];Array.isArray(this.addresses)&&this.addresses.length&&(e=this.addresses.filter(e=>!!e.geoLocation)).sort(function(e,t){return!e.date&&t.date?1:e.date&&!t.date?-1:e.date||t.date?new Date(e.date).getTime()-new Date(t.date).getTime():0});const t=[];return e.forEach(function(e){e.locationId&&t.push(app.models.location.findById(e.locationId).then(function(t){e.location=t}))}),Promise.all(t).then(function(){return e})},e.findDuplicatesByType=function(e,t,a,s){const o=function(e){let t={$and:[]};for(let a in e)t.$and.push({$and:[{[a]:{$ne:null}},{[a]:e[a]}]});return t},r={outbreakId:t,type:a,$or:[]};return s.firstName&&s.lastName&&r.$or.push(o({firstName:s.firstName,lastName:s.lastName}),o({firstName:s.lastName,lastName:s.firstName})),s.firstName&&s.middleName&&r.$or.push(o({firstName:s.firstName,middleName:s.middleName}),o({firstName:s.middleName,middleName:s.firstName})),s.middleName&&s.lastName&&r.$or.push(o({middleName:s.middleName,lastName:s.lastName}),o({middleName:s.lastName,lastName:s.middleName})),s.documents&&s.documents.forEach(e=>{e.type&&e.number&&r.$or.push({documents:{$elemMatch:{$and:[{$and:[{type:{$ne:null}},{type:e.type}]},{$and:[{number:{$ne:null}},{number:e.number}]}]}}})}),s.id&&(r._id={$ne:s.id}),r.$or.length||delete r.$or,r.$or?app.models.person.rawFind(r,{skip:e.skip,limit:e.limit}):Promise.resolve([])},e.getAvailablePeople=function(t,a,s){return s.where={and:[{outbreakId:t,id:{neq:a},classification:{nin:app.models.case.discardedCaseClassifications}},s.where?s.where:{}]},e.find(s).then(s=>e.determineIfRelationshipsExist(t,a,s))},e.getAvailablePeopleCount=function(t,a,s){return s={and:[{outbreakId:t},{id:{neq:a}},s||{}]},e.count(s)},e.determineIfRelationshipsExist=function(e,t,a){return new Promise((e,s)=>{const o=(a||[]).map(e=>e.id);app.models.relationship.rawFind({or:[{"persons.0.id":t,"persons.1.id":{inq:o}},{"persons.1.id":t,"persons.0.id":{inq:o}}]},{projection:{_id:1,persons:1}}).then(s=>{(s||[]).forEach(e=>{let s=0;e.persons[0].id===t&&(s=1);const o=_.find(a,t=>t.id===e.persons[s].id);o&&(o.matchedDuplicateRelationships||(o.matchedDuplicateRelationships=[]),o.matchedDuplicateRelationships.push({relationshipId:e.id,relatedPerson:e.persons[s]}))}),e(a)}).catch(s)})},e.getBarsTransmissionChainsData=function(e,t,a){(t=t||{}).where=t.where||{};const s=[{$match:app.utils.remote.convertLoopbackFilterToMongo({$and:[{outbreakId:e},{$or:[{deleted:!1},{deleted:{$eq:null}}]},{type:{$in:["LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]}},{classification:{nin:app.models.case.discardedCaseClassifications}},t.where]})},{$lookup:{from:"labResult",localField:"_id",foreignField:"personId",as:"labResults"}},{$lookup:{from:"relationship",localField:"_id",foreignField:"persons.id",as:"relationships"}},{$project:{id:"$_id",visualId:1,type:1,firstName:{$cond:{if:{$eq:["$type","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},then:"$name",else:"$firstName"}},lastName:1,date:{$cond:{if:{$eq:["$type","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},then:"$date",else:"$dateOfOnset"}},outcomeId:1,dateOfOutcome:1,safeBurial:1,dateOfBurial:1,addresses:{$cond:{if:{$eq:["$type","LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"]},then:["$address"],else:"$addresses"}},dateRanges:{$map:{input:"$dateRanges",as:"dateRange",in:{typeId:"$$dateRange.typeId",locationId:"$$dateRange.locationId",startDate:"$$dateRange.startDate",endDate:"$$dateRange.endDate",centerName:"$$dateRange.centerName"}}},labResults:{$map:{input:{$filter:{input:"$labResults",as:"lab",cond:{$or:[{$eq:["$$lab.deleted",!1]},{$eq:["$$lab.deleted",null]}]}}},as:"lab",in:{dateOfResult:"$$lab.dateOfResult",dateSampleTaken:"$$lab.dateSampleTaken",testType:"$$lab.testType",result:"$$lab.result"}}},relationships:{$map:{input:{$filter:{input:"$relationships",as:"rel",cond:{$or:[{$eq:["$$rel.deleted",!1]},{$eq:["$$rel.deleted",null]}]}}},as:"rel",in:{persons:"$$rel.persons"}}}}}];app.dataSources.mongoDb.connector.collection("person").aggregate(s).toArray().then(e=>{const t=(e,t)=>e||t?e?t?helpers.getDate(e).diff(helpers.getDate(t)):-1:1:0,s=e=>e?e.trim().toLowerCase().replace(/[^a-z0-9\s]/gi,"").replace(/\s\s+/g," "):e,o={personsMap:{},personsOrder:[],relationships:{},minGraphDate:null,maxGraphDate:null};return(e||[]).forEach(e=>{if(e.addresses&&e.addresses.sort((e,a)=>t(e.date,a.date)),e.relationships&&((e.relationships||[]).forEach(t=>{t.persons.length>1&&("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===t.persons[0].type||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"===t.persons[0].type)&&("LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CASE"===t.persons[1].type||"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_EVENT"===t.persons[1].type)&&(t.persons[0].source&&t.persons[0].id===e.id||t.persons[1].source&&t.persons[1].id===e.id)&&(o.relationships[e.id]||(o.relationships[e.id]=[]),o.relationships[e.id].push(t.persons[0].id===e.id?t.persons[1].id:t.persons[0].id))}),delete e.relationships),e.lastGraphDate=helpers.getDate(e.date),e.firstGraphDate=helpers.getDate(e.date),e.labResults){const t=e.labResults||[];e.labResults=[],t.forEach(t=>{if(t.dateOfResult||t.dateSampleTaken){if(t.dateOfResult){const a=helpers.getDate(t.dateOfResult);e.lastGraphDate=e.lastGraphDate?a.isAfter(e.lastGraphDate)?a:e.lastGraphDate:a,e.firstGraphDate=e.firstGraphDate?a.isBefore(e.firstGraphDate)?a:e.firstGraphDate:a}else{const a=helpers.getDate(t.dateSampleTaken);e.lastGraphDate=e.lastGraphDate?a.isAfter(e.lastGraphDate)?a:e.lastGraphDate:a,e.firstGraphDate=e.firstGraphDate?a.isBefore(e.firstGraphDate)?a:e.firstGraphDate:a}e.labResults.push(t)}})}if(e.dateRanges){const t=e.dateRanges||[];e.dateRanges=[],t.forEach(t=>{if(!t.endDate&&!t.startDate)return;t.startDate=t.startDate?helpers.getDate(t.startDate):helpers.getDate(e.date),t.endDate=t.endDate?helpers.getDate(t.endDate):helpers.getDate(),t.startDate&&(e.firstGraphDate=e.firstGraphDate?t.startDate.isBefore(e.firstGraphDate)?t.startDate:e.firstGraphDate:t.startDate),e.lastGraphDate=e.lastGraphDate?t.endDate.isAfter(e.lastGraphDate)?t.endDate:e.lastGraphDate:t.endDate,e.centerNames||(e.centerNames={});const a=t.centerName?t.centerName.trim():null;a&&(e.centerNames[s(a)]=a),e.dateRanges.push(t)})}if(e.dateOfOutcome){const t=helpers.getDate(e.dateOfOutcome);e.firstGraphDate=e.firstGraphDate?t.isBefore(e.firstGraphDate)?t:e.firstGraphDate:t,e.lastGraphDate=e.lastGraphDate?t.isAfter(e.lastGraphDate)?t:e.lastGraphDate:t}if(e.dateOfBurial){const t=helpers.getDate(e.dateOfBurial);e.firstGraphDate=e.firstGraphDate?t.isBefore(e.firstGraphDate)?t:e.firstGraphDate:t,e.lastGraphDate=e.lastGraphDate?t.isAfter(e.lastGraphDate)?t:e.lastGraphDate:t}o.minGraphDate=o.minGraphDate?e.firstGraphDate.isBefore(o.minGraphDate)?e.firstGraphDate:o.minGraphDate:e.firstGraphDate,o.maxGraphDate=o.maxGraphDate?e.lastGraphDate.isAfter(o.maxGraphDate)?e.lastGraphDate:o.maxGraphDate:e.lastGraphDate,e.centerNames=e.centerNames?Object.values(e.centerNames).sort():[],e.centerNamesSortBy=e.centerNames.map(e=>s(e)).join(),delete e._id,o.personsMap[e.id]=e}),o.personsOrder=Object.values(o.personsMap).sort((e,a)=>{const s=e.centerNamesSortBy||a.centerNamesSortBy?e.centerNamesSortBy?a.centerNamesSortBy?e.centerNamesSortBy.localeCompare(a.centerNamesSortBy):-1:1:0;return 0!==s?s:t(e.date,a.date)}).map(e=>e.id),_.each(o.personsMap,e=>{delete e.centerNamesSortBy}),a(null,o)}).catch(a)},e.sanitizeVisualId=(e=>e?e.replace(/YYYY/g,moment().format("YYYY")).replace(/\*/g,""):e),e.getPeopleContactsAndExposures=function(e,t){const a={};for(let e of t)a[e]={numberOfContacts:0,numberOfExposures:0};return app.models.relationship.find({where:{outbreakId:e,"persons.id":{inq:t}}}).then(e=>{for(let t of e){const e=t.persons;for(let t of e)a[t.id]&&(t.source?a[t.id].numberOfContacts++:a[t.id].numberOfExposures++)}}).then(()=>a)}};
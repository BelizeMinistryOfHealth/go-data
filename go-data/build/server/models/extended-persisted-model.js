"use strict";const app=require("../../server/server"),dbSync=require("../../components/dbSync"),_=require("lodash"),url=require("url"),path=require("path"),fs=require("fs");module.exports=function(e){const t=e;e.hasController=!0,e.fieldLabelsMap={id:"LNG_COMMON_MODEL_FIELD_LABEL_ID",createdAt:"LNG_COMMON_MODEL_FIELD_LABEL_CREATED_AT",createdBy:"LNG_COMMON_MODEL_FIELD_LABEL_CREATED_BY",updatedAt:"LNG_COMMON_MODEL_FIELD_LABEL_UPDATED_AT",updatedBy:"LNG_COMMON_MODEL_FIELD_LABEL_UPDATED_BY",deleted:"LNG_COMMON_MODEL_FIELD_LABEL_DELETED",deletedAt:"LNG_COMMON_MODEL_FIELD_LABEL_DELETED_AT"},e.possibleRecordUsage={},e.userSupportedRelations=["createdByUser","updatedByUser"],app.on("started",function(){t.possibleRecordUsageMonitoredFieldsMap={locationFields:app.models.location,referenceDataFields:app.models.referenceData};const e="possibleRecordUsageMonitoredFieldsMap";app.models().forEach(function(r){r.modelName!==app.models.person.modelName&&Object.keys(t[e]).forEach(function(o){Array.isArray(r[o])&&(t.possibleRecordUsage[t[e][o].modelName]||(t.possibleRecordUsage[t[e][o].modelName]={}),"function"==typeof r.find&&(t.possibleRecordUsage[t[e][o].modelName][r.modelName]=r[o].map(function(e){return e.replace(/\[]/g,"")})))})})}),e.findModelUsage=function(e,r,o){const n=[],s=this.modelName,i=t.possibleRecordUsage[s]?Object.keys(t.possibleRecordUsage[s]):[];return i.forEach(function(i){const a=[];t.possibleRecordUsage[s][i].forEach(function(t){a.push({[t]:e})});const d=app.utils.remote.mergeFilters({where:{or:a}},r);o?n.push(app.models[i].count(d.where)):n.push(app.models[i].rawFind(d.where))}),Promise.all(n).then(function(e){const t={};return e.forEach(function(e,r){t[i[r]]=e}),t})},e.isRecordInUse=function(e){return this.findModelUsage(e,{},!0).then(function(e){return Object.values(e).reduce(function(e,t){return e+t})>0})},e.observe("after save",function(e,t){if(e.options._sync||e.options._init)return t();let r=e.Model.modelName;if(-1===dbSync.syncModels.indexOf(r))return t();app.models.systemSettings.getCache().then(function(r){let o=(r.upstreamServers||[]).filter(function(e){return e.syncEnabled&&e.syncOnEveryChange});if(!o.length)return t();let n=app.models.sync,s=n.pending.servers;return o.forEach(function(t){app.logger.debug(`Sync on every change is enabled for server '${t.name}'`),s[t.url]=!0,n.checkAndTriggerPendingSync(t,e.options)}),t()}).catch(function(e){app.logger.debug(`Failed to get the system settings to check if any upstream server is configured for sync on every change. Error: ${e}`)})}),app.remotes().before("**",function(t,r){let o=require("../config");if(o.enableConfigRewrite){const e=t.req.get("origin");if(!_.isEmpty(e)){const t=url.parse(e);if(t&&t.hostname&&"localhost"!==t.hostname.toLowerCase()&&"127.0.0.1"!==t.hostname.toLowerCase()){const e=path.resolve(`${__dirname}/../config.json`);delete require.cache[e],o=require("../config");const r=t.protocol&&_.get(o,"public.protocol").toLowerCase()!==t.protocol.replace(":","").toLowerCase(),n=t.hostname&&_.get(o,"public.host").toLowerCase()!==t.hostname.toLowerCase(),s=null===t.port?"80":t.port,i=s&&_.get(o,"public.port").toString().toLowerCase()!==s.toString().toLowerCase();if(r||n||i){r&&_.set(o,"public.protocol",t.protocol.replace(":","")),n&&_.set(o,"public.host",t.hostname),i&&_.set(o,"public.port",s);const e=path.resolve(__dirname+"/../config.json");fs.writeFileSync(e,JSON.stringify(o,null,2)),app.logger.info("Config file ( %s ) public data updated to: %s taken FROM %s",e,JSON.stringify(o.public),JSON.stringify(t))}}}}if("GET"===_.get(t,"req.method")||("PUT"===_.get(t,"req.method")||"PATCH"===_.get(t,"req.method"))&&_.get(t,"req.query.retrieveCreatedUpdatedBy")){const r=_.get(t,"args.filter.include")||{},o=_.filter(r,t=>e.userSupportedRelations.indexOf(t.relation)>-1);o.length>0?(_.set(t,"args.filter.include",_.filter(r,t=>e.userSupportedRelations.indexOf(t.relation)<0)),"count"===_.get(t,"method.returns.0.arg")||_.set(t,"req.options._userRelations",o)):_.get(t,"req.query.retrieveCreatedUpdatedBy")&&_.set(t,"req.options._userRelations",_.map(e.userSupportedRelations,e=>({relation:e})))}r()}),app.remotes().after("**",function(t,r){e.retrieveUserSupportedRelations(t,t.result,r)}),e.retrieveUserSupportedRelations=function(e,t,r){const o=_.get(e,"req.options._userRelations");if(o&&o.length>0){delete e.req.options._userRelations;const n=!!_.find(o,{relation:"createdByUser"}),s=!!_.find(o,{relation:"updatedByUser"}),i=_.isArray(t)?t:[t],a={};if(_.each(i,e=>{n&&e.createdBy&&"unavailable"!==e.createdBy&&(a[e.createdBy]=!0),s&&e.updatedBy&&"unavailable"!==e.updatedBy&&(a[e.updatedBy]=!0)}),!_.isEmpty(a))return void app.models.user.find({deleted:!0,where:{id:{inq:Object.keys(a)}}}).then(e=>{e=_.transform(e,(e,t)=>{e[t.id]=t.toJSON()},{}),_.each(i,t=>{n&&t.createdBy&&e[t.createdBy]&&(t.createdByUser=e[t.createdBy]),s&&t.updatedBy&&e[t.updatedBy]&&(t.updatedByUser=e[t.updatedBy])}),r()})}r()}};
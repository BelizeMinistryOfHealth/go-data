"use strict";const async=require("async"),_=require("lodash"),args=process.argv,path=require("path"),supportedArguments=["init-database","migrate-database","reset-admin-password","install-script","dump-help-data","dump-language-data","dump-outbreak-template-data","remove-unused-language-tokens","populate-with-dummy-data","determine-and-dump-reference-data-items","populate-missing-language-tokens","migrate-case-centre-name"],runFunctions=[],PARSE_TYPE={BOOLEAN:"boolean",STRING:"string"},parseArgumentValues=e=>{const t={};return(e||[]).forEach(e=>{const a=_.isObject(e)?e.name:e;if(!a)return void console.log("Invalid argument...");const r=new RegExp(`^${a}=(.+)`,"i");(args||[]).forEach(s=>{if(r.test(s)){const n=r.exec(s);if(n&&n.length>=1&&(t[a]=n[1],_.isObject(e)&&e.type))switch(e.type){case PARSE_TYPE.BOOLEAN:const r=t[a].toString().toLowerCase();t[a]="true"===r||"1"===r}}})}),t};let methodRelevantArgs;const routines={initDatabase:function(){console.log("Setting Up Database Initialisation..."),[require("./scripts/initDatabaseCollections"),require("./scripts/migrateDatabaseCollections"),require("./scripts/defaultRolesAndSysAdmin"),require("./scripts/defaultLanguages"),require("./scripts/defaultSystemSettings"),require("./scripts/defaultReferenceData"),require("./scripts/defaultLocations"),require("./scripts/defaultHelpData"),require("./scripts/defaultOutbreakTemplateData"),require("./scripts/migrateModelData")].forEach(function(e){runFunctions.push(e)})},migrateDatabase:function(){console.log("Setting Up Database Migration..."),[require("./scripts/migrateDatabaseCollections"),require("./scripts/defaultLanguages"),require("./scripts/defaultReferenceData"),require("./scripts/defaultHelpData"),require("./scripts/defaultOutbreakTemplateData"),require("./scripts/migrateModelData"),require("./scripts/migrateRolesAndUsers"),require("./scripts/migrateCaseCentreName"),require("./scripts/migrateLanguageTokens").addMissingTokenSortKeys].forEach(function(e){runFunctions.push(e)})},resetAdminPassword:function(){console.log("Resetting Administrative Password..."),[require("./scripts/resetAdministrativePassword")].forEach(function(e){runFunctions.push(e)})},installScript:function(){let e=/script=(.+)(?:\s+|$)/.exec(args.toString());if(!e)return console.error("No valid script name passed. Use -- script=<scriptName> to specify a script");e=e.pop(),console.log(`Running install script ${e}`),[require(`./scripts/${e}`)].forEach(function(e){runFunctions.push(e)})},dumpHelpData:function(){let e=/export=(.+)(?:\s+|$)/.exec(args.toString());if(!e)return console.error("No valid file path. Use -- export=<filePath> to specify a file where to export data");e=e.pop();const t=path.resolve(e);console.log("Dumping Help Data..."),[require("./scripts/dumpHelpData")].forEach(function(e){runFunctions.push(e(t))})},dumpLanguageData:function(){let e=/export=(.+)(?:\s+|$)/.exec(args.toString());if(!e)return console.error("No valid file path. Use -- export=<filePath> to specify a file where to export data");e=e.pop();const t=path.resolve(e);console.log("Dumping Language Data..."),[require("./scripts/dumpLanguageData")].forEach(function(e){runFunctions.push(e(t))})},dumpOutbreakTemplateData:function(){let e=/export=(.+)(?:\s+|$)/.exec(args.toString());if(!e)return console.error("No valid file path. Use -- export=<filePath> to specify a file where to export data");e=e.pop();const t=path.resolve(e);console.log("Dumping Outbreak Template Data..."),[require("./scripts/dumpOutbreakTemplateData")].forEach(function(e){runFunctions.push(e(t))})},removeUnusedLanguageTokens:function(){let e=/confirm=(.+)(?:\s+|$)/.exec(args.toString());e?console.log("REMOVAL SELECTED"):console.log("NO REMOVAL SELECTED"),console.log("Determining unused language tokens"),[require("./scripts/removeUnusedLanguageTokens")].forEach(function(t){runFunctions.push(t(e))})},populateWithDummyData:function(){const e=["outbreakName","casesNo","contactsNo","eventsNo","locationsNo","subLocationsPerLocationNo","subLocationsLevelsNo","minNoRelationshipsForEachRecord","maxNoRelationshipsForEachRecord"];methodRelevantArgs=parseArgumentValues(e);let t=!1;_.each(e,a=>{if(!methodRelevantArgs[a])return console.log(`The following arguments are required: ${e.join(", ")}`),t=!0,!1}),t||(console.log("Populating database"),[require("./scripts/populateWithDummyData")].forEach(function(e){runFunctions.push(e(methodRelevantArgs))}))},determineAndDumpReferenceDataItems:function(){const e=[{name:"checkDefaultReferenceData",type:PARSE_TYPE.BOOLEAN},{name:"checkDefaultOutbreakTemplateData",type:PARSE_TYPE.BOOLEAN}];methodRelevantArgs=parseArgumentValues([...e,...[{name:"export",type:PARSE_TYPE.STRING}]]);let t=!1;_.each(e,a=>{if(void 0===methodRelevantArgs[a.name])return console.log(`The following arguments are required: ${e.map(e=>e.name).join(", ")}`),t=!0,!1}),t||(console.log("Determine missing reference data items"),[require("./scripts/determineAndDumpReferenceDataItems")].forEach(function(e){runFunctions.push(e(methodRelevantArgs))}))},populateMissingLanguageTokens:function(){console.log("Determine and populate missing language tokens"),[require("./scripts/populateMissingLanguageTokens")].forEach(function(e){runFunctions.push(e)})},migrateCaseCentreName:function(){console.log("Determine and create reference center names from text center names"),[require("./scripts/migrateCaseCentreName")].forEach(function(e){runFunctions.push(e)})}};supportedArguments.forEach(function(e){-1!==args.indexOf(e)&&routines[_.camelCase(e)]()}),runFunctions.length?async.series(runFunctions,function(e){e&&(console.error(JSON.stringify(e)),process.exit(1)),console.log("Install finished successfully"),process.exit()}):console.log(`No valid arguments passed. Nothing to do. Available arguments: ${supportedArguments.join(", ")}`);
"use strict";const app=require("../../server"),_=require("lodash"),async=require("async"),languageJSON=require("./../../config/languages/english_us");function run(e){const o=e=>{let o=_.get(e,"definition.settings.mongodb.collection");return o||(o=e.modelName),o},a=o(app.models.languageToken),t=[a,o(app.models.AccessToken),o(app.models.User),o(app.models.ACL),o(app.models.Role),o(app.models.auditLog),o(app.models.systemSettings),o(app.models.databaseActionLog),o(app.models.syncLog),o(app.models.databaseExportLog),o(app.models.address),o(app.models.Email),o(app.models.language),o(app.models.log),o(app.models.securityQuestion),o(app.models.importableFile),o(app.models.sync),o(app.models.backup),o(app.models.maps),o(app.models.fileAttachment),o(app.models.device),o(app.models.deviceHistory),o(app.models.importMapping),o(app.models.filterMapping)],n={};app.models().forEach(function(e){const a=o(e);e.dataSource&&!t.includes(a)&&(n[a]=e)});const s={};Object.keys(languageJSON.sections||[]).forEach(e=>{Object.keys(languageJSON.sections[e]).forEach(e=>{s[e]=1})});const p=e=>{e&&_.isString(e)&&e.startsWith("LNG_")&&void 0===s[e]&&(s[e]=1)},l=e=>{_.isArray(e)&&(e||[]).forEach(e=>{_.isArray(e)?l(e):_.isObject(e)?r(e):p(e)})},r=e=>{_.isObject(e)&&_.each(e,e=>{_.isArray(e)?l(e):_.isObject(e)?r(e):p(e)})},d=[];Object.keys(n).forEach(e=>{d.push(o=>{app.logger.debug(`Retrieving records from '${e}'`),app.dataSources.mongoDb.connector.collection(e).find({$or:[{deleted:!1},{deleted:{$eq:null}}]}).toArray().then(function(a){app.logger.debug(`Records retrieved for '${e}'`),(a||[]).forEach(e=>{r(e)}),o()}).catch(o)})}),n[Object.keys(n)[0]].dataSource.connect(o=>{if(o)return e(o);async.parallelLimit(d,10,function(o){if(o)return e(o);app.logger.debug(`Found ${Object.keys(s).length} tokens that we need to keep`),app.logger.debug("Retrieve unused tokens"),app.dataSources.mongoDb.connector.collection(a).find({$or:[{deleted:!1},{deleted:{$eq:null}}],token:{$nin:Object.keys(s)}},{projection:{_id:1,token:1,languageId:1}}).toArray().then(function(o){app.logger.debug("Unused tokens retrieved");const t=[];if((o||[]).forEach(e=>{t.push(e._id),module.confirmRemoval?app.logger.debug(`Preparing to remove token '${e.token}' from language '${e.languageId}'`):app.logger.debug(`Should remove token '${e.token}' from language '${e.languageId}'`)}),module.confirmRemoval){app.logger.debug(`Removing ${t.length} tokens`);const o=new Date;app.dataSources.mongoDb.connector.collection(a).updateMany({_id:{$in:t}},{$set:{deleted:!0,deletedAt:o}}).then(()=>{app.logger.debug(`Removed ${t.length} tokens`),e()}).catch(e)}else app.logger.debug(`Should remove ${t.length} tokens`),e()}).catch(e)})})}module.exports=(e=>(module.confirmRemoval=e,run));
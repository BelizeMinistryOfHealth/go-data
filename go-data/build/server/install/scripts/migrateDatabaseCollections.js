"use strict";const app=require("../../server"),migrations=[];let connected=!1;const _=require("lodash");let collectionsMap;function run(e){if(migrations.length){migrations.shift()(function(o){if(o)return e(o);run(e)})}else console.log("Migration complete."),e()}app.models().forEach(function(e){const o=e.dataSource;o&&e.modelName.match(/^[a-z]/)&&(void 0===collectionsMap&&(collectionsMap={},migrations.push(function(n){const t=()=>e.dataSource.connector.db.listCollections().toArray().then(e=>{(e||[]).forEach(e=>{collectionsMap[e.name]=e})});connected?t().then(n).catch(n):o.connect(function(){t().then(n).catch(n)})})),migrations.push(function(n){const t=function(e){let o=_.get(e,"definition.settings.mongodb.collection");return o||(o=e.modelName),collectionsMap&&collectionsMap[o]&&e.settings&&e.settings.removeIndexes&&e.settings.removeIndexes.length?new Promise(function(n,t){console.log(`Removing indexes for ${e.modelName}...`);const c=[];return e.settings.removeIndexes.forEach(n=>{c.push(e.dataSource.connector.db.collection(o).indexExists(n).then(t=>{if(t)return console.log(`Removing index '${n}' for ${e.modelName}`),e.dataSource.connector.db.collection(o).dropIndex(n).then(()=>{console.log(`Finished removing index '${n}' for ${e.modelName}`)});console.log(`Index '${n}' from ${e.modelName} was already removed`)}))}),Promise.all(c).then(()=>{console.log(`Finished removing indexes for ${e.modelName}...`),n()}).catch(t)}):Promise.resolve()};connected?t(e).then(()=>{console.log(`Migrating ${e.modelName}...`),o.autoupdate(e.modelName,n)}):o.connect(function(){t(e).then(()=>{console.log(`Migrating ${e.modelName}...`),o.autoupdate(e.modelName,n)})})}))}),module.exports=run;
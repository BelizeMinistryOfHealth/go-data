"use strict";const MongoDBHelper=require("../../../components/mongoDBHelper"),Async=require("async"),DataSources=require("../../datasources"),_=require("lodash"),Uuid=require("uuid"),generateLanguageTokenID=function(e,n){return e.length>900&&(e=`${e.substring(0,100)}_${_.snakeCase(Uuid.v4().toUpperCase())}`),`${e}_${_.snakeCase(n).toUpperCase()}`},batchSize=1e3,centreNameReferenceDataCategory="LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME",now=new Date,authorInfo={createdBy:"system",updatedBy:"system",createdAt:now,updatedAt:now};let referenceDataCollection=null,languageTokenCollection=null,personCollection=null,languageIds=[],mongoDBConnection=null;const centreNames={},executeNextBatch=function(e){mongoDBConnection.collection("person").find({dateRanges:{$elemMatch:{centerName:{$exists:!0,$ne:null,$not:/^LNG_REFERENCE_DATA/}}}},{projection:{_id:1,dateRanges:1}}).limit(1e3).toArray().then(n=>{if(!n||0===n.length)return e();let t=[],a=[];n.forEach(e=>{e.dateRanges.forEach(e=>{if(!e.centerName)return void(e.centerName=e.centerName||null);const n=e.centerName.trim();if(!n||n.startsWith("LNG_REFERENCE_DATA"))return void(e.centerName=n||null);const o=`${centreNameReferenceDataCategory}_${_.snakeCase(n).toUpperCase()}`.toUpperCase();if(!centreNames[o]){centreNames[o]={value:n,id:`${centreNameReferenceDataCategory}_${_.snakeCase(n).toUpperCase()}`};const e=centreNames[o].id;console.log(`Creating ref data '${e}'`),t.push(Object.assign({},{_id:e,categoryId:centreNameReferenceDataCategory,value:e,description:e+"_DESCRIPTION",readOnly:!1,active:!0,deleted:!1},authorInfo)),languageIds.forEach(t=>{const o=generateLanguageTokenID(e,t);console.log(`Creating lang token '${o}'`),a.push(Object.assign({},{_id:o,token:e,tokenSortKey:e.substr(0,128),languageId:t,translation:n},authorInfo)),a.push(Object.assign({},{_id:generateLanguageTokenID(`${e}_DESCRIPTION`,t),token:`${e}_DESCRIPTION`,tokenSortKey:`${e}_DESCRIPTION`.substr(0,128),languageId:t,translation:""},authorInfo))})}e.centerName=centreNames[o].id})});let o=[];return t.length&&o.push(referenceDataCollection.insertMany(t)),a.length&&o.push(languageTokenCollection.insertMany(a)),Promise.all(o).then(()=>{t=[],a=[],Async.parallelLimit(n.map(e=>n=>{console.log(`Updating person '${e._id}' dateRanges`),personCollection.updateOne({_id:e._id},{$set:{dateRanges:e.dateRanges}},e=>e?n(e):n())}),50,n=>{if(n)return e(n);executeNextBatch(e)})})})},run=function(e){MongoDBHelper.getMongoDBConnection({ignoreUndefined:DataSources.mongoDb.ignoreUndefined}).then(n=>{mongoDBConnection=n,referenceDataCollection=n.collection("referenceData"),languageTokenCollection=n.collection("languageToken"),personCollection=n.collection("person"),n.collection("language").find({deleted:{$ne:!0}},{projection:{_id:1}}).toArray().then(e=>{languageIds=e.map(e=>e._id)}).then(()=>referenceDataCollection.find({categoryId:centreNameReferenceDataCategory},{projection:{_id:1,value:1}}).toArray()).then(n=>{(n||[]).forEach(e=>{centreNames[e.value.toUpperCase()]={value:e.value,id:e._id}}),executeNextBatch(()=>{console.log("Finished migrating center names"),e()})})}).catch(e)};module.exports=run;
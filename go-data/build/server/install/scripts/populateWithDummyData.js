"use strict";const app=require("../../server"),common=require("./_common"),async=require("async"),moment=require("moment"),_=require("lodash");let options={_init:!0,_sync:!0};function run(t){const e=module.methodRelevantArgs.outbreakName,o=module.methodRelevantArgs.casesNo,a=module.methodRelevantArgs.contactsNo,n=module.methodRelevantArgs.eventsNo,i=module.methodRelevantArgs.locationsNo,s=module.methodRelevantArgs.subLocationsPerLocationNo,E=module.methodRelevantArgs.subLocationsLevelsNo,c=module.methodRelevantArgs.minNoRelationshipsForEachRecord,d=module.methodRelevantArgs.maxNoRelationshipsForEachRecord,r={min:-10,max:10},l={min:2,max:20},R={lat:{min:-.2,max:.2},lng:{min:-.2,max:.2}},p={lat:{min:-.2,max:.2},lng:{min:-.2,max:.2}},A={lat:{min:-.2,max:.2},lng:{min:-.2,max:.2}},g=5,m=70,C=moment.utc().startOf("day").toISOString(),O=1e4,N=2e4,L=moment().utc().add(-6,"months").startOf("day"),u="LNG_REFERENCE_DATA_CATEGORY_LOCATION_GEOGRAPHICAL_LEVEL_ADMIN_LEVEL_0",T={description:"Created by populate script",disease:"LNG_REFERENCE_DATA_CATEGORY_DISEASE_EBOLA_VIRUS_DISEASE",countries:[],locationIds:[],startDate:L.toISOString(),endDate:void 0,longPeriodsBetweenCaseOnset:7,periodOfFollowup:1,frequencyOfFollowUp:1,frequencyOfFollowUpPerDay:1,noDaysAmongContacts:3,noDaysInChains:1,noDaysNotSeen:3,noLessContacts:1,noDaysNewContacts:3,caseInvestigationTemplate:[],contactFollowUpTemplate:[],labResultsTemplate:[],caseIdMask:"*",contactIdMask:"*",reportingGeographicalLevelId:u},S={synonyms:[],identifiers:[],active:!0,populationDensity:void 0,parentLocationId:void 0},h={visualId:void 0,middleName:void 0,description:"Created by populate script",occupation:void 0,documents:[],isDateOfReportingApproximate:!1,dateOfInfection:void 0,dateBecomeCase:void 0,dateRanges:[],classificationHistory:[],dateBecomeContact:void 0,followUp:void 0,wasContact:!1,safeBurial:!1,riskReason:void 0,transferRefused:!1,questionnaireAnswers:void 0},D={visualId:void 0,middleName:void 0,description:"Created by populate script",occupation:void 0,documents:[],followUp:void 0,riskReason:void 0,isDateOfReportingApproximate:!1,followUpHistory:[]},I={description:"Created by populate script",isDateOfReportingApproximate:!1},G={contactDateEstimated:!1,active:!0,clusterId:void 0,socialRelationshipTypeId:void 0,socialRelationshipDetail:void 0},y=(t,e,o)=>(void 0===o&&(o=2),parseFloat(Math.min(t+Math.random()*(e-t),e).toFixed(o)));app.logger.debug(`Creating outbreak ${e}`),app.models.outbreak.create(Object.assign(T,{name:e},common.install.timestamps),options).then(t=>(app.logger.debug(`Outbreak '${t.name}' created => '${t.id}'`),{outbreakData:t.toJSON()})).then(t=>{app.logger.debug("Creating locations"),t.locations={};const o=[];for(let a=0;a<i;a++)o.push(o=>{const n=`${e} location ${a+1}`;app.logger.debug(`Creating location '${n}'`);const i={lat:y(r.min,r.max,3),lng:y(l.min,l.max,3)};app.models.location.create(Object.assign(S,{name:n,parentLocationId:void 0,geoLocation:i,geographicalLevelId:u},common.install.timestamps),options).then(e=>{app.logger.debug(`Location '${e.name}' created => '${e.id}'`),t.locations[e.id]=e.toJSON(),o()}).catch(o)});return new Promise((e,a)=>{async.parallelLimit(o,10,function(o){if(o)return a(o);app.logger.debug("Finished creating locations"),e(t)})})}).then(t=>{app.logger.debug("Creating sub-locations");const e=function(o,a=0,n=0){if(a<n)return Promise.resolve();n++;let i=[];const E=[];return _.each(o,t=>{for(let e=0;e<s;e++)E.push(a=>{const s=`${t.name} sub ${e+1}`;app.logger.debug(`Creating location '${s}'`);const E={lat:y(t.geoLocation.lat+R.lat.min,t.geoLocation.lat+R.lat.max,3),lng:y(t.geoLocation.lng+R.lng.min,t.geoLocation.lng+R.lng.max,3)};app.models.location.create(Object.assign(S,{name:s,parentLocationId:t.id,geoLocation:E,geographicalLevelId:u},common.install.timestamps),options).then(t=>{app.logger.debug(`Location '${t.name}' created => '${t.id}'`),1===n&&(o[t.parentLocationId].subLocations||(o[t.parentLocationId].subLocations=[]),o[t.parentLocationId].subLocations.push(t.toJSON())),i.push(t.toJSON()),a()}).catch(a)})}),new Promise((o,s)=>{async.series(E,function(E){return E?s(E):(app.logger.debug(`Finished creating sub-locations for level ${n}`),e(i,a,n).then(()=>o(t)).catch(s))})})};return e(t.locations,E)}).then(t=>{app.logger.debug("Creating cases"),t.cases={};const e=[],a=Object.keys(t.locations);for(let n=0;n<o;n++)e.push(e=>{const o=`CaseFirst${n+1}`,E=`CaseLast${y(Math.max(n-3,0),n+3,0)}`;let _,c;Math.random()>=.3&&(_=moment().utc().startOf("day").add(-y(g,m,0),"years").add(y(0,10,0),"months").add(y(0,28,0),"days"),c={years:moment().utc().startOf("day").diff(_,"years"),months:0});const d=Math.random()<.5?"LNG_REFERENCE_DATA_CATEGORY_GENDER_FEMALE":"LNG_REFERENCE_DATA_CATEGORY_GENDER_MALE",r=[];if(Math.random()>=.1){const e=a[n%i];let o;if(s<1||Math.random()<.5)o=t.locations[e];else{const a=y(0,s-1,0);o=t.locations[e].subLocations[a]}const E={lat:y(o.geoLocation.lat+p.lat.min,o.geoLocation.lat+p.lat.max,3),lng:y(o.geoLocation.lng+p.lng.min,o.geoLocation.lng+p.lng.max,3)};r.push({typeId:"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE",city:`City ${y(1,10,0)}`,addressLine1:`Street ${y(1,5,0)}`,postalCode:y(O,N,0).toString(),locationId:o.id,geoLocation:E,geoLocationAccurate:!1,date:C,phoneNumber:`Phone ${y(1,10,0)}`})}const l=L.clone().add(y(1,120,0),"days"),R=l.clone().add(1,"days"),A=R.clone().add(1,"days");let u="LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED";Math.random()>=.1&&(u=["LNG_REFERENCE_DATA_CATEGORY_OUTCOME_ALIVE","LNG_REFERENCE_DATA_CATEGORY_OUTCOME_RECOVERED"][y(0,1,0)]);let T,S="LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_NOT_A_CASE_DISCARDED";("LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"===u||Math.random()>=.1)&&(S=["LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_CONFIRMED","LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_PROBABLE","LNG_REFERENCE_DATA_CATEGORY_CASE_CLASSIFICATION_SUSPECT"][y(0,2,0)]),"LNG_REFERENCE_DATA_CATEGORY_OUTCOME_DECEASED"===u&&Math.random()>=.3&&(T=A.clone().add(7,"days"));const D=["LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_1_LOW","LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_2_MEDIUM","LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_3_HIGH"][y(0,2,0)];app.logger.debug(`Creating case '${E} ${o}'`),app.models.case.create(Object.assign(h,{outbreakId:t.outbreakData.id,firstName:o,lastName:E,dob:_?_.toISOString():_,age:c,gender:d,addresses:r,dateOfLastContact:C,dateOfOnset:l?l.toISOString():l,dateOfReporting:R?R.toISOString():R,dateOfOutcome:A?A.toISOString():A,outcomeId:u,classification:S,dateOfBurial:T?T.toISOString():T,riskLevel:D},common.install.timestamps),options).then(o=>{app.logger.debug(`Case '${o.lastName} ${o.firstName}' created => '${o.id}'`),t.cases[o.id]={id:o.id,type:o.type},e()}).catch(e)});return new Promise((o,a)=>{async.parallelLimit(e,10,function(e){if(e)return a(e);app.logger.debug("Finished creating cases"),o(t)})})}).then(t=>{app.logger.debug("Creating contacts"),t.contacts={};const e=[],o=Object.keys(t.locations);for(let n=0;n<a;n++)e.push(e=>{const a=`ContactFirst${n+1}`,E=`ContactLast${y(Math.max(n-3,0),n+3,0)}`;let _,c;Math.random()>=.3&&(_=moment().utc().startOf("day").add(-y(g,m,0),"years").add(y(0,10,0),"months").add(y(0,28,0),"days"),c={years:moment().utc().startOf("day").diff(_,"years"),months:0});const d=Math.random()<.5?"LNG_REFERENCE_DATA_CATEGORY_GENDER_FEMALE":"LNG_REFERENCE_DATA_CATEGORY_GENDER_MALE",r=[];if(Math.random()>=.1){const e=o[n%i];let a;if(s<1||Math.random()<.5)a=t.locations[e];else{const o=y(0,s-1,0);a=t.locations[e].subLocations[o]}const E={lat:y(a.geoLocation.lat+A.lat.min,a.geoLocation.lat+A.lat.max,3),lng:y(a.geoLocation.lng+A.lng.min,a.geoLocation.lng+A.lng.max,3)};r.push({typeId:"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE",city:`City ${y(1,10,0)}`,addressLine1:`Street ${y(1,5,0)}`,postalCode:y(O,N,0).toString(),locationId:a.id,geoLocation:E,geoLocationAccurate:!1,date:C,phoneNumber:`Phone ${y(1,10,0)}`})}const l=L.clone().add(y(1,120,0),"days"),R=["LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_1_LOW","LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_2_MEDIUM","LNG_REFERENCE_DATA_CATEGORY_RISK_LEVEL_3_HIGH"][y(0,2,0)];app.logger.debug(`Creating contact '${E} ${a}'`),app.models.contact.create(Object.assign(D,{outbreakId:t.outbreakData.id,firstName:a,lastName:E,dob:_?_.toISOString():_,age:c,gender:d,addresses:r,dateOfReporting:l?l.toISOString():l,riskLevel:R},common.install.timestamps),options).then(o=>{app.logger.debug(`Contact '${o.lastName} ${o.firstName}' created => '${o.id}'`),t.contacts[o.id]={id:o.id,type:o.type},e()}).catch(e)});return new Promise((o,a)=>{async.parallelLimit(e,10,function(e){if(e)return a(e);app.logger.debug("Finished creating contacts"),o(t)})})}).then(t=>{app.logger.debug("Creating events"),t.events={};const e=[],o=Object.keys(t.locations);for(let a=0;a<n;a++)e.push(e=>{const n=`Event${a+1}`;let E;if(Math.random()>=.1){const e=o[a%i];let n;if(s<1||Math.random()<.5)n=t.locations[e];else{const o=y(0,s-1,0);n=t.locations[e].subLocations[o]}const _={lat:y(n.geoLocation.lat+A.lat.min,n.geoLocation.lat+A.lat.max,3),lng:y(n.geoLocation.lng+A.lng.min,n.geoLocation.lng+A.lng.max,3)};E={typeId:"LNG_REFERENCE_DATA_CATEGORY_ADDRESS_TYPE_USUAL_PLACE_OF_RESIDENCE",city:`City ${y(1,10,0)}`,addressLine1:`Street ${y(1,5,0)}`,postalCode:y(O,N,0).toString(),locationId:n.id,geoLocation:_,geoLocationAccurate:!1,date:C,phoneNumber:`Phone ${y(1,10,0)}`}}const _=L.clone().add(y(1,120,0),"days"),c=_.clone().add(5,"days");app.logger.debug(`Creating event '${n}'`),app.models.event.create(Object.assign(I,{outbreakId:t.outbreakData.id,name:n,address:E,dateOfReporting:c?c.toISOString():c,date:_?_.toISOString():_},common.install.timestamps),options).then(o=>{app.logger.debug(`Event '${o.name}' created => '${o.id}'`),t.events[o.id]={id:o.id,type:o.type},e()}).catch(e)});return new Promise((o,a)=>{async.parallelLimit(e,10,function(e){if(e)return a(e);app.logger.debug("Finished creating events"),o(t)})})}).then(t=>{app.logger.debug("Creating relationships");const e=[],o={},a=Object.keys(t.cases),n=Object.keys(t.contacts),i=[...a,...Object.keys(t.events)],s=[...i,...n],E=a=>{let n=y(c,d);n="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===a.type?Math.max(n,1):n;for(let E=0;E<n;E++){let n;for(;void 0===n||n.id===a.id||o[n.id]&&o[n.id][a.id];){const e="LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===a.type?i:s,o=e[y(0,e.length-1,0)];n=t.cases[o]?t.cases[o]:t.contacts[o]?t.contacts[o]:t.events[o]}const E=[];"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===a.type?E.push({id:a.id,type:a.type,target:!0},{id:n.id,type:n.type,source:!0}):"LNG_REFERENCE_DATA_CATEGORY_PERSON_TYPE_CONTACT"===n.type?E.push({id:n.id,type:n.type,target:!0},{id:a.id,type:a.type,source:!0}):Math.random()<.5?E.push({id:a.id,type:a.type,target:!0},{id:n.id,type:n.type,source:!0}):E.push({id:n.id,type:n.type,target:!0},{id:a.id,type:a.type,source:!0}),o[E[1].id]||(o[E[1].id]={}),o[E[1].id][E[0].id]=!0,o[E[0].id]||(o[E[0].id]={}),o[E[0].id][E[1].id]=!0;const _=L.clone().add(y(1,120,0),"days"),c=["LNG_REFERENCE_DATA_CATEGORY_CERTAINTY_LEVEL_1_LOW","LNG_REFERENCE_DATA_CATEGORY_CERTAINTY_LEVEL_2_MEDIUM","LNG_REFERENCE_DATA_CATEGORY_CERTAINTY_LEVEL_3_HIGH"][y(0,2,0)];let d,r,l;Math.random()>=.5&&(d=["LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_TYPE_DIRECT_PHYSICAL_CONTACT","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_TYPE_SLEPT_ATE_OR_SPEND_TIME_IN_SAME_HOUSEHOLD","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_TYPE_TOUCHED_BODY_FLUIDS"][y(0,3,0)]),Math.random()>=.5&&(r=["LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY_11_20_TIMES","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY_1_5_TIMES","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY_6_10_TIMES","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY_OVER_21_TIMES","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_FREQUENCY_UNKNOWN"][y(0,4,0)]),Math.random()>=.5&&(l=["LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_DURATION_LONG_DAYS","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_DURATION_MEDIUM_HOURS","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_DURATION_SHORT_MINUTES","LNG_REFERENCE_DATA_CATEGORY_EXPOSURE_DURATION_VERY_SHORT_SECONDS"][y(0,3,0)]),e.push(e=>{app.models.relationship.create(Object.assign(G,{outbreakId:t.outbreakData.id,persons:E,contactDate:_?_.toISOString():_,certaintyLevelId:c,exposureTypeId:d,exposureFrequencyId:r,exposureDurationId:l},common.install.timestamps),options).then(t=>{app.logger.debug(`Relationship created => '${t.id}'`),e()}).catch(e)})}};return _.each(t.contacts,E),_.each(t.cases,E),_.each(t.contacts,E),new Promise((o,a)=>{async.parallelLimit(e,10,function(e){if(e)return a(e);app.logger.debug("Finished creating relationships"),o(t)})})}).then(()=>{app.logger.debug("Finished populating database"),t()}).catch(t)}module.exports=(t=>(module.methodRelevantArgs=t,run));
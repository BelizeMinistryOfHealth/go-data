"use strict";const MongoDBHelper=require("../../../components/mongoDBHelper"),_=require("lodash"),moment=require("moment"),rolesMap=require("./defaultRoles"),defaultAdmin={_id:"sys_admin",firstName:"System",lastName:"Administrator",email:"admin@who.int",password:"admin",languageId:"english_us",passwordChange:!0,roleIds:["ROLE_SYSTEM_ADMINISTRATOR","ROLE_USER_MANAGER"]};let migrationErrors=[];function migrateRoles(e){const r={},o=e.collection("role");return Promise.all(Object.keys(rolesMap).map(e=>o.findOne({$or:[{name:e},{_id:rolesMap[e].id}]}).then(s=>{if(!s){const r=rolesMap[e];return o.insertOne({_id:r.id,name:r.newName?r.newName:e,description:r.description,permissionIds:r.permissionIds}).then(()=>"created.").catch(e=>`not created. Error: ${e.message}`)}if(s._id===rolesMap[e].id)return"skipped. Was already updated.";const n=s._id;return o.insertOne(Object.assign(s,{_id:rolesMap[e].id})).then(()=>o.deleteOne({_id:n})).then(()=>(r[n]=rolesMap[e].id,"updated.")).catch(r=>(o.deleteOne({_id:rolesMap[e].id}).catch(r=>{console.log(`DB error on role ${e} rollback. Error: ${r.message}`)}),migrationErrors.push(`Role ${e} not updated. Error: ${r.message}`),`not updated. Error: ${r.message}`))}).then(r=>{console.log(`Role ${e} ${r}`)}).catch(r=>{let o=`DB error when checking role ${e}. Error: ${r.message}`;migrationErrors.push(o),console.log(o)}))).catch(()=>{}).then(()=>{const e=Object.keys(rolesMap).map(e=>rolesMap[e].id);return!e||e.length<1?(console.log("We don't need to check permissions for default user roles since there are none :)"),null):(console.log(`Checking ${e.length} roles permissions...`),o.find({_id:{$in:e}}).toArray().catch(r=>{console.log(`DB error while trying to retrieve roles '${e.join(", ")}'. Error: ${r.message}`)}))}).then(e=>{if(null===e)return;console.log(`Found ${e.length} roles`);const r={};Object.keys(rolesMap).forEach(e=>{const o=rolesMap[e];r[o.id]=o}),console.log("Checking roles...");const s=[];if(e.forEach(e=>{const o=r[e._id];o&&(!e.migrateDate||!e.permissionIds||(e.permissionIds.length!==o.permissionIds.length||_.find(e.permissionIds,e=>-1===o.permissionIds.indexOf(e))||o.newName&&e.name!==o.newName)&&moment(e.migrateDate).isBefore(moment(o.migrateDate)))&&(console.log(`Resetting role '${e._id}' permissions and name`),s.push({id:e._id,permissionIds:o.permissionIds,name:o.newName,migrateDate:o.migrateDate}))}),!(s.length<1))return Promise.all(s.map(e=>o.updateOne({_id:e.id},{$set:_.isEmpty(e.name)?{permissionIds:e.permissionIds,migrateDate:e.migrateDate}:{permissionIds:e.permissionIds,name:e.name,migrateDate:e.migrateDate}}))).catch(e=>{console.log(`DB error while trying to update roles. Error: ${e.message}`)});console.log("There is nothing to update")}).then(()=>r)}function migrateUsers(e,r={}){const o=Object.keys(r);if(!o.length)return Promise.resolve();const s=e.collection("user");return s.find({roleIds:{$in:o}}).toArray().then(e=>e.length?Promise.all(e.map(e=>{let o=e.roleIds,n=o.map(e=>r[e]?r[e]:e);return s.updateOne({_id:e._id},{$set:{roleIds:n}}).then(()=>{console.log(`User '${e._id}' roles update success`)}).catch(r=>{let s=`User '${e._id}' roles update error: ${r.message}. Old roleIds: ${JSON.stringify(o)}. New roleIds: ${JSON.stringify(n)}`;migrationErrors.push(s),console.log(s)})})).catch(()=>{}):(console.log("No users need update"),Promise.resolve())).then(()=>{console.log("User migration finished.")}).catch(e=>{let r=`DB error when checking for users. Error: ${e.message}`;migrationErrors.push(r),console.log(r)})}function run(e){let r;MongoDBHelper.getMongoDBConnection().then(e=>migrateRoles(r=e)).then(e=>migrateUsers(r,e)).then(()=>{const e=r.collection("user");return e.findOne({_id:"sys_admin"}).then(r=>{if(!r)return console.log("Sys admin user not found"),e.insertOne(defaultAdmin).then(()=>{console.log("Sys admin user created")}).catch(e=>{console.log(`Error creating sys admin user: ${e.message}`)});const o=_.uniq([...r.roleIds?r.roleIds:[],...defaultAdmin.roleIds]);if(!_.isEqual(o,r.roleIds))return e.updateOne({_id:"sys_admin"},{$set:{roleIds:o}}).then(()=>{console.log("Sys admin updated")}).catch(e=>{let r=`Sys admin role update error: ${e.message}.`;migrationErrors.push(r),console.log(r)});console.log("No need to reset sys admin")}).catch(e=>{let r=`Sys admin role update error: ${e.message}.`;migrationErrors.push(r),console.log(r)})}).then(()=>(console.log(`Migration complete ${migrationErrors.length?`with errors: \n${migrationErrors.join("\n")}`:""}.`),e())).catch(e)}module.exports=run;
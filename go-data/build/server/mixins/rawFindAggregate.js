"use strict";const _=require("lodash"),app=require("../server"),Timer=require("../../components/Timer"),uuid=require("uuid");module.exports=function(e){let o=_.get(e,"definition.settings.mongodb.collection");o||(o=e.modelName);const t=_.get(e,"definition.settings.scope.where");e.rawFindAggregate=function(s={},r={}){const i=uuid.v4(),n=new Timer;n.start(),r=r||{},(s=s||{}).include&&delete s.include;let a=s.where?app.utils.remote.convertLoopbackFilterToMongo(s.where):{};if(t&&!r.ignoreDefaultScope&&(a=_.isEmpty(a)?t:{$and:[t,a]}),!s.deleted){const e={$or:[{deleted:!1},{deleted:{$eq:null}}]};a=_.isEmpty(a)?e:{$and:[a,e]}}const p=[],l={$and:[]};if(e.nestedGeoPoints){const o=[];e.nestedGeoPoints.forEach(e=>{o.push(e),e.indexOf("[]")>-1&&o.push(e.replace(/\[]/g,""))});const t=e=>{_.each(e,(s,r)=>{"string"==typeof r&&o.includes(r)&&s.$geoNear?(l.$and.push({[r]:{$geoNear:s.$geoNear}}),delete s.$geoNear,_.isEmpty(e[r])&&delete e[r]):(_.isArray(s)||_.isObject(s))&&t(s)})};t(a)}if(_.isEmpty(l.$and)||p.push({$match:l}),r.matchAfterLookup||p.push({$match:a}),r.relations&&_.each(r.relations,e=>{e.lookup&&p.push({$lookup:e.lookup}),e.unwind&&p.push({$unwind:{path:`$${e.lookup.as}`,preserveNullAndEmptyArrays:!0}})}),r.matchAfterLookup&&p.push({$match:a}),r.countOnly)p.push({$project:{_id:1}});else{const e={ASC:1,DESC:-1},o={};if(Array.isArray(s.order)&&s.order.forEach(t=>{const s=t.split(" ");2===s.length&&(s[1]=s[1].toUpperCase(),e.hasOwnProperty(s[1])&&(o[s[0]]=e[s[1]]))}),Object.keys(o).length&&p.push({$sort:o}),isNaN(s.skip)||p.push({$skip:s.skip}),isNaN(s.limit)||p.push({$limit:s.limit}),s.fields){const e={};(s.fields||[]).forEach(o=>{_.isEmpty(o)||(e[o]=!0)}),_.isEmpty(e)||p.push({$project:e})}}return app.logger.debug(`[QueryId: ${i}] Performing MongoDB aggregate request on collection '${o}': aggregate ${JSON.stringify(p)}`),app.dataSources.mongoDb.connector.collection(o).aggregate(p).toArray().then(e=>(app.logger.debug(`[QueryId: ${i}] MongoDB request completed after ${n.getElapsedMilliseconds()} msec`),e=e||[],r.countOnly?e.length:(e.forEach(e=>{e.id=e._id,delete e._id,r.relations&&_.each(r.relations,o=>{o.map&&o.lookup&&o.lookup.as&&e[o.lookup.as]&&(e[o.lookup.as]=o.map(e[o.lookup.as]))})}),e)))}};
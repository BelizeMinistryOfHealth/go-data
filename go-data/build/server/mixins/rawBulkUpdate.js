"use strict";const _=require("lodash"),App=require("../server"),Timer=require("../../components/Timer"),Uuid=require("uuid");module.exports=function(e){let t=_.get(e,"definition.settings.mongodb.collection");t||(t=e.modelName);const o=_.get(e,"definition.settings.scope.where");e.rawBulkUpdate=function(e,n,r={},i={}){e=e||{};const d=Uuid.v4(),u=new Timer;u.start(),n.updatedAt=new Date,n.updatedBy=_.get(r,"accessToken.userId","unavailable"),o&&(e={$and:[o,e]}),e=App.utils.remote.convertLoopbackFilterToMongo({$and:[{$or:[{deleted:!1},{deleted:{$eq:null}}]},e]}),App.logger.debug(`[QueryId: ${d}] Performing MongoDB request on collection '${t}': updateMany query: ${JSON.stringify(e)} update: ${JSON.stringify(n)}`);const l=App.dataSources.mongoDb.connector.collection(t);let s;return l.updateMany(e,{$set:n},i).then(function(o){return App.logger.debug(`[QueryId: ${d}] MongoDB request completed after ${u.getElapsedMilliseconds()} msec`),s={matched:o.matchedCount,modified:o.modifiedCount},o.matchedCount!==o.modifiedCount?(e.$and.push({updatedAt:{$lte:n.updatedAt}}),l.find(e,{projection:{_id:1}}).toArray().catch(function(e){App.logger.debug(`[QueryId: ${d}] Failed retrieving resources that were not modified for collection '${t}'. Error: ${e.message}`)})):Promise.resolve()}).then(function(e){if(e&&e.length){let o=e.map(e=>e._id);App.logger.debug(`[QueryId: ${d}] MongoDB request completed with failures for the following '${t}' collection resources: ${o.join(", ")}`),s.notModified=o.length,s.notModifiedIDs=o}return s})}};
"use strict";const app=require("../server"),_=require("lodash"),moment=require("moment");function getRequestFromOptions(e){let t;return e.remotingContext&&e.remotingContext.req&&(t=e.remotingContext.req),t}function getLoggedInUserFromOptions(e){const t=getRequestFromOptions(e);let o;return t&&t.authData&&(o=t.authData.user),o}function getRemoteAddressFromOptions(e){const t=getRequestFromOptions(e);let o;return t&&((o=t.headers["x-forwarded-for"])||(o=t.connection.remoteAddress)),o}function isMonitoredField(e){return-1===["createdAt","createdBy","updatedAt","updatedBy","deleted","deletedAt"].indexOf(e)}function isMonitoredModel(e){return-1===["auditLog","extendedPersistedModel","person"].indexOf(e.modelName)}function mustObfuscateField(e){return["password"].indexOf(e)>-1}function isMonitoredAction(e){return!_.get(e,"options._init",!1)}module.exports=function(e){function t(e){let t=getLoggedInUserFromOptions(e.options),o=getRemoteAddressFromOptions(e.options);return{iPAddress:o||"unavailable",id:t?t.id:"unavailable",role:t&&t.roles?t.roles.reduce((e,t)=>e+=`${t.name} `,""):"unavailable"}}isMonitoredModel(e)&&(e.observe("before save",function(e,t){let o=[];isMonitoredAction(e)&&(e.data&&e.currentInstance&&Object.keys(e.data).forEach(function(t){if(isMonitoredField(t)&&void 0!==e.data[t]&&!_.isEqual(e.currentInstance[t]&&e.currentInstance[t].toJSON?e.currentInstance[t].toJSON():e.currentInstance[t],e.data[t]&&e.data[t].toJSON?e.data[t].toJSON():e.data[t])){let n=_.cloneDeepWith(e.data[t],function(e){if(e instanceof moment)return e.toDate()});o.push({field:t,oldValue:mustObfuscateField(t)?"***":e.currentInstance[t],newValue:mustObfuscateField(t)?"*****":n})}}),e.options.changedFields=o),t()}),e.observe("after save",function(o,n){if(isMonitoredAction(o)){const n=t(o);if(o.isNewInstance){let t={action:app.models.auditLog.actions.created,modelName:e.modelName,userId:n.id,userRole:n.role,userIPAddress:n.iPAddress,changedData:[]},d=o.instance.toJSON();t.recordId=o.instance.id,Object.keys(d).forEach(function(e){isMonitoredField(e)&&void 0!==d[e]&&t.changedData.push({field:e,newValue:mustObfuscateField(e)?"***":d[e]})}),app.models.auditLog.create(t,o.options).catch(function(e){app.logger.log(e)})}else if(o.options.changedFields&&o.options.changedFields.length){let t={action:app.models.auditLog.actions.modified,modelName:e.modelName,recordId:o.instance.id,userId:n.id,userRole:n.role,userIPAddress:n.iPAddress,changedData:o.options.changedFields};app.models.auditLog.create(t,o.options).catch(function(e){app.logger.log(e)})}}n()}),e.observe("before delete",function(t,o){isMonitoredAction(t)&&t.where.id?e.findById(t.where.id).then(function(e){e&&(t.options.deletedInstance=e.toJSON()),o()}):o()}),e.observe("after delete",function(o,n){if(isMonitoredAction(o)&&o.options.deletedInstance){const d=t(o);let i={action:app.models.auditLog.actions.removed,modelName:e.modelName,recordId:o.options.deletedInstance.id,userId:d.id,userRole:d.role,userIPAddress:d.iPAddress,changedData:[]};Object.keys(o.options.deletedInstance).forEach(function(e){void 0!==o.options.deletedInstance[e]&&i.changedData.push({field:e,oldValue:o.options.deletedInstance[e]})}),app.models.auditLog.create(i,o.options).catch(function(e){app.logger.log(e)}),n()}else n()}),e.observe("after restore",function(o,n){if(isMonitoredAction(o)){const n=t(o);let d={action:app.models.auditLog.actions.restored,modelName:e.modelName,userId:n.id,userRole:n.role,userIPAddress:n.iPAddress,changedData:[]},i=o.instance;i.toJSON&&(i=i.toJSON()),d.recordId=i.id,Object.keys(i).forEach(function(e){isMonitoredField(e)&&void 0!==i[e]&&d.changedData.push({field:e,newValue:i[e]})}),app.models.auditLog.create(d,o.options).catch(function(e){app.logger.log(e)})}n()}))};